(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

/**
 * @typedef {import('hast-util-format').Options} Options
 */ __turbopack_context__.s({});
;
}),
"[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <locals>");
}),
"[project]/node_modules/.pnpm/hast-util-is-element@3.0.0/node_modules/hast-util-is-element/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Parents} Parents
 */ /**
 * @template Fn
 * @template Fallback
 * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate
 */ /**
 * @callback Check
 *   Check that an arbitrary value is an element.
 * @param {unknown} this
 *   Context object (`this`) to call `test` with
 * @param {unknown} [element]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   Position of `element` in its parent.
 * @param {Parents | null | undefined} [parent]
 *   Parent of `element`.
 * @returns {boolean}
 *   Whether this is an element and passes a test.
 *
 * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test
 *   Check for an arbitrary element.
 *
 *   * when `string`, checks that the element has that tag name
 *   * when `function`, see `TestFunction`
 *   * when `Array`, checks if one of the subtests pass
 *
 * @callback TestFunction
 *   Check if an element passes a test.
 * @param {unknown} this
 *   The given context.
 * @param {Element} element
 *   An element.
 * @param {number | undefined} [index]
 *   Position of `element` in its parent.
 * @param {Parents | undefined} [parent]
 *   Parent of `element`.
 * @returns {boolean | undefined | void}
 *   Whether this element passes the test.
 *
 *   Note: `void` is included until TS sees no return as `undefined`.
 */ /**
 * Check if `element` is an `Element` and whether it passes the given test.
 *
 * @param element
 *   Thing to check, typically `element`.
 * @param test
 *   Check for a specific element.
 * @param index
 *   Position of `element` in its parent.
 * @param parent
 *   Parent of `element`.
 * @param context
 *   Context object (`this`) to call `test` with.
 * @returns
 *   Whether `element` is an `Element` and passes a test.
 * @throws
 *   When an incorrect `test`, `index`, or `parent` is given; there is no error
 *   thrown when `element` is not a node or not an element.
 */ __turbopack_context__.s({
    "convertElement": ()=>convertElement,
    "isElement": ()=>isElement
});
const isElement = /**
     * @param {unknown} [element]
     * @param {Test | undefined} [test]
     * @param {number | null | undefined} [index]
     * @param {Parents | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function(element, test, index, parent, context) {
    const check = convertElement(test);
    if (index !== null && index !== undefined && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error('Expected positive finite `index`');
    }
    if (parent !== null && parent !== undefined && (!parent.type || !parent.children)) {
        throw new Error('Expected valid `parent`');
    }
    if ((index === null || index === undefined) !== (parent === null || parent === undefined)) {
        throw new Error('Expected both `index` and `parent`');
    }
    return looksLikeAnElement(element) ? check.call(context, element, index, parent) : false;
};
const convertElement = /**
     * @param {Test | null | undefined} [test]
     * @returns {Check}
     */ function(test) {
    if (test === null || test === undefined) {
        return element;
    }
    if (typeof test === 'string') {
        return tagNameFactory(test);
    }
    // Assume array.
    if (typeof test === 'object') {
        return anyFactory(test);
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    throw new Error('Expected function, string, or array as `test`');
};
/**
 * Handle multiple tests.
 *
 * @param {Array<TestFunction | string>} tests
 * @returns {Check}
 */ function anyFactory(tests) {
    /** @type {Array<Check>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convertElement(tests[index]);
    }
    return castFactory(any);
    //TURBOPACK unreachable
    ;
    /**
   * @this {unknown}
   * @type {TestFunction}
   */ function any() {
        for(var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++){
            parameters[_key] = arguments[_key];
        }
        let index = -1;
        while(++index < checks.length){
            if (checks[index].apply(this, parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn a string into a test for an element with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */ function tagNameFactory(check) {
    return castFactory(tagName);
    //TURBOPACK unreachable
    ;
    /**
   * @param {Element} element
   * @returns {boolean}
   */ function tagName(element) {
        return element.tagName === check;
    }
}
/**
 * Turn a custom test into a test for an element that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */ function castFactory(testFunction) {
    return check;
    //TURBOPACK unreachable
    ;
    /**
   * @this {unknown}
   * @type {Check}
   */ function check(value, index, parent) {
        return Boolean(looksLikeAnElement(value) && testFunction.call(this, value, typeof index === 'number' ? index : undefined, parent || undefined));
    }
}
/**
 * Make sure something is an element.
 *
 * @param {unknown} element
 * @returns {element is Element}
 */ function element(element) {
    return Boolean(element && typeof element === 'object' && 'type' in element && element.type === 'element' && 'tagName' in element && typeof element.tagName === 'string');
}
/**
 * @param {unknown} value
 * @returns {value is Element}
 */ function looksLikeAnElement(value) {
    return value !== null && typeof value === 'object' && 'type' in value && 'tagName' in value;
}
}),
"[project]/node_modules/.pnpm/hast-util-embedded@3.0.0/node_modules/hast-util-embedded/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "embedded": ()=>embedded
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-is-element@3.0.0/node_modules/hast-util-is-element/lib/index.js [app-client] (ecmascript)");
;
const embedded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertElement"])(/**
   * @param element
   * @returns {element is {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}}
   */ function(element) {
    return element.tagName === 'audio' || element.tagName === 'canvas' || element.tagName === 'embed' || element.tagName === 'iframe' || element.tagName === 'img' || element.tagName === 'math' || element.tagName === 'object' || element.tagName === 'picture' || element.tagName === 'svg' || element.tagName === 'video';
});
}),
"[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/block.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
__turbopack_context__.s({
    "blocks": ()=>blocks
});
const blocks = [
    'address',
    'article',
    'aside',
    'blockquote',
    'body',
    'br',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hgroup',
    'hr',
    'html',
    'legend',
    'li',
    'li',
    'listing',
    'main',
    'menu',
    'nav',
    'ol',
    'optgroup',
    'option',
    'p',
    'plaintext',
    'pre',
    'section',
    'summary',
    'table',
    'tbody',
    'td',
    'td',
    'tfoot',
    'th',
    'th',
    'thead',
    'tr',
    'ul',
    'wbr',
    'xmp' // Flow content, legacy
];
}),
"[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/content.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "content": ()=>content
});
const content = [
    // Form.
    'button',
    'input',
    'select',
    'textarea'
];
}),
"[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/skippable.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "skippable": ()=>skippable
});
const skippable = [
    'area',
    'base',
    'basefont',
    'dialog',
    'datalist',
    'head',
    'link',
    'meta',
    'noembed',
    'noframes',
    'param',
    'rp',
    'script',
    'source',
    'style',
    'template',
    'track',
    'title'
];
}),
"[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @import {Nodes, Parents, Text} from 'hast'
 */ /**
 * @callback Collapse
 *   Collapse a string.
 * @param {string} value
 *   Value to collapse.
 * @returns {string}
 *   Collapsed value.
 *
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [newlines=false]
 *   Collapse whitespace containing newlines to `'\n'` instead of `' '`
 *   (default: `false`); the default is to collapse to a single space.
 *
 * @typedef Result
 *   Result.
 * @property {boolean} remove
 *   Whether to remove.
 * @property {boolean} ignore
 *   Whether to ignore.
 * @property {boolean} stripAtStart
 *   Whether to strip at the start.
 *
 * @typedef State
 *   Info passed around.
 * @property {Collapse} collapse
 *   Collapse.
 * @property {Whitespace} whitespace
 *   Current whitespace.
 * @property {boolean | undefined} [before]
 *   Whether there is a break before (default: `false`).
 * @property {boolean | undefined} [after]
 *   Whether there is a break after (default: `false`).
 *
 * @typedef {'normal' | 'nowrap' | 'pre' | 'pre-wrap'} Whitespace
 *   Whitespace setting.
 */ __turbopack_context__.s({
    "minifyWhitespace": ()=>minifyWhitespace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$embedded$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$embedded$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-embedded@3.0.0/node_modules/hast-util-embedded/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-is-element@3.0.0/node_modules/hast-util-is-element/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$block$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/block.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$content$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/content.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$skippable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/skippable.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
/** @type {Options} */ const emptyOptions = {};
const ignorableNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convert"])([
    'comment',
    'doctype'
]);
function minifyWhitespace(tree, options) {
    const settings = options || emptyOptions;
    minify(tree, {
        collapse: collapseFactory(settings.newlines ? replaceNewlines : replaceWhitespace),
        whitespace: 'normal'
    });
}
/**
 * @param {Nodes} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Result}
 *   Result.
 */ function minify(node, state) {
    if ('children' in node) {
        const settings = {
            ...state
        };
        if (node.type === 'root' || blocklike(node)) {
            settings.before = true;
            settings.after = true;
        }
        settings.whitespace = inferWhiteSpace(node, state);
        return all(node, settings);
    }
    if (node.type === 'text') {
        if (state.whitespace === 'normal') {
            return minifyText(node, state);
        }
        // Naïve collapse, but no trimming:
        if (state.whitespace === 'nowrap') {
            node.value = state.collapse(node.value);
        }
    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor
    // trimmed.
    }
    return {
        ignore: ignorableNode(node),
        stripAtStart: false,
        remove: false
    };
}
/**
 * @param {Text} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Result}
 *   Result.
 */ function minifyText(node, state) {
    const value = state.collapse(node.value);
    const result = {
        ignore: false,
        stripAtStart: false,
        remove: false
    };
    let start = 0;
    let end = value.length;
    if (state.before && removable(value.charAt(0))) {
        start++;
    }
    if (start !== end && removable(value.charAt(end - 1))) {
        if (state.after) {
            end--;
        } else {
            result.stripAtStart = true;
        }
    }
    if (start === end) {
        result.remove = true;
    } else {
        node.value = value.slice(start, end);
    }
    return result;
}
/**
 * @param {Parents} parent
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Result}
 *   Result.
 */ function all(parent, state) {
    let before = state.before;
    const after = state.after;
    const children = parent.children;
    let length = children.length;
    let index = -1;
    while(++index < length){
        const result = minify(children[index], {
            ...state,
            after: collapsableAfter(children, index, after),
            before
        });
        if (result.remove) {
            children.splice(index, 1);
            index--;
            length--;
        } else if (!result.ignore) {
            before = result.stripAtStart;
        }
        // If this element, such as a `<select>` or `<img>`, contributes content
        // somehow, allow whitespace again.
        if (content(children[index])) {
            before = false;
        }
    }
    return {
        ignore: false,
        stripAtStart: Boolean(before || after),
        remove: false
    };
}
/**
 * @param {Array<Nodes>} nodes
 *   Nodes.
 * @param {number} index
 *   Index.
 * @param {boolean | undefined} [after]
 *   Whether there is a break after `nodes` (default: `false`).
 * @returns {boolean | undefined}
 *   Whether there is a break after the node at `index`.
 */ function collapsableAfter(nodes, index, after) {
    while(++index < nodes.length){
        const node = nodes[index];
        let result = inferBoundary(node);
        if (result === undefined && 'children' in node && !skippable(node)) {
            result = collapsableAfter(node.children, -1);
        }
        if (typeof result === 'boolean') {
            return result;
        }
    }
    return after;
}
/**
 * Infer two types of boundaries:
 *
 * 1. `true` — boundary for which whitespace around it does not contribute
 *    anything
 * 2. `false` — boundary for which whitespace around it *does* contribute
 *
 * No result (`undefined`) is returned if it is unknown.
 *
 * @param {Nodes} node
 *   Node.
 * @returns {boolean | undefined}
 *   Boundary.
 */ function inferBoundary(node) {
    if (node.type === 'element') {
        if (content(node)) {
            return false;
        }
        if (blocklike(node)) {
            return true;
        }
    // Unknown: either depends on siblings if embedded or metadata, or on
    // children.
    } else if (node.type === 'text') {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])(node)) {
            return false;
        }
    } else if (!ignorableNode(node)) {
        return false;
    }
}
/**
 * Infer whether a node is skippable.
 *
 * @param {Nodes} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is skippable.
 */ function content(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$embedded$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$embedded$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["embedded"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isElement"])(node, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$content$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["content"]);
}
/**
 * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
 *
 * @param {Nodes} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is block-like.
 */ function blocklike(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isElement"])(node, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$block$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["blocks"]);
}
/**
 * @param {Parents} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is skippable.
 */ function skippable(node) {
    return Boolean(node.type === 'element' && node.properties.hidden) || ignorableNode(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isElement"])(node, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$skippable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["skippable"]);
}
/**
 * @param {string} character
 *   Character.
 * @returns {boolean}
 *   Whether `character` is removable.
 */ function removable(character) {
    return character === ' ' || character === '\n';
}
/**
 * @type {Collapse}
 */ function replaceNewlines(value) {
    const match = /\r?\n|\r/.exec(value);
    return match ? match[0] : ' ';
}
/**
 * @type {Collapse}
 */ function replaceWhitespace() {
    return ' ';
}
/**
 * @param {Collapse} replace
 * @returns {Collapse}
 *   Collapse.
 */ function collapseFactory(replace) {
    return collapse;
    //TURBOPACK unreachable
    ;
    /**
   * @type {Collapse}
   */ function collapse(value) {
        return String(value).replace(/[\t\n\v\f\r ]+/g, replace);
    }
}
/**
 * We don’t need to support void elements here (so `nobr wbr` -> `normal` is
 * ignored).
 *
 * @param {Parents} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Whitespace}
 *   Whitespace.
 */ function inferWhiteSpace(node, state) {
    if ('tagName' in node && node.properties) {
        switch(node.tagName){
            // Whitespace in script/style, while not displayed by CSS as significant,
            // could have some meaning in JS/CSS, so we can’t touch them.
            case 'listing':
            case 'plaintext':
            case 'script':
            case 'style':
            case 'xmp':
                {
                    return 'pre';
                }
            case 'nobr':
                {
                    return 'nowrap';
                }
            case 'pre':
                {
                    return node.properties.wrap ? 'pre-wrap' : 'pre';
                }
            case 'td':
            case 'th':
                {
                    return node.properties.noWrap ? 'nowrap' : state.whitespace;
                }
            case 'textarea':
                {
                    return 'pre-wrap';
                }
            default:
        }
    }
    return state.whitespace;
}
}),
"[project]/node_modules/.pnpm/hast-util-has-property@3.0.0/node_modules/hast-util-has-property/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 */ __turbopack_context__.s({
    "hasProperty": ()=>hasProperty
});
const own = {}.hasOwnProperty;
function hasProperty(node, name) {
    const value = node.type === 'element' && own.call(node.properties, name) && node.properties[name];
    return value !== null && value !== undefined && value !== false;
}
}),
"[project]/node_modules/.pnpm/hast-util-is-body-ok-link@3.0.1/node_modules/hast-util-is-body-ok-link/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @import {Nodes} from 'hast'
 */ __turbopack_context__.s({
    "isBodyOkLink": ()=>isBodyOkLink
});
const list = new Set([
    'pingback',
    'prefetch',
    'stylesheet'
]);
function isBodyOkLink(node) {
    if (node.type !== 'element' || node.tagName !== 'link') {
        return false;
    }
    if (node.properties.itemProp) {
        return true;
    }
    const value = node.properties.rel;
    let index = -1;
    if (!Array.isArray(value) || value.length === 0) {
        return false;
    }
    while(++index < value.length){
        if (!list.has(String(value[index]))) {
            return false;
        }
    }
    return true;
}
}),
"[project]/node_modules/.pnpm/hast-util-phrasing@3.0.1/node_modules/hast-util-phrasing/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @typedef {import('hast').Nodes} Nodes
 */ __turbopack_context__.s({
    "phrasing": ()=>phrasing
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$embedded$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$embedded$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-embedded@3.0.0/node_modules/hast-util-embedded/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$has$2d$property$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-has-property@3.0.0/node_modules/hast-util-has-property/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$body$2d$ok$2d$link$40$3$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$is$2d$body$2d$ok$2d$link$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-is-body-ok-link@3.0.1/node_modules/hast-util-is-body-ok-link/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-is-element@3.0.0/node_modules/hast-util-is-element/lib/index.js [app-client] (ecmascript)");
;
;
;
;
const basic = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertElement"])([
    'a',
    'abbr',
    // `area` is in fact only phrasing if it is inside a `map` element.
    // However, since `area`s are required to be inside a `map` element, and it’s
    // a rather involved check, it’s ignored here for now.
    'area',
    'b',
    'bdi',
    'bdo',
    'br',
    'button',
    'cite',
    'code',
    'data',
    'datalist',
    'del',
    'dfn',
    'em',
    'i',
    'input',
    'ins',
    'kbd',
    'keygen',
    'label',
    'map',
    'mark',
    'meter',
    'noscript',
    'output',
    'progress',
    'q',
    'ruby',
    's',
    'samp',
    'script',
    'select',
    'small',
    'span',
    'strong',
    'sub',
    'sup',
    'template',
    'textarea',
    'time',
    'u',
    'var',
    'wbr'
]);
const meta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$element$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertElement"])('meta');
function phrasing(value) {
    return Boolean(value.type === 'text' || basic(value) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$embedded$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$embedded$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["embedded"])(value) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$is$2d$body$2d$ok$2d$link$40$3$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$is$2d$body$2d$ok$2d$link$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBodyOkLink"])(value) || meta(value) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$has$2d$property$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(value, 'itemProp'));
}
}),
"[project]/node_modules/.pnpm/html-whitespace-sensitive-tag-names@3.0.1/node_modules/html-whitespace-sensitive-tag-names/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * List of HTML tag names that are whitespace sensitive.
 */ __turbopack_context__.s({
    "whitespaceSensitiveTagNames": ()=>whitespaceSensitiveTagNames
});
const whitespaceSensitiveTagNames = [
    'pre',
    'script',
    'style',
    'textarea'
];
}),
"[project]/node_modules/.pnpm/hast-util-format@1.1.0/node_modules/hast-util-format/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @import {Nodes, RootContent, Root} from 'hast'
 * @import {BuildVisitor} from 'unist-util-visit-parents'
 * @import {Options, State} from './types.js'
 */ __turbopack_context__.s({
    "format": ()=>format
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$embedded$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$embedded$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-embedded@3.0.0/node_modules/hast-util-embedded/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-minify-whitespace@1.0.1/node_modules/hast-util-minify-whitespace/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$phrasing$40$3$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$phrasing$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-phrasing@3.0.1/node_modules/hast-util-phrasing/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$html$2d$whitespace$2d$sensitive$2d$tag$2d$names$40$3$2e$0$2e$1$2f$node_modules$2f$html$2d$whitespace$2d$sensitive$2d$tag$2d$names$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/html-whitespace-sensitive-tag-names@3.0.1/node_modules/html-whitespace-sensitive-tag-names/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js [app-client] (ecmascript)");
;
;
;
;
;
;
/** @type {Options} */ const emptyOptions = {};
function format(tree, options) {
    const settings = options || emptyOptions;
    /** @type {State} */ const state = {
        blanks: settings.blanks || [],
        head: false,
        indentInitial: settings.indentInitial !== false,
        indent: typeof settings.indent === 'number' ? ' '.repeat(settings.indent) : typeof settings.indent === 'string' ? settings.indent : '  '
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$minify$2d$whitespace$40$1$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$minify$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["minifyWhitespace"])(tree, {
        newlines: true
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visitParents"])(tree, visitor);
    /**
   * @type {BuildVisitor<Root>}
   */ function visitor(node, parents) {
        if (!('children' in node)) {
            return;
        }
        if (node.type === 'element' && node.tagName === 'head') {
            state.head = true;
        }
        if (state.head && node.type === 'element' && node.tagName === 'body') {
            state.head = false;
        }
        if (node.type === 'element' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$html$2d$whitespace$2d$sensitive$2d$tag$2d$names$40$3$2e$0$2e$1$2f$node_modules$2f$html$2d$whitespace$2d$sensitive$2d$tag$2d$names$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespaceSensitiveTagNames"].includes(node.tagName)) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SKIP"];
        }
        // Don’t indent content of whitespace-sensitive nodes / inlines.
        if (node.children.length === 0 || !padding(state, node)) {
            return;
        }
        let level = parents.length;
        if (!state.indentInitial) {
            level--;
        }
        let eol = false;
        // Indent newlines in `text`.
        for (const child of node.children){
            if (child.type === 'comment' || child.type === 'text') {
                if (child.value.includes('\n')) {
                    eol = true;
                }
                child.value = child.value.replace(/ *\n/g, '$&' + state.indent.repeat(level));
            }
        }
        /** @type {Array<RootContent>} */ const result = [];
        /** @type {RootContent | undefined} */ let previous;
        for (const child of node.children){
            if (padding(state, child) || eol && !previous) {
                addBreak(result, level, child);
                eol = true;
            }
            previous = child;
            result.push(child);
        }
        if (previous && (eol || padding(state, previous))) {
            // Ignore trailing whitespace (if that already existed), as we’ll add
            // properly indented whitespace.
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])(previous)) {
                result.pop();
                previous = result[result.length - 1];
            }
            addBreak(result, level - 1);
        }
        node.children = result;
    }
    /**
   * @param {Array<RootContent>} list
   *   Nodes.
   * @param {number} level
   *   Indentation level.
   * @param {RootContent | undefined} [next]
   *   Next node.
   * @returns {undefined}
   *   Nothing.
   */ function addBreak(list, level, next) {
        const tail = list[list.length - 1];
        const previous = tail && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])(tail) ? list[list.length - 2] : tail;
        const replace = (blank(state, previous) && blank(state, next) ? '\n\n' : '\n') + state.indent.repeat(Math.max(level, 0));
        if (tail && tail.type === 'text') {
            tail.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])(tail) ? replace : tail.value + replace;
        } else {
            list.push({
                type: 'text',
                value: replace
            });
        }
    }
}
/**
 * @param {State} state
 *   Info passed around.
 * @param {Nodes | undefined} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is a blank.
 */ function blank(state, node) {
    return Boolean(node && node.type === 'element' && state.blanks.length > 0 && state.blanks.includes(node.tagName));
}
/**
 * @param {State} state
 *   Info passed around.
 * @param {Nodes} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` should be padded.
 */ function padding(state, node) {
    return node.type === 'root' || (node.type === 'element' ? state.head || node.tagName === 'script' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$embedded$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$embedded$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["embedded"])(node) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$phrasing$40$3$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$phrasing$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["phrasing"])(node) : false);
}
}),
"[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

/**
 * @import {Options} from 'hast-util-format'
 * @import {Root} from 'hast'
 */ __turbopack_context__.s({
    "default": ()=>rehypeFormat
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$format$40$1$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$format$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/hast-util-format@1.1.0/node_modules/hast-util-format/lib/index.js [app-client] (ecmascript)");
;
function rehypeFormat(options) {
    /**
   * Transform.
   *
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$format$40$1$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$format$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["format"])(tree, options);
    };
}
}),
"[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <locals>");
}),
"[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$rehype$2d$format$40$5$2e$0$2e$1$2f$node_modules$2f$rehype$2d$format$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/rehype-format@5.0.1/node_modules/rehype-format/index.js [app-client] (ecmascript) <exports>");
}),
}]);

//# sourceMappingURL=node_modules__pnpm_2434f244._.js.map