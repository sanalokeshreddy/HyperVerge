{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/QuizEditor.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport \"@blocknote/core/fonts/inter.css\";\r\nimport \"@blocknote/mantine/style.css\";\r\nimport { useState, useEffect, useRef, useCallback, useMemo, forwardRef, useImperativeHandle } from \"react\";\r\nimport { ChevronLeft, ChevronRight, Plus, FileText, Trash2, FileCode, AudioLines, Check, HelpCircle, X, ChevronDown, Pen, ClipboardCheck, Search, BookOpen, Code, Sparkles, Tag } from \"lucide-react\";\r\n\r\n// Add custom styles for dark mode\r\nimport \"./editor-styles.css\";\r\n\r\n// Import the BlockNoteEditor component\r\nimport BlockNoteEditor from \"./BlockNoteEditor\";\r\n// Import the LearnerQuizView component\r\nimport LearnerQuizView from \"./LearnerQuizView\";\r\nimport ConfirmationDialog from \"./ConfirmationDialog\";\r\n// Import the new Dropdown component\r\nimport Dropdown, { DropdownOption } from \"./Dropdown\";\r\n// Import the ScorecardPickerDialog component\r\nimport ScorecardPickerDialog, { CriterionData, ScorecardTemplate } from \"./ScorecardPickerDialog\";\r\n// Import the new Scorecard component\r\nimport Scorecard, { ScorecardHandle } from \"./Scorecard\";\r\n// Import dropdown options\r\nimport { questionTypeOptions, answerTypeOptions, codingLanguageOptions, questionPurposeOptions } from \"./dropdownOptions\";\r\n// Import quiz types\r\nimport { QuizEditorHandle, QuizQuestionConfig, QuizQuestion, QuizEditorProps, APIQuestionResponse, ScorecardCriterion } from \"../types\";\r\n// Add import for LearningMaterialLinker\r\nimport LearningMaterialLinker from \"./LearningMaterialLinker\";\r\n// Import Toast component\r\nimport Toast from \"./Toast\";\r\n// Import Tooltip component\r\nimport Tooltip from \"./Tooltip\";\r\n// Import the PublishConfirmationDialog component\r\nimport PublishConfirmationDialog from './PublishConfirmationDialog';\r\nimport { useEditorContentOrSelectionChange } from \"@blocknote/react\";\r\n\r\n// Default configuration for new questions\r\nconst defaultQuestionConfig: QuizQuestionConfig = {\r\n    inputType: 'text',\r\n    responseType: 'chat',\r\n    questionType: 'objective',\r\n    knowledgeBaseBlocks: [],\r\n    linkedMaterialIds: [],\r\n    title: ''\r\n};\r\n\r\n// Add these new interfaces after your existing interfaces\r\ninterface LearningMaterial {\r\n    id: number;\r\n    title: string;\r\n    type: string;\r\n    status: string;\r\n}\r\n\r\n// Helper function to extract text from all blocks in a BlockNote document\r\nexport const extractTextFromBlocks = (blocks: any[]): string => {\r\n    if (!blocks || blocks.length === 0) return \"\";\r\n\r\n    return blocks.map(block => {\r\n        // Handle different block types\r\n        if (block.type === \"paragraph\") {\r\n            // For paragraph blocks, extract text content\r\n            return block.content ? block.content.map((item: any) =>\r\n                typeof item === 'string' ? item : (item.text || \"\")\r\n            ).join(\"\") : \"\";\r\n        } else if (block.type === \"heading\") {\r\n            // For heading blocks, extract text content\r\n            return block.content ? block.content.map((item: any) =>\r\n                typeof item === 'string' ? item : (item.text || \"\")\r\n            ).join(\"\") : \"\";\r\n        } else if (block.type === \"bulletListItem\" || block.type === \"numberedListItem\" || block.type === \"checkListItem\") {\r\n            // For list items, extract text content\r\n            return block.content ? block.content.map((item: any) =>\r\n                typeof item === 'string' ? item : (item.text || \"\")\r\n            ).join(\"\") : \"\";\r\n        } else if (block.type === \"codeBlock\") {\r\n            // For code blocks, extract text content from content array\r\n            return block.content ? block.content.map((item: any) =>\r\n                typeof item === 'string' ? item : (item.text || \"\")\r\n            ).join(\"\") : \"\";\r\n        } else if (block.text) {\r\n            // Fallback for blocks with direct text property\r\n            return block.text;\r\n        }\r\n        return \"\";\r\n    }).join(\"\\n\").trim();\r\n};\r\n\r\n/**\r\n * Extracts and formats knowledge base content for API calls.\r\n * Validates that blocks contain actual content, not just empty structures.\r\n * \r\n * @param {QuizQuestionConfig} config - The question configuration containing knowledge base data\r\n * @returns {Object|null} - Formatted knowledge base data for API or null if no valid content\r\n */\r\nexport const getKnowledgeBaseContent = (config: QuizQuestionConfig) => {\r\n    // Check for knowledgeBaseBlocks\r\n    const knowledgeBaseBlocks = config.knowledgeBaseBlocks || [];\r\n    const linkedMaterialIds = config.linkedMaterialIds || [];\r\n\r\n    // Extract text from blocks to check if they contain actual content\r\n    const hasNonEmptyBlocks = knowledgeBaseBlocks.length > 0 &&\r\n        extractTextFromBlocks(knowledgeBaseBlocks).trim().length > 0;\r\n\r\n    // Check if there are any linked materials\r\n    const hasLinkedMaterials = linkedMaterialIds.length > 0;\r\n\r\n    // If we have either valid blocks or linked materials, return the knowledge base data\r\n    if (hasNonEmptyBlocks || hasLinkedMaterials) {\r\n        return {\r\n            blocks: hasNonEmptyBlocks ? knowledgeBaseBlocks : [],\r\n            linkedMaterialIds: hasLinkedMaterials ? linkedMaterialIds : []\r\n        };\r\n    }\r\n\r\n    // If no valid knowledge base content, return null\r\n    return null;\r\n};\r\n\r\nconst QuizEditor = forwardRef<QuizEditorHandle, QuizEditorProps>(({\r\n    initialQuestions = [], // Not used anymore - kept for backward compatibility\r\n    onChange,\r\n    isDarkMode = true,\r\n    className = \"\",\r\n    isPreviewMode = false,\r\n    readOnly = false,\r\n    taskId,\r\n    status = 'draft',\r\n    onPublishSuccess,\r\n    showPublishConfirmation = false,\r\n    onPublishCancel,\r\n    isEditMode = false,\r\n    onSaveSuccess,\r\n    taskType = 'quiz',\r\n    currentQuestionId,\r\n    onQuestionChange,\r\n    onSubmitAnswer,\r\n    userId,\r\n    schoolId, // Add schoolId prop to access school scorecards\r\n    onValidationError,\r\n    courseId,\r\n    scheduledPublishAt = null,\r\n    onQuestionChangeWithUnsavedScorecardChanges,\r\n}, ref) => {\r\n    // For published quizzes: data is always fetched from the API\r\n    // For draft quizzes: always start with empty questions\r\n    // initialQuestions prop is no longer used\r\n\r\n    // Initialize questions state - always start with empty array\r\n    const [questions, setQuestions] = useState<QuizQuestion[]>([]);\r\n    // Store the original data for cancel functionality\r\n    const originalQuestionsRef = useRef<QuizQuestion[]>([]);\r\n    // Add a ref to store the original title\r\n    const originalTitleRef = useRef<string>(\"\");\r\n\r\n    // Add ref to store pending action when unsaved scorecard changes are detected\r\n    const pendingScorecardActionRef = useRef<(() => void) | null>(null);\r\n\r\n    // Add loading state for fetching questions\r\n    const [isLoadingQuestions, setIsLoadingQuestions] = useState(true);\r\n    // Track if data has been fetched to prevent infinite loops\r\n    const [hasFetchedData, setHasFetchedData] = useState(false);\r\n\r\n    // Add state for school scorecards\r\n    const [schoolScorecards, setSchoolScorecards] = useState<ScorecardTemplate[]>([]);\r\n    // Add loading state for fetching scorecards\r\n    const [isLoadingScorecards, setIsLoadingScorecards] = useState(false);\r\n\r\n    // Add state to track original scorecard data for change detection\r\n    const [originalScorecardData, setOriginalScorecardData] = useState<Map<string, { name: string, criteria: CriterionData[] }>>(new Map());\r\n    // Add ref to track if we're currently saving a scorecard\r\n    const isSavingScorecardRef = useRef(false);\r\n\r\n    // Add toast state\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [toastTitle, setToastTitle] = useState(\"\");\r\n    const [toastMessage, setToastMessage] = useState(\"\");\r\n    const [toastEmoji, setToastEmoji] = useState(\"🚀\");\r\n\r\n    // Add useEffect to automatically hide toast after 5 seconds\r\n    useEffect(() => {\r\n        if (showToast) {\r\n            const timer = setTimeout(() => {\r\n                setShowToast(false);\r\n            }, 5000);\r\n\r\n            // Cleanup the timer when component unmounts or showToast changes\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [showToast]);\r\n\r\n    // Make sure we reset questions when component mounts for draft quizzes\r\n    useEffect(() => {\r\n        if (status === 'draft') {\r\n            setQuestions([]);\r\n        }\r\n    }, [status]);\r\n\r\n    // Fetch school scorecards when component mounts for draft quizzes\r\n    useEffect(() => {\r\n        const fetchSchoolScorecards = async () => {\r\n            if (schoolId) {\r\n                setIsLoadingScorecards(true);\r\n                try {\r\n                    const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/scorecards/?org_id=${schoolId}`);\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to fetch school scorecards');\r\n                    }\r\n\r\n                    const data = await response.json();\r\n\r\n                    // Transform the API response to ScorecardTemplate format\r\n                    if (data && Array.isArray(data)) {\r\n                        const transformedScorecards = data.map(scorecard => ({\r\n                            id: scorecard.id,\r\n                            name: scorecard.title,\r\n                            icon: <FileText size={16} className=\"text-white\" />,\r\n                            is_template: false, // Not a hard-coded template\r\n                            new: scorecard.status === 'draft', // Not newly created in this session\r\n                            criteria: scorecard.criteria.map((criterion: ScorecardCriterion) => ({\r\n                                name: criterion.name,\r\n                                description: criterion.description,\r\n                                maxScore: criterion.max_score,\r\n                                minScore: criterion.min_score,\r\n                                passScore: criterion.pass_score\r\n                            })) || []\r\n                        }));\r\n\r\n                        setSchoolScorecards(transformedScorecards);\r\n\r\n                        // Now that we have the scorecards, fetch the questions\r\n                        await fetchQuestions(transformedScorecards);\r\n                    } else {\r\n                        // If no scorecard data, fetch questions with empty scorecards\r\n                        await fetchQuestions();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error fetching school scorecards:', error);\r\n                } finally {\r\n                    setIsLoadingScorecards(false);\r\n                }\r\n            } else {\r\n                // If no schoolId, just fetch questions with empty scorecards\r\n                await fetchQuestions();\r\n            }\r\n        };\r\n\r\n        // Define the fetchQuestions function that takes scorecards as a parameter\r\n        const fetchQuestions = async (availableScorecards: ScorecardTemplate[] = []) => {\r\n            // Only fetch if we have a taskId, the status is published, and we haven't already fetched\r\n            if (taskId && !hasFetchedData) {\r\n                try {\r\n                    const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/${taskId}`);\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to fetch task details');\r\n                    }\r\n\r\n                    const data = await response.json();\r\n\r\n                    // Update the questions with the fetched data\r\n                    if (data && data.questions && data.questions.length > 0) {\r\n                        const updatedQuestions = data.questions.map((question: APIQuestionResponse) => {\r\n                            // Map API question type to local questionType\r\n                            const questionType = question.type;\r\n\r\n                            // Use answer blocks directly from the API if available,\r\n                            // otherwise create a default paragraph block\r\n                            const correctAnswer = (question.answer ? question.answer : [\r\n                                {\r\n                                    type: \"paragraph\",\r\n                                    content: [\r\n                                        {\r\n                                            type: \"text\",\r\n                                            text: question.answer || \"\",\r\n                                            styles: {}\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]);\r\n\r\n                            // Handle scorecard data if scorecard_id is present\r\n                            let scorecardData = undefined;\r\n                            if (question.scorecard_id && availableScorecards.length > 0) {\r\n                                // Find matching scorecard from school scorecards\r\n                                const matchingScorecard = availableScorecards.find(sc => parseInt(sc.id) === question.scorecard_id);\r\n\r\n                                if (matchingScorecard) {\r\n                                    scorecardData = {\r\n                                        id: matchingScorecard.id,\r\n                                        name: matchingScorecard.name,\r\n                                        new: matchingScorecard.new,\r\n                                        criteria: matchingScorecard.criteria.map(criterion => ({\r\n                                            ...criterion,\r\n                                            minScore: criterion.minScore\r\n                                        })),\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            // Extract knowledgeBaseBlocks and linkedMaterialIds from context if it exists\r\n                            let knowledgeBaseBlocks: any[] = [];\r\n                            let linkedMaterialIds: string[] = [];\r\n\r\n                            if (question.context) {\r\n                                // Extract blocks for knowledge base if they exist\r\n                                if (question.context.blocks && Array.isArray(question.context.blocks)) {\r\n                                    knowledgeBaseBlocks = question.context.blocks;\r\n                                }\r\n\r\n                                // Extract linkedMaterialIds if they exist\r\n                                if (question.context.linkedMaterialIds && Array.isArray(question.context.linkedMaterialIds)) {\r\n                                    linkedMaterialIds = question.context.linkedMaterialIds;\r\n                                }\r\n                            }\r\n\r\n                            return {\r\n                                id: String(question.id),\r\n                                content: question.blocks || [],\r\n                                config: {\r\n                                    inputType: question.input_type || 'text' as 'text' | 'code' | 'audio',\r\n                                    responseType: question.response_type,\r\n                                    correctAnswer: correctAnswer,\r\n                                    questionType: questionType as 'objective' | 'subjective',\r\n                                    scorecardData: scorecardData,\r\n                                    knowledgeBaseBlocks: knowledgeBaseBlocks,\r\n                                    linkedMaterialIds: linkedMaterialIds,\r\n                                    codingLanguages: question.coding_languages || [],\r\n                                    title: question.title\r\n                                }\r\n                            };\r\n                        });\r\n\r\n                        // Update questions state\r\n                        setQuestions(updatedQuestions);\r\n\r\n                        // Store original scorecard data for change detection\r\n                        const originalData = new Map<string, { name: string, criteria: CriterionData[] }>();\r\n                        updatedQuestions.forEach((question: QuizQuestion) => {\r\n                            if (question.config.scorecardData) {\r\n                                // Store original data for all scorecards fetched from API (including draft ones)\r\n                                const scorecardId = question.config.scorecardData.id;\r\n                                if (!originalData.has(scorecardId)) {\r\n                                    originalData.set(scorecardId, {\r\n                                        name: question.config.scorecardData.name,\r\n                                        criteria: JSON.parse(JSON.stringify(question.config.scorecardData.criteria))\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                        setOriginalScorecardData(originalData);\r\n\r\n                        // Notify parent component about the update, but only once and after our state is updated\r\n                        if (onChange) {\r\n                            // Use setTimeout to break the current render cycle\r\n                            setTimeout(() => {\r\n                                onChange(updatedQuestions);\r\n                            }, 0);\r\n                        }\r\n\r\n                        // Store the original data for cancel operation\r\n                        originalQuestionsRef.current = JSON.parse(JSON.stringify(updatedQuestions));\r\n                    }\r\n\r\n                    // Mark that we've fetched the data - do this regardless of whether questions were found\r\n                    setHasFetchedData(true);\r\n                } catch (error) {\r\n                    console.error('Error fetching quiz questions:', error);\r\n                    // Even on error, mark as fetched to prevent infinite retry loops\r\n                    setHasFetchedData(true);\r\n                } finally {\r\n                    setIsLoadingQuestions(false);\r\n                }\r\n            } else {\r\n                setIsLoadingQuestions(false);\r\n            }\r\n        };\r\n\r\n        fetchSchoolScorecards();\r\n    }, [taskId, status]);\r\n\r\n    // Reset hasFetchedData when taskId changes\r\n    useEffect(() => {\r\n        setHasFetchedData(false);\r\n    }, [taskId]);\r\n\r\n    // Cleanup effect - clear questions when component unmounts or taskId changes\r\n    useEffect(() => {\r\n        // Return cleanup function\r\n        return () => {\r\n            // Clear questions state and refs when component unmounts\r\n            setQuestions([]);\r\n            originalQuestionsRef.current = [];\r\n        };\r\n    }, [taskId]);\r\n\r\n    // Store the original title when it changes in the dialog (for cancel operation)\r\n    useEffect(() => {\r\n        const dialogTitleElement = document.querySelector('.dialog-content-editor')?.parentElement?.querySelector('h2');\r\n        if (dialogTitleElement) {\r\n            originalTitleRef.current = dialogTitleElement.textContent || \"\";\r\n        }\r\n    }, []);\r\n\r\n    // Current question index\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n    // Internal state to track the current question ID for preview mode\r\n    const [activeQuestionId, setActiveQuestionId] = useState<string | undefined>(() => {\r\n        // Initialize with currentQuestionId if provided, otherwise use first question id if questions exist\r\n        if (currentQuestionId) {\r\n            return currentQuestionId;\r\n        }\r\n        return questions.length > 0 ? questions[0]?.id : undefined;\r\n    });\r\n\r\n    // Update current question index when currentQuestionId changes\r\n    useEffect(() => {\r\n        if (currentQuestionId && questions.length > 0) {\r\n            const index = questions.findIndex(q => q.id === currentQuestionId);\r\n            if (index !== -1) {\r\n                setCurrentQuestionIndex(index);\r\n            }\r\n        }\r\n    }, [currentQuestionId, questions]);\r\n\r\n    // Update activeQuestionId when currentQuestionIndex changes in preview mode\r\n    useEffect(() => {\r\n        if (questions.length > 0 && currentQuestionIndex >= 0 && currentQuestionIndex < questions.length) {\r\n            const newActiveId = questions[currentQuestionIndex].id;\r\n            setActiveQuestionId(newActiveId);\r\n        }\r\n    }, [currentQuestionIndex, questions]);\r\n\r\n    // State to track if a new question was just added (for animation)\r\n    const [newQuestionAdded, setNewQuestionAdded] = useState(false);\r\n\r\n    // State for delete confirmation\r\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\r\n    // Add state for scorecard delete confirmation\r\n    const [showScorecardDeleteConfirm, setShowScorecardDeleteConfirm] = useState(false);\r\n\r\n    // Add state to track if scorecard is used by multiple questions\r\n    const [scorecardUsedByMultiple, setScorecardUsedByMultiple] = useState(false);\r\n\r\n    // Add state for scorecard save confirmation\r\n    const [showScorecardSaveConfirm, setShowScorecardSaveConfirm] = useState(false);\r\n\r\n    // State for tracking publishing status\r\n    const [isPublishing, setIsPublishing] = useState(false);\r\n\r\n    // State for tracking publishing errors\r\n    const [publishError, setPublishError] = useState<string | null>(null);\r\n\r\n    // Reference to the current BlockNote editor instance\r\n    const editorRef = useRef<any>(null);\r\n\r\n    // Use ref to track the last edit to prevent unnecessary updates\r\n    const lastContentUpdateRef = useRef<string>(\"\");\r\n\r\n    // Reference to the correct answer editor\r\n    const correctAnswerEditorRef = useRef<any>(null);\r\n\r\n    // Reference to the knowledge base editor\r\n    const knowledgeBaseEditorRef = useRef<any>(null);\r\n\r\n    // State for scorecard templates dialog\r\n    const [showScorecardDialog, setShowScorecardDialog] = useState(false);\r\n    const [scorecardDialogPosition, setScorecardDialogPosition] = useState<{ top: number, left: number } | null>(null);\r\n    const scorecardButtonRef = useRef<HTMLButtonElement>(null);\r\n\r\n    // We don't need the hasScorecard state anymore since we're using currentQuestionConfig.scorecardData\r\n    // If needed for the scorecard title, we'll keep that state\r\n    const [scorecardTitle, setScorecardTitle] = useState<string>(\"Scorecard\");\r\n\r\n    // Reference to the scorecard component\r\n    const scorecardRef = useRef<ScorecardHandle>(null);\r\n\r\n    // State for tracking active tab (question or answer)\r\n    const [activeEditorTab, setActiveEditorTab] = useState<'question' | 'answer' | 'scorecard' | 'knowledge'>('question');\r\n\r\n    // State to track which field is being highlighted for validation errors\r\n    const [highlightedField, setHighlightedField] = useState<'question' | 'answer' | 'codingLanguage' | null>(null);\r\n\r\n    // State to track if the question count should be highlighted (after adding a new question)\r\n    const [questionCountHighlighted, setQuestionCountHighlighted] = useState(false);\r\n\r\n    // Add validation utility functions to reduce duplication\r\n    // These functions can validate both the current question and any question by index\r\n\r\n    /**\r\n     * Highlights a field (question or answer) to draw attention to a validation error\r\n     * @param field The field to highlight\r\n     */\r\n    const highlightField = useCallback((field: 'question' | 'answer' | 'codingLanguage') => {\r\n        // Set the highlighted field\r\n        setHighlightedField(field);\r\n\r\n        // Clear the highlight after 4 seconds\r\n        setTimeout(() => {\r\n            setHighlightedField(null);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    /**\r\n     * Validates if question content is non-empty\r\n     * @param content The content blocks to validate\r\n     * @returns True if content has non-empty text or contains media blocks, false otherwise\r\n     */\r\n    const validateQuestionContent = useCallback((content: any[]) => {\r\n        if (!content || content.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        // Check for text content\r\n        const textContent = extractTextFromBlocks(content);\r\n        if (textContent.trim().length > 0) {\r\n            return true;\r\n        }\r\n\r\n        // If no text content, check if there are any media blocks (image, audio, video)\r\n        const hasMediaBlocks = content.some(block =>\r\n            block.type === 'image' ||\r\n            block.type === 'audio' ||\r\n            block.type === 'video'\r\n        );\r\n\r\n        return hasMediaBlocks;\r\n    }, []);\r\n\r\n    /**\r\n     * Validates if a question has a non-empty correct answer\r\n     * @param questionConfig The question configuration containing the answer\r\n     * @returns True if correct answer exists and is non-empty, false otherwise\r\n     */\r\n    const validateCorrectAnswer = useCallback((questionConfig: QuizQuestionConfig) => {\r\n        if (questionConfig.correctAnswer && questionConfig.correctAnswer.length > 0) {\r\n            const textContent = extractTextFromBlocks(questionConfig.correctAnswer);\r\n            return textContent.trim().length > 0;\r\n        }\r\n        return false;\r\n    }, []);\r\n\r\n    /**\r\n     * Validates if a question has a valid scorecard attached\r\n     * @param questionConfig The question configuration containing the scorecard data\r\n     * @returns True if a valid scorecard with criteria exists, false otherwise\r\n     */\r\n    const validateScorecard = useCallback((questionConfig: QuizQuestionConfig) => {\r\n        return !!(questionConfig.scorecardData &&\r\n            questionConfig.scorecardData.criteria &&\r\n            questionConfig.scorecardData.criteria.length > 0);\r\n    }, []);\r\n\r\n    /**\r\n     * Validates scorecard criteria for empty names and descriptions\r\n     * @param scorecard The scorecard data to validate\r\n     * @param callbacks Object containing callback functions for validation actions\r\n     * @returns True if all criteria are valid, false if any validation fails\r\n     */\r\n    const validateScorecardCriteria = (\r\n        scorecard: ScorecardTemplate | undefined,\r\n        callbacks: {\r\n            setActiveTab: (tab: 'question' | 'answer' | 'scorecard' | 'knowledge') => void;\r\n            showErrorMessage?: (title: string, message: string, emoji?: string) => void;\r\n            questionIndex?: number; // Optional for showing question number in error message\r\n        }\r\n    ): boolean => {\r\n        // If no scorecard or not a user-created scorecard (new), return true (valid)\r\n        if (!scorecard) {\r\n            return true;\r\n        }\r\n\r\n        const { setActiveTab, showErrorMessage, questionIndex } = callbacks;\r\n\r\n        // Check each criterion for empty name or description\r\n        for (let i = 0; i < scorecard.criteria.length; i++) {\r\n            const criterion = scorecard.criteria[i];\r\n\r\n            // Check for empty name\r\n            if (!criterion.name || criterion.name.trim() === '') {\r\n                // Switch to scorecard tab first\r\n                setActiveTab('scorecard');\r\n\r\n                // Use a self-invoking function for delayed highlight and error message\r\n                (function (index) {\r\n                    setTimeout(() => {\r\n                        // Create event to highlight the problematic row\r\n                        const event = new CustomEvent('highlight-criterion', {\r\n                            detail: {\r\n                                index,\r\n                                field: 'name'\r\n                            }\r\n                        });\r\n                        document.dispatchEvent(event);\r\n\r\n                        // Show error message if callback is provided\r\n                        if (showErrorMessage) {\r\n                            const suffix = questionIndex !== undefined ? ` for question ${questionIndex + 1}` : '';\r\n                            showErrorMessage(\r\n                                \"Empty Scorecard Parameter\",\r\n                                `Please provide a name for parameter ${index + 1} in the scorecard${suffix}`,\r\n                                \"🚫\"\r\n                            );\r\n                        }\r\n                    }, 250);\r\n                })(i);\r\n\r\n                return false;\r\n            }\r\n\r\n            // Check for empty description\r\n            if (!criterion.description || criterion.description.trim() === '') {\r\n                // Switch to scorecard tab first\r\n                setActiveTab('scorecard');\r\n\r\n                // Use a self-invoking function for delayed highlight and error message\r\n                (function (index, name) {\r\n                    setTimeout(() => {\r\n                        // Create event to highlight the problematic row\r\n                        const event = new CustomEvent('highlight-criterion', {\r\n                            detail: {\r\n                                index,\r\n                                field: 'description'\r\n                            }\r\n                        });\r\n                        document.dispatchEvent(event);\r\n\r\n                        // Show error message if callback is provided\r\n                        if (showErrorMessage) {\r\n                            const parameterName = name || `parameter ${index + 1}`;\r\n                            const suffix = questionIndex !== undefined ? ` for question ${questionIndex + 1}` : '';\r\n                            showErrorMessage(\r\n                                \"Empty Scorecard Parameter\",\r\n                                `Please provide a description for ${parameterName} in the scorecard${suffix}`,\r\n                                \"🚫\"\r\n                            );\r\n                        }\r\n                    }, 250);\r\n                })(i, criterion.name);\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // If all criteria passed validation\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Validates all questions in the quiz and navigates to the first invalid question\r\n     * @returns True if all questions are valid, false otherwise\r\n     */\r\n    const validateAllQuestions = useCallback(() => {\r\n        // Check if there are any questions\r\n        if (questions.length === 0) {\r\n            if (onValidationError) {\r\n                onValidationError(\r\n                    \"No Questions\",\r\n                    \"Please add at least one question before publishing\"\r\n                );\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Validate all questions\r\n        for (let i = 0; i < questions.length; i++) {\r\n            const question = questions[i];\r\n\r\n            // Check if question has content\r\n            if (!validateQuestionContent(question.content)) {\r\n                // Navigate to the question with missing content\r\n                setCurrentQuestionIndex(i);\r\n                setActiveEditorTab('question');\r\n\r\n                // Highlight the question field\r\n                highlightField('question');\r\n\r\n                // Notify parent about validation error\r\n                if (onValidationError) {\r\n                    onValidationError(\r\n                        \"Empty Question\",\r\n                        `Question ${i + 1} is empty. Please add details to the question`\r\n                    );\r\n                }\r\n                return false;\r\n            }\r\n\r\n\r\n            // For coding questions, check if coding languages are set\r\n            if (question.config.inputType === 'code') {\r\n                if (!question.config.codingLanguages || !Array.isArray(question.config.codingLanguages) || question.config.codingLanguages.length === 0) {\r\n                    // Navigate to the question with missing coding languages\r\n                    setCurrentQuestionIndex(i);\r\n\r\n                    // Highlight the coding language field\r\n                    highlightField('codingLanguage');\r\n\r\n                    // Notify parent about validation error\r\n                    if (onValidationError) {\r\n                        onValidationError(\r\n                            \"Missing Coding Languages\",\r\n                            `Question ${i + 1} does not have any programming language selected`\r\n                        );\r\n                    }\r\n                    return false;\r\n                } else {\r\n                    console.log(\"question.config.codingLanguages is not empty\");\r\n                }\r\n            }\r\n\r\n            // For objective questions, check if correct answer is set\r\n            if (question.config.questionType === 'objective') {\r\n                if (!validateCorrectAnswer(question.config)) {\r\n                    // Navigate to the question with missing answer\r\n                    setCurrentQuestionIndex(i);\r\n                    setActiveEditorTab('answer');\r\n\r\n                    // Highlight the answer field\r\n                    highlightField('answer');\r\n\r\n                    // Notify parent about validation error\r\n                    if (onValidationError) {\r\n                        onValidationError(\r\n                            \"Empty Correct Answer\",\r\n                            `Question ${i + 1} has no correct answer. Please add a correct answer`\r\n                        );\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // For subjective questions, check if scorecard is set\r\n            if (question.config.questionType === 'subjective') {\r\n                if (!validateScorecard(question.config)) {\r\n                    // Navigate to the question with missing scorecard\r\n                    setCurrentQuestionIndex(i);\r\n                    setActiveEditorTab('scorecard');\r\n\r\n                    // Notify parent about validation error\r\n                    if (onValidationError) {\r\n                        onValidationError(\r\n                            \"Missing Scorecard\",\r\n                            `Question ${i + 1} has no scorecard. Please add a scorecard for evaluating the answer`\r\n                        );\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                // Check for empty criterion names or descriptions in the scorecard\r\n                if (question.config.scorecardData) {\r\n                    // Navigate to the question with the problematic scorecard first\r\n                    setCurrentQuestionIndex(i);\r\n\r\n                    // Use the shared validation function for scorecards\r\n                    const isValid = validateScorecardCriteria(\r\n                        question.config.scorecardData,\r\n                        {\r\n                            setActiveTab: setActiveEditorTab,\r\n                            showErrorMessage: onValidationError,\r\n                            questionIndex: i\r\n                        }\r\n                    );\r\n\r\n                    if (!isValid) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }, [questions, onValidationError, validateQuestionContent, validateCorrectAnswer, validateScorecard, setCurrentQuestionIndex, setActiveEditorTab, validateScorecardCriteria, highlightField]);\r\n\r\n    // Function to handle opening the scorecard templates dialog\r\n    const handleOpenScorecardDialog = () => {\r\n        const buttonElement = scorecardButtonRef.current;\r\n        if (buttonElement) {\r\n            const rect = buttonElement.getBoundingClientRect();\r\n\r\n            // Approximate height of the dialog (templates + header)\r\n            const estimatedDialogHeight = 325;\r\n\r\n            // Position the bottom of the dialog above the button with some spacing\r\n            setScorecardDialogPosition({\r\n                top: Math.max(10, schoolScorecards.length > 0 ? rect.top - estimatedDialogHeight - 80 : rect.top - estimatedDialogHeight - 10), // Ensure at least 10px from top of viewport\r\n                left: Math.max(10, rect.left - 120) // Center horizontally but ensure it's not off-screen\r\n            });\r\n            setShowScorecardDialog(true);\r\n        }\r\n    };\r\n\r\n    // Add a reusable function for creating scorecards\r\n    const createScorecard = async (title: string, criteria: CriterionData[]): Promise<any> => {\r\n        if (!schoolId) {\r\n            throw new Error('School ID is required to create scorecard');\r\n        }\r\n\r\n        const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/scorecards/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                title: title,\r\n                org_id: schoolId,\r\n                criteria: criteria.map(criterion => ({\r\n                    name: criterion.name,\r\n                    description: criterion.description,\r\n                    min_score: criterion.minScore,\r\n                    max_score: criterion.maxScore,\r\n                    pass_score: criterion.passScore\r\n                }))\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to create scorecard: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    };\r\n\r\n    // Function to handle creating a new scorecard\r\n    const handleCreateNewScorecard = async () => {\r\n        setShowScorecardDialog(false);\r\n\r\n        const newScorecardTitle = \"New Scorecard\";\r\n\r\n        // Set the scorecard title\r\n        setScorecardTitle(newScorecardTitle);\r\n\r\n        try {\r\n            // Use the reusable function to create scorecard\r\n            const createdScorecard = await createScorecard(newScorecardTitle, [\r\n                { name: '', description: '', minScore: 1, maxScore: 5, passScore: 3 }\r\n            ]);\r\n\r\n            // Create scorecard data using the backend ID\r\n            const newScorecardData: ScorecardTemplate = {\r\n                id: createdScorecard.id, // Use the ID returned from backend\r\n                name: createdScorecard.title,\r\n                new: true, // Mark as newly created in this session\r\n                is_template: false, // Not a template\r\n                criteria: [\r\n                    { name: '', description: '', minScore: 1, maxScore: 5, passScore: 3 }\r\n                ]\r\n            };\r\n\r\n            // Add the new scorecard to the question's config\r\n            handleConfigChange({\r\n                scorecardData: newScorecardData\r\n            });\r\n\r\n            // Update school scorecards state with new scorecard\r\n            const updatedScorecards = [...schoolScorecards, newScorecardData];\r\n            setSchoolScorecards(updatedScorecards);\r\n\r\n            // Add the new scorecard to originalScorecardData as the baseline for change detection\r\n            const updatedOriginalData = new Map(originalScorecardData);\r\n            updatedOriginalData.set(newScorecardData.id, {\r\n                name: newScorecardData.name,\r\n                criteria: JSON.parse(JSON.stringify(newScorecardData.criteria))\r\n            });\r\n            setOriginalScorecardData(updatedOriginalData);\r\n\r\n            // Switch to the scorecard tab\r\n            setActiveEditorTab('scorecard');\r\n\r\n            // Focus on the scorecard title after a short delay to allow rendering\r\n            setTimeout(() => {\r\n                scorecardRef.current?.focusName();\r\n            }, 100);\r\n\r\n        } catch (error) {\r\n            console.error('Error creating scorecard:', error);\r\n\r\n            // Show error toast\r\n            setToastTitle(\"Creation Failed\");\r\n            setToastMessage(\"Failed to create scorecard. Please try again.\");\r\n            setToastEmoji(\"❌\");\r\n            setShowToast(true);\r\n        }\r\n    };\r\n\r\n    // Function to handle selecting a scorecard template\r\n    const handleSelectScorecardTemplate = async (template: ScorecardTemplate) => {\r\n        setShowScorecardDialog(false);\r\n\r\n        // Set the scorecard title\r\n        setScorecardTitle(template.name || \"Scorecard Template\");\r\n\r\n        let scorecard: ScorecardTemplate;\r\n\r\n        if (template.is_template) {\r\n            // Creating from a hardcoded template - use the reusable function\r\n            try {\r\n                const createdScorecard = await createScorecard(template.name, template.criteria);\r\n\r\n                // Use the backend ID for the new scorecard\r\n                scorecard = {\r\n                    id: createdScorecard.id, // Use the ID returned from backend\r\n                    name: createdScorecard.title,\r\n                    new: true,\r\n                    is_template: false,\r\n                    criteria: template.criteria,\r\n                };\r\n\r\n                // Update school scorecards state with new scorecard\r\n                const updatedScorecards = [...schoolScorecards, scorecard];\r\n                setSchoolScorecards(updatedScorecards);\r\n            } catch (error) {\r\n                console.error('Error creating scorecard from template:', error);\r\n\r\n                // Show error toast\r\n                setToastTitle(\"Creation Failed\");\r\n                setToastMessage(\"Failed to create scorecard from template. Please try again.\");\r\n                setToastEmoji(\"❌\");\r\n                setShowToast(true);\r\n                return;\r\n            }\r\n        } else {\r\n            // one of the user generated scorecards - could be both published scorecards or newly created scorecards in this session itself\r\n            scorecard = {\r\n                id: template.id,\r\n                name: template.name,\r\n                new: template.new,\r\n                is_template: false,\r\n                criteria: template.criteria,\r\n            };\r\n        }\r\n\r\n        // Add the new scorecard to originalScorecardData as the baseline for change detection\r\n        const updatedOriginalData = new Map(originalScorecardData);\r\n        updatedOriginalData.set(scorecard.id, {\r\n            name: scorecard.name,\r\n            criteria: JSON.parse(JSON.stringify(scorecard.criteria))\r\n        });\r\n        setOriginalScorecardData(updatedOriginalData);\r\n\r\n        // Add the scorecard data to the question's config\r\n        handleConfigChange({\r\n            scorecardData: scorecard\r\n        });\r\n\r\n        // Switch to the scorecard tab\r\n        setActiveEditorTab('scorecard');\r\n\r\n        // Focus on the scorecard title after a short delay to allow rendering\r\n        if (scorecard.new) {\r\n            setTimeout(() => {\r\n                scorecardRef.current?.focusName();\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    // Function to set the editor reference\r\n    const setEditorInstance = useCallback((editor: any) => {\r\n        editorRef.current = editor;\r\n    }, []);\r\n\r\n    // Memoize the current question content and config to prevent unnecessary re-renders\r\n    const currentQuestion = useMemo(() =>\r\n        questions[currentQuestionIndex] || { content: [], config: defaultQuestionConfig },\r\n        [questions, currentQuestionIndex]);\r\n\r\n    const currentQuestionContent = useMemo(() =>\r\n        currentQuestion.content || [],\r\n        [currentQuestion]);\r\n\r\n    const currentQuestionConfig = useMemo(() =>\r\n        currentQuestion.config || defaultQuestionConfig,\r\n        [currentQuestion]);\r\n\r\n    // Function to set the correct answer editor reference\r\n    const setCorrectAnswerEditorInstance = useCallback((editor: any) => {\r\n        correctAnswerEditorRef.current = editor;\r\n    }, []);\r\n\r\n    // Function to set the knowledge base editor reference\r\n    const setKnowledgeBaseEditorInstance = useCallback((editor: any) => {\r\n        knowledgeBaseEditorRef.current = editor;\r\n    }, []);\r\n\r\n    // Handle content change for the current question - use useCallback to memoize\r\n    const handleQuestionContentChange = useCallback((content: any[]) => {\r\n        if (questions.length === 0) return;\r\n\r\n        // Simply update the content without all the complexity\r\n        const updatedQuestions = [...questions];\r\n        updatedQuestions[currentQuestionIndex] = {\r\n            ...updatedQuestions[currentQuestionIndex],\r\n            content\r\n        };\r\n\r\n        // Update state\r\n        setQuestions(updatedQuestions);\r\n\r\n        // Call onChange callback if provided\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n    }, [questions, currentQuestionIndex, onChange]);\r\n\r\n    // Handle correct answer content change\r\n    const handleCorrectAnswerChange = useCallback((content: any[]) => {\r\n        if (questions.length === 0) return;\r\n\r\n        // Store blocks but don't extract text on every change\r\n        const updatedQuestions = [...questions];\r\n        updatedQuestions[currentQuestionIndex] = {\r\n            ...updatedQuestions[currentQuestionIndex],\r\n            config: {\r\n                ...updatedQuestions[currentQuestionIndex].config,\r\n                correctAnswer: content\r\n            }\r\n        };\r\n        setQuestions(updatedQuestions);\r\n\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n    }, [questions, currentQuestionIndex, onChange]);\r\n\r\n    // Handle configuration change for the current question\r\n    const handleConfigChange = useCallback((configUpdate: Partial<QuizQuestionConfig>, options?: { updateTemplate?: boolean, newQuestionType?: 'objective' | 'subjective', newInputType?: 'text' | 'code' | 'audio' }) => {\r\n        if (questions.length === 0) return;\r\n\r\n        const updatedQuestions = [...questions];\r\n        updatedQuestions[currentQuestionIndex] = {\r\n            ...updatedQuestions[currentQuestionIndex],\r\n            config: {\r\n                ...updatedQuestions[currentQuestionIndex].config,\r\n                ...configUpdate\r\n            }\r\n        };\r\n\r\n        // If updateTemplate flag is true and we have a newQuestionType, update the template content\r\n        if (options?.updateTemplate && options.newQuestionType && options.newInputType && status === 'draft') {\r\n            const currentContent = updatedQuestions[currentQuestionIndex].content || [];\r\n\r\n            // Check if any block has an ID (indicating user modification)\r\n            const hasUserModifiedContent = currentContent.some(block => 'id' in block);\r\n\r\n            if (!hasUserModifiedContent) {\r\n                // Generate new template blocks based on the new question type\r\n                const newTemplateContent = getQuestionTemplateBlocks(options.newQuestionType, options.newInputType);\r\n\r\n                // Update the content with the new template\r\n                updatedQuestions[currentQuestionIndex].content = newTemplateContent;\r\n            }\r\n        }\r\n\r\n        setQuestions(updatedQuestions);\r\n\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n    }, [questions, currentQuestionIndex, onChange, status]);\r\n\r\n    const removeScorecardFromSchoolScoreboards = useCallback(() => {\r\n        let scorecardForQuestion = questions[currentQuestionIndex].config.scorecardData\r\n\r\n        if (!scorecardForQuestion) {\r\n            return;\r\n        }\r\n\r\n        // Check if this scorecard is used by multiple questions\r\n        // const questionsUsingThisScorecard = questions.filter(q =>\r\n        //     q.config.scorecardData && q.config.scorecardData.id === scorecardForQuestion.id\r\n        // );\r\n        // const isUsedByMultiple = questionsUsingThisScorecard.length > 1;\r\n\r\n        let updatedQuestions;\r\n\r\n        // if (isUsedByMultiple) {\r\n        // Only remove from current question without affecting others\r\n        updatedQuestions = [...questions];\r\n        updatedQuestions[currentQuestionIndex] = {\r\n            ...updatedQuestions[currentQuestionIndex],\r\n            config: {\r\n                ...updatedQuestions[currentQuestionIndex].config,\r\n                scorecardData: undefined\r\n            }\r\n        };\r\n        setQuestions(updatedQuestions);\r\n        // }\r\n        // {\r\n        //     // Original behavior: remove from all questions and schoolScorecards if new\r\n        //     if (scorecardForQuestion && scorecardForQuestion.new) {\r\n        //         const updatedScorecards = schoolScorecards.filter(scorecard => scorecard.id !== scorecardForQuestion.id);\r\n        //         setSchoolScorecards(updatedScorecards);\r\n        //     }\r\n\r\n        //     updatedQuestions = [...questions];\r\n\r\n        //     for (let i = 0; i < updatedQuestions.length; i++) {\r\n        //         if (updatedQuestions[i].config.scorecardData && updatedQuestions[i].config.scorecardData?.id === scorecardForQuestion.id) {\r\n        //             updatedQuestions[i].config.scorecardData = undefined;\r\n        //         }\r\n        //     }\r\n\r\n        //     setQuestions(updatedQuestions);\r\n        // }\r\n\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n    }, [questions, currentQuestionIndex, schoolScorecards, onChange]);\r\n\r\n    // Function to get template blocks based on question type\r\n    const getQuestionTemplateBlocks = (questionType: 'objective' | 'subjective', inputType: 'text' | 'code' | 'audio') => {\r\n        // Common blocks that appear in all templates\r\n        const commonBlocks = [\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 2 },\r\n                content: [{ \"text\": \"Welcome to the Question Editor!\", \"type\": \"text\", styles: {} }],\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"This is where you will create your question. You can modify this template or remove it to start from scratch.\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Question Types\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"You can select from these question types:\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Objective\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": For questions with specific correct answers (multiple choice, true/false, etc.)\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Subjective\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": For questions that don't have a single correct answer.\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Coding\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": For questions that require learners to write code as their answer\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            }\r\n        ];\r\n\r\n        // Answer type section - not shown for coding questions\r\n        const answerTypeBlocks = [\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Answer Types\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"You can select from these answer types:\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Text\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Learners need to type their answer\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Audio\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Learners need to record their answer\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Code\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Learners need to write code as their answer in a code editor. They can run their code and see the output without leaving the editor and submit when they are done.\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            }\r\n        ];\r\n\r\n        // Programming languages section - only shown for coding questions\r\n        const programmingLanguagesBlocks = inputType === 'code' ? [\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Programming Languages\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"You should select the programming languages learners will use to answer the question. You can select multiple languages from the dropdown.\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            }\r\n        ] : [];\r\n\r\n        // Tabs explanation - dependent on question type\r\n        let tabsExplanationBlocks = [];\r\n        if (questionType === 'objective') {\r\n            tabsExplanationBlocks = [\r\n                {\r\n                    type: \"heading\",\r\n                    props: { level: 3 },\r\n                    content: [{ \"text\": \"Editor Tabs\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"paragraph\",\r\n                    content: [{ \"text\": \"The Question Editor has three tabs for this question type:\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Question\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": (Current tab) Where you write the question text\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Correct Answer\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Where you provide the expected answer for automatic evaluation\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"AI Training\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Where you can add knowledge base content to help AI evaluate learner responses\", \"type\": \"text\", styles: {} }]\r\n                }\r\n            ];\r\n        } else if (questionType === 'subjective') {\r\n            tabsExplanationBlocks = [\r\n                {\r\n                    type: \"heading\",\r\n                    props: { level: 3 },\r\n                    content: [{ \"text\": \"Editor Tabs\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"paragraph\",\r\n                    content: [{ \"text\": \"The Question Editor has three tabs for this question type:\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Question\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": (Current tab) Where you write the question text\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Scorecard\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Where you define grading criteria for subjective responses\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"AI Training\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Where you can add knowledge base content to help AI evaluate learner responses\", \"type\": \"text\", styles: {} }]\r\n                }\r\n            ];\r\n        } else { // coding\r\n            tabsExplanationBlocks = [\r\n                {\r\n                    type: \"heading\",\r\n                    props: { level: 3 },\r\n                    content: [{ \"text\": \"Editor Tabs\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"paragraph\",\r\n                    content: [{ \"text\": \"The Question Editor has three tabs for this question type:\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Question\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": (Current tab) Where you write the question text\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Correct Answer\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Where you provide the expected code solution\", \"type\": \"text\", styles: {} }]\r\n                },\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"AI Training\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Where you can add knowledge base content to help AI evaluate learner code solutions\", \"type\": \"text\", styles: {} }]\r\n                }\r\n            ];\r\n        }\r\n\r\n        // Available block types (from learning material editor)\r\n        const blockTypesBlocks = [\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Available Block Types\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"Here are some examples of the different types of blocks you can use:\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 2 },\r\n                content: [{ \"text\": \"Headings (like this one)\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Bullet lists (like this)\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"numberedListItem\",\r\n                content: [{ \"text\": \"Numbered lists (like this)\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"checkListItem\",\r\n                content: [{ \"text\": \"Check lists (like this)\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"Regular paragraphs for your main content\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"Insert images/videos/audio clips by clicking the + icon on the left and selecting Image/Video/Audio\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"Insert code blocks by clicking the + icon on the left and selecting Code Block\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Creating Nested Content\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"You can create nested content in two ways:\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Using the Tab key: Simply press Tab while your cursor is on a block to indent it\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Using the side menu: Hover near the left edge of a block, click the menu icon (the button with 6 dots), and drag the block to the desired nested position inside another block\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"Here is an example of a nested list:\", \"type\": \"text\", styles: { \"bold\": true } }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Main topic 1\", \"type\": \"text\", styles: {} }],\r\n                children: [\r\n                    {\r\n                        type: \"bulletListItem\",\r\n                        props: { indent: 1 },\r\n                        content: [{ \"text\": \"Subtopic 1.1 (indented using Tab or side menu)\", \"type\": \"text\", styles: {} }]\r\n                    },\r\n                    {\r\n                        type: \"bulletListItem\",\r\n                        props: { indent: 1 },\r\n                        content: [{ \"text\": \"Subtopic 1.2\", \"type\": \"text\", styles: {} }],\r\n                        children: [{\r\n                            type: \"bulletListItem\",\r\n                            props: { indent: 2 },\r\n                            content: [{ \"text\": \"Further nested item (press Tab again to create deeper nesting)\", \"type\": \"text\", styles: {} }]\r\n                        }]\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n        ];\r\n\r\n        // Writing effective questions section\r\n        const effectiveQuestionsBlocks = [\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Writing Effective Questions\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"For best results:\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Be clear and specific in your question text\", \"type\": \"text\", styles: {} }]\r\n            }\r\n        ];\r\n\r\n        // Question type specific tips\r\n        let questionTypeTipsBlocks = [];\r\n        if (questionType === 'subjective') {\r\n            questionTypeTipsBlocks = [\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Create a detailed scorecard with clear evaluation criteria or pick one of the templates already provided\", \"type\": \"text\", styles: {} }]\r\n                }\r\n            ];\r\n        } else if (inputType === 'code') {\r\n            questionTypeTipsBlocks = [\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Provide a clear problem statement and any constraints or performance requirements along with the expected code solution\", \"type\": \"text\", styles: {} }]\r\n                }\r\n            ];\r\n        } else {\r\n            questionTypeTipsBlocks = [\r\n                {\r\n                    type: \"bulletListItem\",\r\n                    content: [{ \"text\": \"Make sure your correct answer is complete and matches the expected format\", \"type\": \"text\", styles: {} }]\r\n                }\r\n            ];\r\n        }\r\n\r\n        // Preview and publish explanation\r\n        const previewPublishBlocks = [\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"heading\",\r\n                props: { level: 3 },\r\n                content: [{ \"text\": \"Preview and Publishing\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"When you're ready to test your quiz:\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Preview Button\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Lets you see and answer the question exactly as a learner will see it\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"bulletListItem\",\r\n                content: [{ \"text\": \"Publish Button\", \"type\": \"text\", styles: { \"bold\": true } }, { \"text\": \": Makes the quiz available to learners. You can always edit and publish again\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"Delete this template when you are ready to create your own question!\", \"type\": \"text\", styles: {} }]\r\n            }\r\n        ];\r\n\r\n        // Combine all blocks based on question type\r\n        return [\r\n            ...commonBlocks,\r\n            ...answerTypeBlocks,\r\n            ...programmingLanguagesBlocks,\r\n            ...tabsExplanationBlocks,\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{ \"text\": \"\", \"type\": \"text\", styles: {} }]\r\n            },\r\n            ...blockTypesBlocks,\r\n            ...effectiveQuestionsBlocks,\r\n            ...questionTypeTipsBlocks,\r\n            ...previewPublishBlocks\r\n        ];\r\n    };\r\n\r\n    // Add a new question\r\n    const addQuestion = useCallback(() => {\r\n        if (checkUnsavedScorecardChanges()) {\r\n            // Store the add question action as pending\r\n            pendingScorecardActionRef.current = () => {\r\n                // Execute the add question logic without checking for unsaved changes\r\n                executeAddQuestion();\r\n            };\r\n\r\n            if (onQuestionChangeWithUnsavedScorecardChanges) {\r\n                onQuestionChangeWithUnsavedScorecardChanges();\r\n            }\r\n            return;\r\n        }\r\n\r\n        executeAddQuestion();\r\n    }, [questions, onChange]);\r\n\r\n    // Extract the actual add question logic to a separate function\r\n    const executeAddQuestion = useCallback(() => {\r\n        // Get the previous question's configuration if available\r\n        // Otherwise, use default values\r\n        let questionType = 'objective';\r\n        let inputType: 'text' | 'code' | 'audio' = 'text';\r\n        let codingLanguages: string[] = [];\r\n        let responseType: 'chat' | 'exam' = 'chat';\r\n\r\n        // If there's at least one question (to be used as a reference)\r\n        if (questions.length > 0) {\r\n            const previousQuestion = questions[questions.length - 1];\r\n            if (previousQuestion && previousQuestion.config) {\r\n                // Use the previous question's type\r\n                questionType = previousQuestion.config.questionType;\r\n                // Use the previous question's input type (answer type)\r\n                inputType = previousQuestion.config.inputType;\r\n                // Use the previous question's coding languages if available\r\n                if (previousQuestion.config.codingLanguages &&\r\n                    Array.isArray(previousQuestion.config.codingLanguages) &&\r\n                    previousQuestion.config.codingLanguages.length > 0) {\r\n                    codingLanguages = [...previousQuestion.config.codingLanguages];\r\n                }\r\n                responseType = previousQuestion.config.responseType;\r\n            }\r\n        }\r\n\r\n        const newQuestion: QuizQuestion = {\r\n            id: `question-${Date.now()}`,\r\n            content: getQuestionTemplateBlocks(questionType as 'objective' | 'subjective', inputType),\r\n            config: {\r\n                ...defaultQuestionConfig,\r\n                questionType: questionType as 'objective' | 'subjective',\r\n                inputType: inputType,\r\n                codingLanguages: codingLanguages,\r\n                responseType: responseType,\r\n                title: 'Question ' + (questions.length + 1),\r\n            }\r\n        };\r\n\r\n        const updatedQuestions = [...questions, newQuestion];\r\n        setQuestions(updatedQuestions);\r\n        setCurrentQuestionIndex(updatedQuestions.length - 1);\r\n\r\n        // Reset last content update ref\r\n        lastContentUpdateRef.current = \"\";\r\n\r\n        // Trigger animation\r\n        setNewQuestionAdded(true);\r\n\r\n        // Trigger question count highlight animation\r\n        setQuestionCountHighlighted(true);\r\n\r\n        // Reset animation flags after animation completes\r\n        setTimeout(() => {\r\n            setNewQuestionAdded(false);\r\n        }, 800); // slightly longer than animation duration to ensure it completes\r\n\r\n        setTimeout(() => {\r\n            setQuestionCountHighlighted(false);\r\n        }, 1000); // Animation duration for the question counter highlight\r\n\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n\r\n        setActiveEditorTab('question');\r\n\r\n        // Removed slash menu opening after adding a new question\r\n    }, [questions, onChange]);\r\n\r\n    // Navigate to previous question\r\n    const goToPreviousQuestion = useCallback(() => {\r\n        if (currentQuestionIndex == 0) return;\r\n\r\n        if (checkUnsavedScorecardChanges()) {\r\n            // Store the previous question action as pending\r\n            pendingScorecardActionRef.current = () => {\r\n                // Execute the previous question logic without checking for unsaved changes\r\n                executeGoToPreviousQuestion();\r\n            };\r\n\r\n            if (onQuestionChangeWithUnsavedScorecardChanges) {\r\n                onQuestionChangeWithUnsavedScorecardChanges();\r\n            }\r\n            return;\r\n        }\r\n\r\n        executeGoToPreviousQuestion();\r\n    }, [currentQuestionIndex, onQuestionChange, questions, activeEditorTab, isPreviewMode]);\r\n\r\n    // Extract the actual previous question logic to a separate function\r\n    const executeGoToPreviousQuestion = useCallback(() => {\r\n        // Reset last content update ref when navigating to a different question\r\n        lastContentUpdateRef.current = \"\";\r\n        const newIndex = currentQuestionIndex - 1;\r\n\r\n\r\n        // Reset active tab to question when navigating\r\n        // Only change active tab if the current tab is not available in the next question\r\n        const nextQuestion = questions[newIndex];\r\n        if (activeEditorTab === 'scorecard' && nextQuestion.config.questionType !== 'subjective') {\r\n            setActiveEditorTab('question');\r\n        } else if (activeEditorTab === 'answer' && nextQuestion.config.questionType == 'subjective') {\r\n            setActiveEditorTab('question');\r\n        }\r\n\r\n        setCurrentQuestionIndex(newIndex);\r\n\r\n        // Call the onQuestionChange callback if provided\r\n        if (onQuestionChange && questions[newIndex] && !isPreviewMode) {\r\n            onQuestionChange(questions[newIndex].id);\r\n        }\r\n    }, [currentQuestionIndex, onQuestionChange, questions, activeEditorTab, isPreviewMode]);\r\n\r\n    // Navigate to next question\r\n    const goToNextQuestion = useCallback(() => {\r\n        if (currentQuestionIndex == questions.length - 1) return;\r\n\r\n        if (checkUnsavedScorecardChanges()) {\r\n            // Store the next question action as pending\r\n            pendingScorecardActionRef.current = () => {\r\n                // Execute the next question logic without checking for unsaved changes\r\n                executeGoToNextQuestion();\r\n            };\r\n\r\n            if (onQuestionChangeWithUnsavedScorecardChanges) {\r\n                onQuestionChangeWithUnsavedScorecardChanges();\r\n            }\r\n            return;\r\n        }\r\n\r\n        executeGoToNextQuestion();\r\n    }, [currentQuestionIndex, questions.length, onQuestionChange, questions, activeEditorTab, isPreviewMode]);\r\n\r\n    // Extract the actual next question logic to a separate function\r\n    const executeGoToNextQuestion = useCallback(() => {\r\n        // Reset last content update ref when navigating to a different question\r\n        lastContentUpdateRef.current = \"\";\r\n        const newIndex = currentQuestionIndex + 1;\r\n\r\n        // Reset active tab to question when navigating\r\n        const nextQuestion = questions[newIndex];\r\n        if (activeEditorTab === 'scorecard' && nextQuestion.config.questionType !== 'subjective') {\r\n            setActiveEditorTab('question');\r\n        } else if (activeEditorTab === 'answer' && nextQuestion.config.questionType == 'subjective') {\r\n            setActiveEditorTab('question');\r\n        }\r\n\r\n        setCurrentQuestionIndex(newIndex);\r\n\r\n        // Call the onQuestionChange callback if provided\r\n        if (onQuestionChange && questions[newIndex] && !isPreviewMode) {\r\n            onQuestionChange(questions[newIndex].id);\r\n        }\r\n\r\n    }, [currentQuestionIndex, questions.length, onQuestionChange, questions, activeEditorTab, isPreviewMode]);\r\n\r\n    // Delete current question\r\n    const deleteQuestion = useCallback(() => {\r\n        if (questions.length <= 1) {\r\n            // If only one question, just clear the questions array\r\n            setQuestions([]);\r\n            setShowDeleteConfirm(false);\r\n\r\n            if (onChange) {\r\n                onChange([]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const updatedQuestions = [...questions];\r\n        updatedQuestions.splice(currentQuestionIndex, 1);\r\n\r\n        setQuestions(updatedQuestions);\r\n\r\n        // Adjust current index if necessary\r\n        if (currentQuestionIndex >= updatedQuestions.length) {\r\n            setCurrentQuestionIndex(updatedQuestions.length - 1);\r\n        }\r\n\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n\r\n        // Hide confirmation dialog\r\n        setShowDeleteConfirm(false);\r\n\r\n        // Reset last content update ref when deleting a question\r\n        lastContentUpdateRef.current = \"\";\r\n    }, [questions, currentQuestionIndex, onChange]);\r\n\r\n    // Effect to initialize lastContentUpdateRef when changing questions\r\n    useEffect(() => {\r\n        if (questions.length > 0) {\r\n            lastContentUpdateRef.current = JSON.stringify(currentQuestionContent);\r\n        }\r\n    }, [currentQuestionIndex, questions.length, currentQuestionContent]);\r\n\r\n    // Placeholder component for empty quiz\r\n    const EmptyQuizPlaceholder = () => (\r\n        <div className=\"flex flex-col items-center justify-center h-full w-full text-center p-8\">\r\n            <h3 className=\"text-xl font-light text-white mb-3\">Questions are the gateway to learning</h3>\r\n            <p className=\"text-gray-400 max-w-md mb-8\">\r\n                Add questions to create an interactive quiz for your learners\r\n            </p>\r\n            {status === 'draft' && (\r\n                <button\r\n                    onClick={addQuestion}\r\n                    className=\"flex items-center px-5 py-2.5 text-sm text-black bg-white hover:bg-gray-100 rounded-md transition-colors cursor-pointer\"\r\n                    disabled={readOnly}\r\n                >\r\n                    <div className=\"w-4 h-4 rounded-full border border-black flex items-center justify-center mr-2\">\r\n                        <Plus size={10} className=\"text-black\" />\r\n                    </div>\r\n                    Add question\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n    const handleCancelPublish = () => {\r\n        if (onPublishCancel) {\r\n            onPublishCancel();\r\n        }\r\n    };\r\n\r\n\r\n    const updateDraftQuiz = async (scheduledPublishAt?: string | null, status: 'draft' | 'published' = 'published') => {\r\n        if (!taskId) {\r\n            console.error(\"Cannot publish: taskId is not provided\");\r\n            setPublishError(\"Cannot publish: Task ID is missing\");\r\n            return;\r\n        }\r\n\r\n        setIsPublishing(true);\r\n        setPublishError(null);\r\n\r\n        try {\r\n            // Get the current title from the dialog - it may have been edited\r\n            const dialogTitleElement = document.querySelector('.dialog-content-editor')?.parentElement?.querySelector('h2');\r\n            const currentTitle = dialogTitleElement?.textContent || '';\r\n\r\n            // Format questions for the API\r\n            const formattedQuestions = questions.map((question) => {\r\n                // Map questionType to API type\r\n                const questionType = question.config.questionType;\r\n                // Map inputType\r\n                const inputType = question.config.inputType\r\n\r\n                let scorecardId = null\r\n\r\n                if (question.config.scorecardData) {\r\n                    // Use our helper function to determine if this is an API scorecard\r\n                    scorecardId = question.config.scorecardData.id\r\n                }\r\n\r\n                // Return the formatted question object for all questions, not just those with scorecards\r\n                return {\r\n                    blocks: question.content,\r\n                    answer: question.config.correctAnswer || [],\r\n                    input_type: inputType,\r\n                    response_type: question.config.responseType,\r\n                    coding_languages: question.config.codingLanguages || [],\r\n                    generation_model: null,\r\n                    type: questionType,\r\n                    max_attempts: question.config.responseType === 'exam' ? 1 : null,\r\n                    is_feedback_shown: question.config.responseType === 'exam' ? false : true,\r\n                    scorecard_id: scorecardId,\r\n                    context: getKnowledgeBaseContent(question.config),\r\n                    title: question.config.title,\r\n                };\r\n            });\r\n\r\n            // Make POST request to update the quiz\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/${taskId}/quiz`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    title: currentTitle,\r\n                    questions: formattedQuestions,\r\n                    scheduled_publish_at: scheduledPublishAt,\r\n                    status: status\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to publish quiz: ${response.status}`);\r\n            }\r\n\r\n            // Get the updated task data from the response\r\n            const updatedTaskData = await response.json();\r\n\r\n            const updatedData = {\r\n                ...updatedTaskData,\r\n                status: status,\r\n                title: currentTitle,\r\n                scheduled_publish_at: scheduledPublishAt,\r\n                id: taskId // Ensure the ID is included for proper updating in the module list\r\n            };\r\n\r\n            console.log(\"Draft quiz updated successfully\");\r\n\r\n            // Set publishing to false to avoid state updates during callbacks\r\n            setIsPublishing(false);\r\n\r\n            // Call the onPublishSuccess callback if provided\r\n            const callback = status === 'published' ? onPublishSuccess : onSaveSuccess;\r\n            if (callback) {\r\n                // Use setTimeout to break the current render cycle\r\n                setTimeout(() => {\r\n                    callback(updatedData);\r\n                }, 0);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error publishing quiz:\", error);\r\n            setPublishError(error instanceof Error ? error.message : \"Failed to publish quiz\");\r\n            setIsPublishing(false);\r\n        }\r\n    };\r\n\r\n    // Modified handleSavePublishedQuiz for edit mode to send raw blocks of the correct answer\r\n    const handleSavePublishedQuiz = async () => {\r\n        if (!taskId) {\r\n            console.error(\"Cannot save: taskId is not provided\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Get the current title from the dialog - it may have been edited\r\n            const dialogTitleElement = document.querySelector('.dialog-content-editor')?.parentElement?.querySelector('h2');\r\n            const currentTitle = dialogTitleElement?.textContent || '';\r\n\r\n            // Format questions for the API\r\n            const formattedQuestions = questions.map((question) => {\r\n                // Map questionType to API type\r\n                const questionType = question.config.questionType;\r\n\r\n                // Get input_type from the current config\r\n                const inputType = question.config.inputType;\r\n\r\n                let scorecardId = null\r\n\r\n                if (question.config.scorecardData) {\r\n                    // Use our helper function to determine if this is an API scorecard\r\n                    scorecardId = question.config.scorecardData.id\r\n                }\r\n\r\n                return {\r\n                    id: question.id,\r\n                    blocks: question.content,\r\n                    answer: question.config.correctAnswer || [],\r\n                    coding_languages: question.config.codingLanguages || [],\r\n                    type: questionType,\r\n                    input_type: inputType,\r\n                    response_type: question.config.responseType,\r\n                    scorecard_id: scorecardId,\r\n                    context: getKnowledgeBaseContent(question.config),\r\n                    title: question.config.title,\r\n                };\r\n            });\r\n\r\n            // Make PUT request to update the quiz content, keeping the same status\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/${taskId}/quiz`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    title: currentTitle,\r\n                    questions: formattedQuestions,\r\n                    scheduled_publish_at: scheduledPublishAt\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to save quiz: ${response.status}`);\r\n            }\r\n\r\n            // Get the updated task data from the response\r\n            const updatedTaskData = await response.json();\r\n\r\n            // Create updated data with the current title\r\n            const updatedData = {\r\n                ...updatedTaskData,\r\n                title: currentTitle,\r\n                id: taskId,\r\n            };\r\n\r\n            // Call the onSaveSuccess callback if provided\r\n            if (onSaveSuccess) {\r\n                setTimeout(() => {\r\n                    onSaveSuccess(updatedData);\r\n                }, 0);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error saving quiz:\", error);\r\n        }\r\n    };\r\n\r\n    // Handle cancel in edit mode - revert to original data\r\n    const handleCancel = () => {\r\n        if (originalQuestionsRef.current.length === 0) return;\r\n        // Restore the original questions\r\n        setQuestions(JSON.parse(JSON.stringify(originalQuestionsRef.current)));\r\n\r\n        // Return the original title to the dialog header\r\n        const dialogTitleElement = document.querySelector('.dialog-content-editor')?.parentElement?.querySelector('h2');\r\n        if (dialogTitleElement && originalTitleRef.current) {\r\n            dialogTitleElement.textContent = originalTitleRef.current;\r\n        }\r\n    };\r\n\r\n    // Check if the current question has coding languages set\r\n    const hasCodingLanguages = useCallback(() => {\r\n        if (questions.length === 0 || currentQuestionIndex < 0 || currentQuestionIndex >= questions.length) {\r\n            return false;\r\n        }\r\n\r\n        const question = questions[currentQuestionIndex];\r\n        if (question.config.inputType !== 'code') {\r\n            return true; // Not relevant for non-coding questions\r\n        }\r\n\r\n        // Check if coding languages array exists and has at least one value\r\n        return !!(question.config.codingLanguages &&\r\n            Array.isArray(question.config.codingLanguages) &&\r\n            question.config.codingLanguages.length > 0);\r\n    }, [questions, currentQuestionIndex]);\r\n\r\n    // Add function to check for unsaved scorecard changes across all questions\r\n    const checkUnsavedScorecardChanges = useCallback(() => {\r\n        // Check only the current question\r\n        if (currentQuestionIndex >= 0 && currentQuestionIndex < questions.length) {\r\n            const question = questions[currentQuestionIndex];\r\n\r\n            // Check if this question has a scorecard\r\n            if (question.config.scorecardData) {\r\n                const scorecardId = question.config.scorecardData.id;\r\n\r\n                const originalData = originalScorecardData.get(scorecardId);\r\n\r\n                // If this is a new scorecard (not in original data), skip the check\r\n                if (!originalData) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if scorecard name has changed\r\n                if (question.config.scorecardData.name !== originalData.name) {\r\n                    return true;\r\n                }\r\n\r\n                // Check if criteria have changed\r\n                const currentCriteria = question.config.scorecardData.criteria;\r\n                const originalCriteria = originalData.criteria;\r\n\r\n                // Check if criteria length has changed\r\n                if (currentCriteria.length !== originalCriteria.length) {\r\n                    return true;\r\n                }\r\n\r\n                // Check if any criterion has changed\r\n                for (let j = 0; j < currentCriteria.length; j++) {\r\n                    const current = currentCriteria[j];\r\n                    const original = originalCriteria[j];\r\n\r\n                    if (!original) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (current.name !== original.name ||\r\n                        current.description !== original.description ||\r\n                        current.minScore !== original.minScore ||\r\n                        current.maxScore !== original.maxScore) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; // No unsaved changes found\r\n    }, [questions, originalScorecardData, currentQuestionIndex]);\r\n\r\n    // Expose methods to parent component via the ref\r\n    useImperativeHandle(ref, () => ({\r\n        saveDraft: () => updateDraftQuiz(null, 'draft'),\r\n        savePublished: handleSavePublishedQuiz,\r\n        cancel: handleCancel,\r\n        hasContent: () => questions.length > 0,\r\n        hasQuestionContent: () => {\r\n            const isValid = validateQuestionContent(currentQuestionContent);\r\n            if (!isValid) {\r\n                // Switch to question tab\r\n                setActiveEditorTab('question');\r\n                // Highlight the question field to draw attention to the error\r\n                highlightField('question');\r\n            }\r\n            return isValid;\r\n        },\r\n        getCurrentQuestionType: () => {\r\n            // Return null if there are no questions\r\n            if (questions.length === 0) return null;\r\n            // Return the current question's type, defaulting to 'objective' if not set\r\n            return currentQuestionConfig.questionType;\r\n        },\r\n        getCurrentQuestionInputType: () => {\r\n            // Return null if there are no questions\r\n            if (questions.length === 0) return null;\r\n            // Return the current question's input type, defaulting to 'text' if not set\r\n            return currentQuestionConfig.inputType;\r\n        },\r\n        hasCorrectAnswer: () => {\r\n            const isValid = validateCorrectAnswer(currentQuestionConfig);\r\n            if (!isValid) {\r\n                // Switch to answer tab\r\n                setActiveEditorTab('answer');\r\n                // Highlight the answer field to draw attention to the error\r\n                highlightField('answer');\r\n            }\r\n            return isValid;\r\n        },\r\n        hasScorecard: () => validateScorecard(currentQuestionConfig),\r\n        hasCodingLanguages: () => {\r\n            const isValid = hasCodingLanguages();\r\n            if (!isValid) {\r\n                // Highlight the coding language field to draw attention to the error\r\n                highlightField('codingLanguage');\r\n            }\r\n            return isValid;\r\n        },\r\n        setActiveTab: (tab) => {\r\n            // Set the active editor tab\r\n            setActiveEditorTab(tab);\r\n        },\r\n        validateBeforePublish: validateAllQuestions,\r\n        getCurrentQuestionConfig: () => {\r\n            // Return undefined if there are no questions\r\n            if (questions.length === 0) return undefined;\r\n            // Return the current question's configuration\r\n            return currentQuestionConfig;\r\n        },\r\n        validateScorecardCriteria: (scorecard: ScorecardTemplate | undefined, callbacks: any) =>\r\n            validateScorecardCriteria(scorecard, callbacks),\r\n        hasChanges: () => {\r\n            // If we don't have original questions to compare with, assume no changes\r\n            if (originalQuestionsRef.current.length === 0 && questions.length === 0) return false;\r\n\r\n            // Check if title has changed\r\n            const dialogTitleElement = document.querySelector('.dialog-content-editor')?.parentElement?.querySelector('h2');\r\n            const currentTitle = dialogTitleElement?.textContent || \"\";\r\n            const originalTitle = originalTitleRef.current || \"\";\r\n\r\n            if (currentTitle !== originalTitle) {\r\n                return true;\r\n            }\r\n\r\n            // Check if questions have changed (number, content, or configuration)\r\n            if (questions.length !== originalQuestionsRef.current.length) {\r\n                return true;\r\n            }\r\n\r\n            // Convert both to JSON strings for deep comparison\r\n            const currentQuestionsStr = JSON.stringify(questions);\r\n            const originalQuestionsStr = JSON.stringify(originalQuestionsRef.current);\r\n\r\n            // Return true if there are changes\r\n            return currentQuestionsStr !== originalQuestionsStr;\r\n        },\r\n        hasUnsavedScorecardChanges: checkUnsavedScorecardChanges,\r\n        handleScorecardChangesRevert: handleScorecardRevert\r\n    }));\r\n\r\n    // Update the MemoizedLearnerQuizView to include the correct answer\r\n    const MemoizedLearnerQuizView = useMemo(() => {\r\n        // No validation checks - directly use the questions array\r\n        // Make a deep copy of questions\r\n        let questionsWithCorrectAnswers = JSON.parse(JSON.stringify(questions));\r\n\r\n        // Update the current question with the latest correct answer blocks if possible\r\n        if (correctAnswerEditorRef.current && currentQuestionIndex >= 0 && currentQuestionIndex < questionsWithCorrectAnswers.length) {\r\n            const currentCorrectAnswer = correctAnswerEditorRef.current.document || [];\r\n            questionsWithCorrectAnswers[currentQuestionIndex].config = {\r\n                ...questionsWithCorrectAnswers[currentQuestionIndex].config,\r\n                correctAnswer: currentCorrectAnswer\r\n            };\r\n        }\r\n\r\n        return (\r\n            <LearnerQuizView\r\n                questions={questionsWithCorrectAnswers}\r\n                isDarkMode={isDarkMode}\r\n                className=\"w-full h-full\"\r\n                onSubmitAnswer={onSubmitAnswer}\r\n                currentQuestionId={activeQuestionId}\r\n                onQuestionChange={(questionId) => {\r\n                    // Find the index for this question ID\r\n                    const index = questions.findIndex(q => q.id === questionId);\r\n                    if (index !== -1) {\r\n                        // Update our internal state\r\n                        setCurrentQuestionIndex(index);\r\n                    }\r\n                }}\r\n                userId={userId}\r\n                taskId={taskId}\r\n                isTestMode={true}\r\n            />\r\n        );\r\n    }, [questions, isDarkMode, readOnly, onSubmitAnswer, taskType, activeQuestionId, userId, currentQuestionIndex]);\r\n\r\n    // Define dropdown options\r\n    // Now removed and imported from dropdownOptions.ts\r\n\r\n    // Get dropdown option objects based on config values\r\n    const getQuestionTypeOption = useCallback((type: string = 'objective') => {\r\n        return questionTypeOptions.find(option => option.value === type) || questionTypeOptions[0];\r\n    }, []);\r\n\r\n    const getAnswerTypeOption = useCallback((type: string = 'text') => {\r\n        return answerTypeOptions.find(option => option.value === type) || answerTypeOptions[0];\r\n    }, []);\r\n\r\n    const getPurposeOption = useCallback((purpose: string = 'practice') => {\r\n        return questionPurposeOptions.find(option => option.value === purpose) || questionPurposeOptions[0];\r\n    }, []);\r\n\r\n    // Handle title change\r\n    const handleQuestionTitleChange = useCallback((newTitle: string) => {\r\n        // Update the question config with the new question title\r\n        handleConfigChange({\r\n            title: newTitle\r\n        });\r\n    }, [handleConfigChange]);\r\n\r\n    // Handle question title input validation\r\n    const handleQuestionTitleInput = useCallback((e: React.FormEvent<HTMLSpanElement>) => {\r\n        const el = e.currentTarget;\r\n        if (el.textContent && el.textContent.length > 200) {\r\n            el.textContent = el.textContent.slice(0, 200);\r\n            const range = document.createRange();\r\n            const sel = window.getSelection();\r\n            range.selectNodeContents(el);\r\n            range.collapse(false);\r\n            sel?.removeAllRanges();\r\n            sel?.addRange(range);\r\n        }\r\n    }, []);\r\n\r\n    // Handle question title blur\r\n    const handleQuestionTitleBlur = useCallback((e: React.FocusEvent<HTMLSpanElement>) => {\r\n        const newValue = e.currentTarget.textContent?.trim();\r\n        if (newValue !== currentQuestionConfig.title) {\r\n            handleQuestionTitleChange(newValue || 'Question ' + (currentQuestionIndex + 1));\r\n        }\r\n    }, [currentQuestionConfig.title, handleQuestionTitleChange, currentQuestionIndex]);\r\n\r\n    // Handle question title key down\r\n    const handleQuestionTitleKeyDown = useCallback((e: React.KeyboardEvent<HTMLSpanElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            e.currentTarget.blur();\r\n        }\r\n    }, []);\r\n\r\n    // Handle question type change\r\n    const handleQuestionTypeChange = useCallback((option: DropdownOption | DropdownOption[]) => {\r\n        // We know this is a single-select dropdown\r\n        if (!Array.isArray(option)) {\r\n            setSelectedQuestionType(option);\r\n\r\n            // Get the new question type\r\n            const newQuestionType = option.value as 'objective' | 'subjective';\r\n\r\n            // Update the question config with the new question type and also update template if needed\r\n            handleConfigChange({\r\n                questionType: newQuestionType,\r\n            }, {\r\n                updateTemplate: true,\r\n                newQuestionType: newQuestionType,\r\n                newInputType: currentQuestionConfig.inputType\r\n            });\r\n\r\n            // Set active tab to question whenever question type changes\r\n            setActiveEditorTab('question');\r\n        }\r\n    }, [handleConfigChange, status, questions, currentQuestionIndex, onChange, currentQuestionConfig.inputType]);\r\n\r\n    // Handle purpose change\r\n    const handlePurposeChange = useCallback((option: DropdownOption | DropdownOption[]) => {\r\n        // We know this is a single-select dropdown\r\n        if (!Array.isArray(option)) {\r\n            setSelectedPurpose(option);\r\n\r\n            // Get the new purpose\r\n            const newPurpose = option.value as 'practice' | 'exam';\r\n\r\n            // Update the question config with the new purpose\r\n            handleConfigChange({\r\n                responseType: newPurpose === 'exam' ? 'exam' : 'chat'\r\n            });\r\n        }\r\n    }, [handleConfigChange]);\r\n\r\n    // Handle answer type change\r\n    const handleAnswerTypeChange = useCallback((option: DropdownOption | DropdownOption[]) => {\r\n        // We know this is a single-select dropdown\r\n        if (!Array.isArray(option)) {\r\n            setSelectedAnswerType(option);\r\n\r\n            // Update the question config with the new input type\r\n            handleConfigChange({\r\n                inputType: option.value as 'text' | 'code' | 'audio'\r\n            }, {\r\n                updateTemplate: true,\r\n                newQuestionType: currentQuestionConfig.questionType,\r\n                newInputType: option.value as 'text' | 'code' | 'audio'\r\n            });\r\n        }\r\n    }, [handleConfigChange, status, questions, currentQuestionIndex, onChange, currentQuestionConfig.questionType]);\r\n\r\n    // Handle coding language change\r\n    const handleCodingLanguageChange = useCallback((option: DropdownOption | DropdownOption[]) => {\r\n        // Cast to array since we know this is a multiselect dropdown\r\n        const selectedOptions = Array.isArray(option) ? option : [option];\r\n\r\n        // Define exclusive languages\r\n        const exclusiveLanguages = ['react', 'sql', 'python', 'nodejs'];\r\n\r\n        // Validation logic for language combinations\r\n        let validatedOptions = [...selectedOptions];\r\n        let invalidMessage = \"\";\r\n\r\n        // Find all exclusive languages in the selection\r\n        const exclusiveSelectedLanguages = selectedOptions.filter(opt =>\r\n            exclusiveLanguages.includes(opt.value)\r\n        );\r\n\r\n        // Check if any exclusive language is selected\r\n        if (exclusiveSelectedLanguages.length > 0) {\r\n            // If there are multiple exclusive languages, get the last one selected\r\n            const lastExclusiveLanguage = exclusiveSelectedLanguages[exclusiveSelectedLanguages.length - 1];\r\n\r\n            // If we have more than one language selected and at least one is exclusive,\r\n            // we need to filter out all other languages\r\n            if (selectedOptions.length > 1) {\r\n                // Keep only the last exclusive language\r\n                validatedOptions = [lastExclusiveLanguage];\r\n\r\n                // Get a nice display name for the exclusive language\r\n                const displayName = lastExclusiveLanguage.label\r\n\r\n                invalidMessage = `${displayName} must be used alone. Other languages cannot be added along with it.`;\r\n            }\r\n        } else {\r\n            // No exclusive languages, check for HTML and CSS combination\r\n            const hasCSS = selectedOptions.some(opt => opt.value === 'css');\r\n            const hasHTML = selectedOptions.some(opt => opt.value === 'html');\r\n\r\n            if (hasCSS && !hasHTML) {\r\n                // Find the HTML option in the coding language options\r\n                const htmlOption = codingLanguageOptions.find(opt => opt.value === 'html');\r\n\r\n                if (htmlOption) {\r\n                    // Add HTML to the validated options\r\n                    validatedOptions.push(htmlOption);\r\n                    invalidMessage = \"HTML has been automatically selected because CSS requires HTML\";\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set the validated options\r\n        setSelectedCodingLanguages(validatedOptions);\r\n\r\n        // Update the question config with the validated options\r\n        handleConfigChange({\r\n            codingLanguages: validatedOptions.map(opt => opt.value)\r\n        });\r\n\r\n        // Show feedback to the user if there was an invalid combination\r\n        if (invalidMessage) {\r\n            // Use setTimeout to ensure state is updated before showing the feedback\r\n            setTimeout(() => {\r\n                // Show a toast notification\r\n                setToastTitle(\"Language Selection Updated\");\r\n                setToastMessage(invalidMessage);\r\n                setToastEmoji(\"⚠️\");\r\n                setShowToast(true);\r\n            }, 100);\r\n        }\r\n    }, [handleConfigChange]);\r\n\r\n    // State for type dropdown\r\n    const [selectedQuestionType, setSelectedQuestionType] = useState<DropdownOption>(questionTypeOptions[0]);\r\n    const [selectedAnswerType, setSelectedAnswerType] = useState<DropdownOption>(answerTypeOptions[0]);\r\n    const [selectedCodingLanguages, setSelectedCodingLanguages] = useState<DropdownOption[]>([codingLanguageOptions[0]]);\r\n    const [selectedPurpose, setSelectedPurpose] = useState<DropdownOption>(questionPurposeOptions[0]);\r\n\r\n    // Update the selected options based on the current question's config\r\n    useEffect(() => {\r\n        if (questions.length > 0 && currentQuestionIndex >= 0 && currentQuestionIndex < questions.length) {\r\n            const currentConfig = questions[currentQuestionIndex].config;\r\n\r\n            // Set question type based on config\r\n            setSelectedQuestionType(getQuestionTypeOption(currentConfig.questionType));\r\n\r\n            // Set answer type based on config.inputType or default to 'text'\r\n            setSelectedAnswerType(getAnswerTypeOption(currentConfig.inputType));\r\n\r\n            // Set purpose based on config.purpose or default to 'practice'\r\n            setSelectedPurpose(getPurposeOption(currentConfig.responseType));\r\n\r\n            // Set coding languages based on config.codingLanguages or default to first option\r\n            if (currentConfig.codingLanguages && currentConfig.codingLanguages.length > 0) {\r\n                const selectedLanguages = currentConfig.codingLanguages.map((langValue: string) => {\r\n                    return codingLanguageOptions.find(opt => opt.value === langValue) || codingLanguageOptions[0];\r\n                }).filter(Boolean);\r\n                setSelectedCodingLanguages(selectedLanguages.length > 0 ? selectedLanguages : [codingLanguageOptions[0]]);\r\n            } else {\r\n                setSelectedCodingLanguages([]);\r\n            }\r\n        }\r\n    }, [currentQuestionIndex, questions, getQuestionTypeOption, getAnswerTypeOption, getPurposeOption]);\r\n\r\n    const isUserCreatedNewScorecard = (scorecardData: ScorecardTemplate): boolean => {\r\n        return scorecardData && !scorecardData.new && !scorecardData.is_template;\r\n    };\r\n\r\n    const isLinkedScorecard = (scorecardData: ScorecardTemplate): boolean => {\r\n        if (scorecardData.new) return false;\r\n        return isUserCreatedNewScorecard(scorecardData);\r\n    };\r\n\r\n    // New function to sync all questions with a source scorecard when it changes\r\n    const syncLinkedScorecards = useCallback((sourceId: string, newName?: string, newCriteria?: CriterionData[]) => {\r\n        if (!sourceId) return;\r\n\r\n        // Update all questions that have scorecard linked to this source\r\n        const updatedQuestions = questions.map(question => {\r\n            // Check if this question has a linked scorecard with the matching id\r\n            if (question.config.scorecardData &&\r\n                question.config.scorecardData.id === sourceId) {\r\n\r\n                // Create an updated scorecard data\r\n                const updatedScorecardData = {\r\n                    ...question.config.scorecardData,\r\n                    name: newName !== undefined ? newName : question.config.scorecardData.name,\r\n                    criteria: newCriteria !== undefined ? newCriteria : question.config.scorecardData.criteria\r\n                };\r\n\r\n                // Return updated question with synced scorecard\r\n                return {\r\n                    ...question,\r\n                    config: {\r\n                        ...question.config,\r\n                        scorecardData: updatedScorecardData\r\n                    }\r\n                };\r\n            }\r\n\r\n            // Return question unchanged if it doesn't have a matching scorecard\r\n            return question;\r\n        });\r\n\r\n        // Update questions state and notify parent\r\n        setQuestions(updatedQuestions);\r\n        if (onChange) {\r\n            onChange(updatedQuestions);\r\n        }\r\n    }, [questions, onChange]);\r\n\r\n    // Function to handle saving published scorecard changes\r\n    const handleSaveScorecardChanges = useCallback(async () => {\r\n        if (!currentQuestionConfig.scorecardData || !schoolId || isSavingScorecardRef.current) {\r\n            return;\r\n        }\r\n\r\n        const scorecardData = currentQuestionConfig.scorecardData;\r\n\r\n        // Don't ask for confirmation if this is a new scorecard\r\n        if (scorecardData.new) {\r\n            performScorecardSave();\r\n            return;\r\n        }\r\n\r\n        // Show confirmation dialog instead of saving directly\r\n        setShowScorecardSaveConfirm(true);\r\n    }, [currentQuestionConfig.scorecardData, schoolId, originalScorecardData]);\r\n\r\n    // Function that actually performs the scorecard save operation\r\n    const performScorecardSave = useCallback(async () => {\r\n        if (!currentQuestionConfig.scorecardData || !schoolId || isSavingScorecardRef.current) {\r\n            return;\r\n        }\r\n\r\n        const scorecardData = currentQuestionConfig.scorecardData;\r\n\r\n        // Only save if this is a published scorecard (not new)\r\n        // if (scorecardData.new) {\r\n        //     return;\r\n        // }\r\n\r\n        isSavingScorecardRef.current = true;\r\n\r\n        try {\r\n            // Prepare the scorecard data for the API\r\n            const scorecardPayload = {\r\n                title: scorecardData.name,\r\n                criteria: scorecardData.criteria.map(criterion => ({\r\n                    name: criterion.name,\r\n                    description: criterion.description,\r\n                    min_score: criterion.minScore,\r\n                    max_score: criterion.maxScore,\r\n                    pass_score: criterion.passScore\r\n                }))\r\n            };\r\n\r\n            // Make the API call to update the scorecard\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/scorecards/${scorecardData.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(scorecardPayload),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to save scorecard: ${response.status}`);\r\n            }\r\n\r\n            // Create the new original data immediately\r\n            const newOriginalData = {\r\n                name: scorecardData.name,\r\n                criteria: JSON.parse(JSON.stringify(scorecardData.criteria))\r\n            };\r\n\r\n            // Update the original scorecard data to reflect the saved state\r\n            const updatedOriginalData = new Map(originalScorecardData);\r\n            updatedOriginalData.set(scorecardData.id, newOriginalData);\r\n            setOriginalScorecardData(updatedOriginalData);\r\n\r\n            // Also update the ref immediately for synchronous access\r\n            // This ensures that any immediate checks will see the updated data\r\n            originalScorecardData.set(scorecardData.id, newOriginalData);\r\n\r\n            // Show success toast if this is not a new scorecard\r\n            if (scorecardData.new) {\r\n                return;\r\n            }\r\n\r\n            setToastTitle(\"Scorecard Saved\");\r\n            setToastMessage(\"All questions using this scorecard have been updated\");\r\n            setToastEmoji(\"✅\");\r\n            setShowToast(true);\r\n        } catch (error) {\r\n            console.error('Error saving scorecard:', error);\r\n\r\n            // Show error toast\r\n            setToastTitle(\"Save Failed\");\r\n            setToastMessage(\"Failed to save scorecard changes. Please try again.\");\r\n            setToastEmoji(\"❌\");\r\n            setShowToast(true);\r\n        } finally {\r\n            isSavingScorecardRef.current = false;\r\n        }\r\n    }, [currentQuestionConfig.scorecardData, schoolId, originalScorecardData, setToastTitle, setToastMessage, setToastEmoji, setShowToast]);\r\n\r\n    // New function to handle complete scorecard revert\r\n    const handleScorecardRevert = useCallback(() => {\r\n        if (!currentQuestionConfig.scorecardData) {\r\n            return;\r\n        }\r\n\r\n        const scorecardId = currentQuestionConfig.scorecardData.id;\r\n        const originalData = originalScorecardData.get(scorecardId);\r\n\r\n        if (!originalData) {\r\n            return; // No original data to revert to\r\n        }\r\n\r\n        // Create the reverted scorecard data\r\n        const revertedScorecardData = {\r\n            ...currentQuestionConfig.scorecardData,\r\n            name: originalData.name,\r\n            criteria: [...originalData.criteria]\r\n        };\r\n\r\n        // Update the question config atomically\r\n        handleConfigChange({\r\n            scorecardData: revertedScorecardData\r\n        });\r\n\r\n        // Update the scorecard in schoolScorecards state\r\n        const updatedScorecards = schoolScorecards.map(sc =>\r\n            sc.id === scorecardId ? { ...sc, name: originalData.name, criteria: [...originalData.criteria] } : sc\r\n        );\r\n        setSchoolScorecards(updatedScorecards);\r\n\r\n        // Sync all linked scorecards to reflect the reverted changes\r\n        syncLinkedScorecards(scorecardId, originalData.name, originalData.criteria);\r\n    }, [currentQuestionConfig.scorecardData, originalScorecardData, handleConfigChange, schoolScorecards, syncLinkedScorecards]);\r\n\r\n    return (\r\n        <div className={`flex flex-col h-full relative ${className}`} key={`quiz-${taskId}-${isEditMode ? 'edit' : 'view'}`}>\r\n            {/* Scorecard delete confirmation modal */}\r\n            <ConfirmationDialog\r\n                show={showScorecardDeleteConfirm && !isPreviewMode}\r\n                title=\"Remove scorecard\"\r\n                message=\"Are you sure you want to remove this scorecard from this question? This will not affect other questions using this scorecard.\"\r\n                onConfirm={() => {\r\n                    removeScorecardFromSchoolScoreboards();\r\n                    setShowScorecardDeleteConfirm(false);\r\n                }}\r\n                onCancel={() => setShowScorecardDeleteConfirm(false)}\r\n                type=\"delete\"\r\n                confirmButtonText=\"Remove\"\r\n            />\r\n\r\n            {/* Question delete confirmation modal */}\r\n            <ConfirmationDialog\r\n                show={showDeleteConfirm && !isPreviewMode}\r\n                title=\"Delete Question\"\r\n                message=\"Are you sure you want to delete this question? This action cannot be undone.\"\r\n                onConfirm={deleteQuestion}\r\n                onCancel={() => setShowDeleteConfirm(false)}\r\n                type=\"delete\"\r\n            />\r\n\r\n            {/* Scorecard save confirmation modal */}\r\n            <ConfirmationDialog\r\n                show={showScorecardSaveConfirm && !isPreviewMode}\r\n                onConfirm={() => {\r\n                    performScorecardSave();\r\n                    setShowScorecardSaveConfirm(false);\r\n                }}\r\n                title=\"Are you sure you want to save?\"\r\n                message=\"These changes will be applied to all the questions across quizzes using this scorecard. If you want to make changes only to this question, you can duplicate the scorecard and add your changes there.\"\r\n                onCancel={() => setShowScorecardSaveConfirm(false)}\r\n                type=\"save\"\r\n                isLoading={isSavingScorecardRef.current}\r\n            />\r\n\r\n            {/* Publish Confirmation Dialog */}\r\n            <PublishConfirmationDialog\r\n                show={showPublishConfirmation}\r\n                title=\"Ready to publish?\"\r\n                message=\"After publishing, you won't be able to add or remove questions, but you can still edit existing ones\"\r\n                onConfirm={updateDraftQuiz}\r\n                onCancel={handleCancelPublish}\r\n                isLoading={isPublishing}\r\n                errorMessage={publishError}\r\n            />\r\n\r\n            {/* Loading indicator */}\r\n            {isLoadingQuestions && (\r\n                <div className=\"absolute inset-0 bg-[#1A1A1A] bg-opacity-80 z-10 flex items-center justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Content area with animation when a new question is added */}\r\n            <div className={`flex flex-1 gap-0 ${newQuestionAdded ? 'animate-new-question' : ''} ${isPreviewMode ? 'h-full' : ''}`}>\r\n                {isPreviewMode ? (\r\n                    <>\r\n                        <div\r\n                            className=\"w-full h-full\"\r\n                            onClick={(e) => e.stopPropagation()} // Stop events from bubbling up\r\n                            onMouseDown={(e) => e.stopPropagation()} // Stop mousedown events too\r\n                        >\r\n                            {MemoizedLearnerQuizView}\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {questions.length === 0 ? (\r\n                            <div className=\"w-full flex justify-center items-center\">\r\n                                <EmptyQuizPlaceholder />\r\n                            </div>\r\n                        ) : (\r\n                            <>\r\n                                {/* Left Sidebar - Questions List */}\r\n                                <div className=\"w-64 h-full bg-[#121212] border-r flex flex-col overflow-hidden\">\r\n                                    {/* Sidebar Header */}\r\n                                    <div className=\"p-4 border-b bg-[#0A0A0A] flex items-center justify-between\">\r\n                                        <h3 className=\"text-lg font-light text-white\">Questions</h3>\r\n                                        <div className={`px-3 py-1 rounded-full text-xs transition-all duration-300 ${questionCountHighlighted\r\n                                            ? 'bg-green-700 font-semibold shadow-lg animate-question-highlight'\r\n                                            : 'bg-[#2A2A2A] border-[#3A3A3A]'\r\n                                            } text-gray-300`}>\r\n                                            {questions.length}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Add Question Button */}\r\n                                    {!readOnly && status === 'draft' && (\r\n                                        <div className=\"p-3 border-b\">\r\n                                            <button\r\n                                                onClick={addQuestion}\r\n                                                className=\"w-full flex items-center justify-center px-4 py-2 text-sm text-black bg-white hover:bg-gray-100 rounded-md transition-colors cursor-pointer\"\r\n                                                disabled={readOnly}\r\n                                            >\r\n                                                <div className=\"w-4 h-4 rounded-full border border-black flex items-center justify-center mr-2\">\r\n                                                    <Plus size={10} className=\"text-black\" />\r\n                                                </div>\r\n                                                Add question\r\n                                            </button>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {/* Questions List */}\r\n                                    <div className=\"flex-1 overflow-y-auto\">\r\n                                        {questions.map((question, index) => (\r\n                                            <div\r\n                                                key={question.id}\r\n                                                className={`px-4 py-3 cursor-pointer flex items-center justify-between group border-l-2 ${index === currentQuestionIndex\r\n                                                    ? \"bg-[#222222] border-green-500\"\r\n                                                    : \"hover:bg-[#1A1A1A] border-transparent\"\r\n                                                    }`}\r\n                                                onClick={() => {\r\n                                                    if (checkUnsavedScorecardChanges()) {\r\n                                                        pendingScorecardActionRef.current = () => {\r\n                                                            setCurrentQuestionIndex(index);\r\n                                                            setActiveEditorTab('question');\r\n                                                            if (onQuestionChange && !isPreviewMode) {\r\n                                                                onQuestionChange(question.id);\r\n                                                            }\r\n                                                        };\r\n                                                        if (onQuestionChangeWithUnsavedScorecardChanges) {\r\n                                                            onQuestionChangeWithUnsavedScorecardChanges();\r\n                                                        }\r\n                                                        return;\r\n                                                    }\r\n\r\n                                                    setCurrentQuestionIndex(index);\r\n                                                    setActiveEditorTab('question');\r\n                                                    if (onQuestionChange && !isPreviewMode) {\r\n                                                        onQuestionChange(question.id);\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                <div className=\"flex items-center flex-1 min-w-0\">\r\n                                                    <div className=\"flex-1 min-w-0\">\r\n                                                        <div\r\n                                                            className={`text-sm ${index === currentQuestionIndex ? \"text-white\" : \"text-gray-300\"} break-words whitespace-normal`}\r\n                                                            data-testid=\"sidebar-question-label\"\r\n                                                        >\r\n                                                            {question.config.title}\r\n                                                        </div>\r\n                                                        <div className={`text-xs truncate ${index === currentQuestionIndex ? \"text-gray-300\" : \"text-gray-500\"\r\n                                                            }`}>\r\n                                                            {question.config.responseType === 'chat' ? 'Practice' : 'Exam'} • {question.config.questionType === 'objective' ? 'Objective' : 'Subjective'} • {question.config.inputType}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {/* Delete button - only show for current question and when not readonly */}\r\n                                                {!readOnly && status === 'draft' && index === currentQuestionIndex && (\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            setShowDeleteConfirm(true);\r\n                                                        }}\r\n                                                        className=\"opacity-0 cursor-pointer group-hover:opacity-100 ml-2 p-1 text-red-400 hover:text-red-300 transition-all duration-200\"\r\n                                                        aria-label=\"Delete question\"\r\n                                                    >\r\n                                                        <Trash2 size={16} />\r\n                                                    </button>\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Main Content Area */}\r\n                                <div className=\"flex-1 flex flex-col\">\r\n                                    {/* Question Configuration Header */}\r\n                                    <div className=\"flex flex-col space-y-2 p-4 border-b bg-[#111111]\">\r\n                                        <div className=\"flex items-center w-full\">\r\n                                            <span className=\"text-gray-500 text-sm flex-shrink-0 w-1/6 mr-2 flex items-center hover:bg-[#2A2A2A] px-3 py-2 rounded-md\">\r\n                                                <span className=\"mr-2\"><Tag size={16} /></span>\r\n                                                Title\r\n                                            </span>\r\n                                            <span\r\n                                                className=\"text-base text-white w-full outline-none p-1 rounded-md\"\r\n                                                contentEditable={!readOnly}\r\n                                                suppressContentEditableWarning={true}\r\n                                                onBlur={handleQuestionTitleBlur}\r\n                                                onInput={handleQuestionTitleInput}\r\n                                                onKeyDown={handleQuestionTitleKeyDown}\r\n                                                onClick={e => e.stopPropagation()}\r\n                                                data-testid=\"question-title-span\"\r\n                                            >\r\n                                                {currentQuestionConfig.title}\r\n                                            </span>\r\n                                        </div>\r\n                                        <div className=\"flex items-center\">\r\n                                            <Dropdown\r\n                                                icon={<Sparkles size={16} />}\r\n                                                title=\"Purpose\"\r\n                                                options={questionPurposeOptions}\r\n                                                selectedOption={selectedPurpose}\r\n                                                onChange={handlePurposeChange}\r\n                                                disabled={readOnly}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"flex items-center\">\r\n                                            <Dropdown\r\n                                                icon={<HelpCircle size={16} />}\r\n                                                title=\"Question Type\"\r\n                                                options={questionTypeOptions}\r\n                                                selectedOption={selectedQuestionType}\r\n                                                onChange={handleQuestionTypeChange}\r\n                                                disabled={readOnly}\r\n                                            />\r\n                                        </div>\r\n                                        <Dropdown\r\n                                            icon={<Pen size={16} />}\r\n                                            title=\"Answer Type\"\r\n                                            options={answerTypeOptions}\r\n                                            selectedOption={selectedAnswerType}\r\n                                            onChange={handleAnswerTypeChange}\r\n                                            disabled={readOnly}\r\n                                        />\r\n                                        {selectedAnswerType.value == 'code' && (\r\n                                            <div className=\"flex items-center\">\r\n                                                <div className={`w-full ${highlightedField === 'codingLanguage' ? 'outline outline-2 outline-red-400 shadow-md shadow-red-900/50 animate-pulse bg-[#2D1E1E] rounded-md' : ''}`}>\r\n                                                    <Dropdown\r\n                                                        icon={<Code size={16} />}\r\n                                                        title=\"Languages\"\r\n                                                        options={codingLanguageOptions}\r\n                                                        selectedOptions={selectedCodingLanguages}\r\n                                                        onChange={handleCodingLanguageChange}\r\n                                                        disabled={readOnly}\r\n                                                        multiselect={true}\r\n                                                        placeholder=\"Select one or more languages\"\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* Segmented control for editor tabs */}\r\n                                    <div className=\"flex justify-center py-4\">\r\n                                        <div className=\"inline-flex bg-[#222222] rounded-lg p-1\">\r\n                                            <button\r\n                                                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium cursor-pointer ${activeEditorTab === 'question'\r\n                                                    ? 'bg-[#333333] text-white'\r\n                                                    : 'text-gray-400 hover:text-white'\r\n                                                    }`}\r\n                                                onClick={() => setActiveEditorTab('question')}\r\n                                            >\r\n                                                <HelpCircle size={16} className=\"mr-2\" />\r\n                                                Question\r\n                                            </button>\r\n                                            {selectedQuestionType.value !== 'subjective' ? (\r\n                                                <button\r\n                                                    className={`flex items-center px-4 py-2 rounded-md text-sm font-medium cursor-pointer ${activeEditorTab === 'answer'\r\n                                                        ? 'bg-[#333333] text-white'\r\n                                                        : 'text-gray-400 hover:text-white'\r\n                                                        }`}\r\n                                                    onClick={() => setActiveEditorTab('answer')}\r\n                                                >\r\n                                                    <Check size={16} className=\"mr-2\" />\r\n                                                    Correct Answer\r\n                                                </button>\r\n                                            ) : (\r\n                                                <button\r\n                                                    className={`flex items-center px-4 py-2 rounded-md text-sm font-medium cursor-pointer ${activeEditorTab === 'scorecard'\r\n                                                        ? 'bg-[#333333] text-white'\r\n                                                        : 'text-gray-400 hover:text-white'\r\n                                                        }`}\r\n                                                    onClick={() => setActiveEditorTab('scorecard')}\r\n                                                >\r\n                                                    <ClipboardCheck size={16} className=\"mr-2\" />\r\n                                                    Scorecard\r\n                                                </button>\r\n                                            )}\r\n                                            <button\r\n                                                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium cursor-pointer ${activeEditorTab === 'knowledge'\r\n                                                    ? 'bg-[#333333] text-white'\r\n                                                    : 'text-gray-400 hover:text-white'\r\n                                                    }`}\r\n                                                onClick={() => setActiveEditorTab('knowledge')}\r\n                                            >\r\n                                                <BookOpen size={16} className=\"mr-2\" />\r\n                                                AI Training Resources\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Editor Content */}\r\n                                    <div className=\"flex-1 overflow-hidden\">\r\n                                        {/* Show content based on active tab */}\r\n                                        {activeEditorTab === 'question' ? (\r\n                                            <div className=\"w-full h-full\">\r\n                                                <div className={`editor-container h-full min-h-screen overflow-y-auto overflow-hidden relative z-0 ${highlightedField === 'question' ? 'm-2 outline outline-2 outline-red-400 shadow-md shadow-red-900/50 animate-pulse bg-[#2D1E1E]' : ''}`}>\r\n                                                    <BlockNoteEditor\r\n                                                        key={`quiz-editor-question-${currentQuestionIndex}`}\r\n                                                        initialContent={currentQuestionContent}\r\n                                                        onChange={handleQuestionContentChange}\r\n                                                        isDarkMode={isDarkMode}\r\n                                                        readOnly={readOnly}\r\n                                                        onEditorReady={setEditorInstance}\r\n                                                        className=\"quiz-editor\"\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        ) : activeEditorTab === 'answer' ? (\r\n                                            <div className={`editor-container h-full min-h-screen overflow-y-auto overflow-hidden relative z-0 ${highlightedField === 'answer' ? 'm-2 outline outline-2 outline-red-400 shadow-md shadow-red-900/50 animate-pulse bg-[#2D1E1E]' : ''}`}\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    // Ensure the correct answer editor keeps focus\r\n                                                    if (correctAnswerEditorRef.current) {\r\n                                                        try {\r\n                                                            // Try to focus the editor\r\n                                                            correctAnswerEditorRef.current.focusEditor();\r\n                                                        } catch (err) {\r\n                                                            console.error(\"Error focusing correct answer editor:\", err);\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                onMouseDown={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                }}\r\n                                            >\r\n                                                <BlockNoteEditor\r\n                                                    key={`correct-answer-editor-${currentQuestionIndex}`}\r\n                                                    initialContent={currentQuestionConfig.correctAnswer}\r\n                                                    onChange={handleCorrectAnswerChange}\r\n                                                    isDarkMode={isDarkMode}\r\n                                                    readOnly={readOnly}\r\n                                                    onEditorReady={setCorrectAnswerEditorInstance}\r\n                                                    className=\"correct-answer-editor\"\r\n                                                    placeholder=\"Enter the correct answer here\"\r\n                                                    allowMedia={false}\r\n                                                />\r\n                                            </div>\r\n                                        ) : activeEditorTab === 'knowledge' ? (\r\n                                            <div className=\"w-full h-full flex flex-row overflow-y-auto p-4\">\r\n                                                {/* Left column with callout (20-30% width) */}\r\n                                                <div className=\"w-[20%]\">\r\n                                                    <div className=\"bg-[#222222] p-3 rounded-md\">\r\n                                                        <BookOpen size={16} className=\"text-amber-400 mb-2\" />\r\n                                                        <div>\r\n                                                            <p className=\"text-gray-400 text-xs leading-tight mb-2\">\r\n                                                                These resources are <span className=\"font-bold text-white\">optional</span> and will <span className=\"font-bold text-white\">not be shown to learners</span> but can be used by AI to provide more accurate and helpful feedback\r\n                                                            </p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {/* Right column with linker and editor (70-80% width) */}\r\n                                                <div className=\"w-[80%] flex flex-col\">\r\n                                                    {readOnly &&\r\n                                                        (!currentQuestion?.config?.linkedMaterialIds?.length &&\r\n                                                            (!currentQuestion?.config?.knowledgeBaseBlocks?.length ||\r\n                                                                extractTextFromBlocks(currentQuestion?.config?.knowledgeBaseBlocks || []).trim().length === 0)) ? (\r\n                                                        <div className=\"w-full flex flex-col items-center justify-center p-8 text-center rounded-lg bg-[#1A1A1A] h-full\">\r\n                                                            <div className=\"max-w-md\">\r\n                                                                <h3 className=\"text-xl font-light text-white mb-3\">No knowledge base found</h3>\r\n                                                                <p className=\"text-gray-400 mb-6\">\r\n                                                                    This question does not have any knowledge base attached to it\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div className=\"h-full\">\r\n                                                            {/* Add learning material selection component */}\r\n                                                            <div className=\"mb-4 ml-12\">\r\n                                                                <LearningMaterialLinker\r\n                                                                    courseId={courseId || ''}\r\n                                                                    linkedMaterialIds={currentQuestion?.config?.linkedMaterialIds || []}\r\n                                                                    readOnly={readOnly}\r\n                                                                    onMaterialsChange={(linkedMaterialIds) => {\r\n                                                                        // Update the question config with the new linked material IDs\r\n                                                                        const updatedQuestions = [...questions];\r\n                                                                        const currentQuestion = updatedQuestions[currentQuestionIndex];\r\n                                                                        const currentConfig = currentQuestion.config || {};\r\n\r\n                                                                        updatedQuestions[currentQuestionIndex] = {\r\n                                                                            ...currentQuestion,\r\n                                                                            config: {\r\n                                                                                ...currentConfig,\r\n                                                                                linkedMaterialIds: linkedMaterialIds\r\n                                                                            }\r\n                                                                        };\r\n\r\n                                                                        setQuestions(updatedQuestions);\r\n\r\n                                                                        if (onChange) {\r\n                                                                            onChange(updatedQuestions);\r\n                                                                        }\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n\r\n                                                            <div className=\"w-full flex-1 bg-[#1A1A1A] rounded-md overflow-hidden relative z-0\"\r\n                                                                onClick={(e) => {\r\n                                                                    e.stopPropagation();\r\n                                                                    // Ensure the knowledge base editor keeps focus\r\n                                                                    if (knowledgeBaseEditorRef.current) {\r\n                                                                        try {\r\n                                                                            // Try to focus the editor\r\n                                                                            knowledgeBaseEditorRef.current.focusEditor();\r\n                                                                        } catch (err) {\r\n                                                                            console.error(\"Error focusing knowledge base editor:\", err);\r\n                                                                        }\r\n                                                                    }\r\n                                                                }}\r\n                                                                onMouseDown={(e) => {\r\n                                                                    e.stopPropagation();\r\n                                                                }}\r\n                                                            >\r\n                                                                <BlockNoteEditor\r\n                                                                    key={`knowledge-base-editor-${currentQuestionIndex}`}\r\n                                                                    initialContent={currentQuestionConfig.knowledgeBaseBlocks || []}\r\n                                                                    onChange={(content) => {\r\n                                                                        // Store blocks\r\n                                                                        const updatedQuestions = [...questions];\r\n                                                                        updatedQuestions[currentQuestionIndex] = {\r\n                                                                            ...updatedQuestions[currentQuestionIndex],\r\n                                                                            config: {\r\n                                                                                ...updatedQuestions[currentQuestionIndex].config,\r\n                                                                                knowledgeBaseBlocks: content\r\n                                                                            }\r\n                                                                        };\r\n                                                                        setQuestions(updatedQuestions);\r\n\r\n                                                                        if (onChange) {\r\n                                                                            onChange(updatedQuestions);\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    isDarkMode={isDarkMode}\r\n                                                                    readOnly={readOnly}\r\n                                                                    onEditorReady={setKnowledgeBaseEditorInstance}\r\n                                                                    className=\"knowledge-base-editor\"\r\n                                                                    placeholder=\"Link existing materials using the button above or add new material here\"\r\n                                                                    allowMedia={false}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        ) : (\r\n                                            // Scorecard tab - show empty table if scorecard is selected, otherwise show placeholder\r\n                                            currentQuestionConfig.scorecardData ? (\r\n                                                <div className=\"h-full overflow-y-auto w-full p-4\">\r\n                                                    <Scorecard\r\n                                                        ref={scorecardRef}\r\n                                                        name={currentQuestionConfig.scorecardData?.name || scorecardTitle}\r\n                                                        criteria={currentQuestionConfig.scorecardData?.criteria || []}\r\n                                                        onDelete={() => {\r\n                                                            // Check if scorecard is used by multiple questions\r\n                                                            const scorecardForQuestion = questions[currentQuestionIndex].config.scorecardData;\r\n                                                            if (scorecardForQuestion) {\r\n                                                                const questionsUsingThisScorecard = questions.filter(q =>\r\n                                                                    q.config.scorecardData && q.config.scorecardData.id === scorecardForQuestion.id\r\n                                                                );\r\n                                                                setScorecardUsedByMultiple(questionsUsingThisScorecard.length > 1);\r\n                                                            }\r\n                                                            setShowScorecardDeleteConfirm(true);\r\n                                                        }}\r\n                                                        new={currentQuestionConfig.scorecardData?.new}\r\n                                                        readOnly={readOnly}\r\n                                                        linked={isLinkedScorecard(currentQuestionConfig.scorecardData)}\r\n                                                        scorecardId={currentQuestionConfig.scorecardData?.id}\r\n                                                        allQuestions={questions}\r\n                                                        onSave={handleSaveScorecardChanges}\r\n                                                        originalName={currentQuestionConfig.scorecardData?.id ? originalScorecardData.get(currentQuestionConfig.scorecardData.id)?.name : undefined}\r\n                                                        originalCriteria={currentQuestionConfig.scorecardData?.id ? originalScorecardData.get(currentQuestionConfig.scorecardData.id)?.criteria : undefined}\r\n                                                        onRevert={handleScorecardRevert}\r\n                                                        onDuplicate={async () => {\r\n                                                            if (!currentQuestionConfig.scorecardData) {\r\n                                                                return;\r\n                                                            }\r\n\r\n                                                            const originalScorecard = currentQuestionConfig.scorecardData;\r\n\r\n                                                            try {\r\n                                                                // Use the reusable function to create duplicated scorecard\r\n                                                                const createdScorecard = await createScorecard(\r\n                                                                    `${originalScorecard.name} (Copy)`,\r\n                                                                    originalScorecard.criteria\r\n                                                                );\r\n\r\n                                                                // Create a duplicate scorecard with the backend ID\r\n                                                                const duplicatedScorecard: ScorecardTemplate = {\r\n                                                                    id: createdScorecard.id, // Use the ID returned from backend\r\n                                                                    name: createdScorecard.title,\r\n                                                                    new: true, // Mark as newly created to make it unlinked\r\n                                                                    is_template: false,\r\n                                                                    criteria: [...originalScorecard.criteria] // Deep copy the criteria\r\n                                                                };\r\n\r\n                                                                // Update the current question to use the duplicated scorecard\r\n                                                                handleConfigChange({\r\n                                                                    scorecardData: duplicatedScorecard\r\n                                                                });\r\n\r\n                                                                // Add the duplicated scorecard to school scorecards\r\n                                                                const updatedScorecards = [...schoolScorecards, duplicatedScorecard];\r\n                                                                setSchoolScorecards(updatedScorecards);\r\n\r\n                                                                // Add the new scorecard to originalScorecardData as the baseline for change detection\r\n                                                                const updatedOriginalData = new Map(originalScorecardData);\r\n                                                                updatedOriginalData.set(duplicatedScorecard.id, {\r\n                                                                    name: duplicatedScorecard.name,\r\n                                                                    criteria: JSON.parse(JSON.stringify(duplicatedScorecard.criteria))\r\n                                                                });\r\n                                                                setOriginalScorecardData(updatedOriginalData);\r\n\r\n                                                                // Focus on the scorecard name for editing\r\n                                                                setTimeout(() => {\r\n                                                                    scorecardRef.current?.focusName();\r\n                                                                }, 100);\r\n\r\n                                                            } catch (error) {\r\n                                                                console.error('Error duplicating scorecard:', error);\r\n\r\n                                                                // Show error toast\r\n                                                                setToastTitle(\"Duplication Failed\");\r\n                                                                setToastMessage(\"Failed to duplicate scorecard. Please try again.\");\r\n                                                                setToastEmoji(\"❌\");\r\n                                                                setShowToast(true);\r\n                                                            }\r\n                                                        }}\r\n                                                        onNameChange={(newName) => {\r\n                                                            if (!currentQuestionConfig.scorecardData) {\r\n                                                                return;\r\n                                                            }\r\n\r\n                                                            const currentScorecardData = currentQuestionConfig.scorecardData;\r\n\r\n                                                            // Update the title of the current scorecard\r\n                                                            const updatedScorecardData = {\r\n                                                                ...currentScorecardData,\r\n                                                                name: newName\r\n                                                            };\r\n\r\n                                                            handleConfigChange({\r\n                                                                scorecardData: updatedScorecardData\r\n                                                            });\r\n\r\n                                                            // Update the scorecard in schoolScorecards state\r\n                                                            const updatedScorecards = schoolScorecards.map(sc =>\r\n                                                                sc.id === currentScorecardData.id ? { ...sc, name: newName } : sc\r\n                                                            );\r\n                                                            setSchoolScorecards(updatedScorecards);\r\n\r\n                                                            // sync all linked scorecards to reflect the name change\r\n                                                            syncLinkedScorecards(currentScorecardData.id, newName);\r\n                                                        }}\r\n                                                        onChange={(updatedCriteria) => {\r\n                                                            if (!currentQuestionConfig.scorecardData) {\r\n                                                                return;\r\n                                                            }\r\n\r\n                                                            const currentScorecardData = currentQuestionConfig.scorecardData;\r\n\r\n                                                            // Update the current question's scorecard\r\n                                                            const updatedScorecardData = {\r\n                                                                ...currentScorecardData,\r\n                                                                criteria: updatedCriteria\r\n                                                            };\r\n\r\n                                                            handleConfigChange({\r\n                                                                scorecardData: updatedScorecardData\r\n                                                            });\r\n\r\n                                                            // Update the scorecard in schoolScorecards state\r\n                                                            const updatedScorecards = schoolScorecards.map(sc =>\r\n                                                                sc.id === currentScorecardData.id ? { ...sc, criteria: updatedCriteria } : sc\r\n                                                            );\r\n                                                            setSchoolScorecards(updatedScorecards);\r\n\r\n                                                            // sync all linked scorecards to reflect the criteria changes\r\n                                                            syncLinkedScorecards(currentScorecardData.id, undefined, updatedCriteria);\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <div className=\"w-full h-full flex flex-col items-center justify-center p-8 text-center\">\r\n                                                    <div className=\"max-w-md\">\r\n                                                        <h3 className=\"text-xl font-light text-white mb-3\">What is a scorecard?</h3>\r\n                                                        <p className=\"text-gray-400 mb-6\">\r\n                                                            A scorecard is a set of parameters used to grade the answer to an open-ended question - either use one of our templates or create your own\r\n                                                        </p>\r\n                                                        <button\r\n                                                            className=\"flex items-center px-5 py-2.5 text-sm text-black bg-white hover:bg-gray-100 rounded-md transition-colors cursor-pointer mx-auto\"\r\n                                                            ref={scorecardButtonRef}\r\n                                                            onClick={handleOpenScorecardDialog}\r\n                                                            disabled={readOnly}\r\n                                                        >\r\n                                                            <div className=\"w-5 h-5 rounded-full border border-black flex items-center justify-center mr-2\">\r\n                                                                <Plus size={12} className=\"text-black\" />\r\n                                                            </div>\r\n                                                            Add a scorecard\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n            {/* Scorecard Templates Dialog */}\r\n            <ScorecardPickerDialog\r\n                key={`scorecard-picker-${schoolScorecards.length}`}\r\n                isOpen={showScorecardDialog}\r\n                onClose={() => setShowScorecardDialog(false)}\r\n                onCreateNew={handleCreateNewScorecard}\r\n                onSelectTemplate={handleSelectScorecardTemplate}\r\n                position={scorecardDialogPosition || undefined}\r\n                schoolScorecards={schoolScorecards}\r\n            />\r\n\r\n            {/* Toast for language combination validation */}\r\n            <Toast\r\n                show={showToast}\r\n                title={toastTitle}\r\n                description={toastMessage}\r\n                emoji={toastEmoji}\r\n                onClose={() => setShowToast(false)}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\nQuizEditor.displayName = 'QuizEditor';\r\nexport default QuizEditor;"],"names":[],"mappings":"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","debugId":null}}]
}