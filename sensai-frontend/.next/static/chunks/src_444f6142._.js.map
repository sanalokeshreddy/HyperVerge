{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/lib/auth.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useSession } from \"next-auth/react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// Global auth state outside React's lifecycle\r\n// This ensures authentication is managed once per browser session\r\nconst globalAuthState = {\r\n  hasLoggedAuthentication: false,\r\n  knownUserIds: new Set<string>()\r\n};\r\n\r\n// Type declarations are now in /src/types/next-auth.d.ts\r\n\r\nexport const useAuth = () => {\r\n  const { data: session, status } = useSession();\r\n  const [authState, setAuthState] = useState({\r\n    isAuthenticated: false,\r\n    isLoading: true,\r\n    user: null as any\r\n  });\r\n  \r\n  // Process session changes in an effect to control when it happens\r\n  useEffect(() => {\r\n    const isAuthenticated = status === \"authenticated\";\r\n    const isLoading = status === \"loading\";\r\n    \r\n    // Only process authenticated sessions\r\n    if (isAuthenticated && session?.user) {\r\n      const userId = session.user.id;\r\n      \r\n      // Log authentication exactly once per unique user ID\r\n      if (userId && !globalAuthState.knownUserIds.has(userId)) {\r\n        globalAuthState.knownUserIds.add(userId);\r\n      } else if (!userId && !globalAuthState.hasLoggedAuthentication) {\r\n        globalAuthState.hasLoggedAuthentication = true;\r\n      }\r\n    }\r\n    \r\n    // Update the state once\r\n    setAuthState({\r\n      isAuthenticated,\r\n      isLoading,\r\n      user: session?.user\r\n    });\r\n  }, [session, status]);\r\n\r\n  return authState;\r\n};\r\n\r\ninterface GoogleUser {\r\n  email: string;\r\n  name?: string;\r\n  given_name?: string;\r\n  family_name?: string;\r\n  image?: string;\r\n  id?: string;\r\n}\r\n\r\ninterface AuthCredentials {\r\n  user: GoogleUser;\r\n  account: {\r\n    access_token?: string;\r\n    id_token?: string;\r\n    provider?: string;\r\n  };\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAEA;AACA;;AAHA;;;AAKA,8CAA8C;AAC9C,kEAAkE;AAClE,MAAM,kBAAkB;IACtB,yBAAyB;IACzB,cAAc,IAAI;AACpB;AAIO,MAAM,UAAU;;IACrB,MAAM,EAAE,MAAM,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,6PAAA,CAAA,aAAU,AAAD;IAC3C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;QACzC,iBAAiB;QACjB,WAAW;QACX,MAAM;IACR;IAEA,kEAAkE;IAClE,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;6BAAE;YACR,MAAM,kBAAkB,WAAW;YACnC,MAAM,YAAY,WAAW;YAE7B,sCAAsC;YACtC,IAAI,oBAAmB,oBAAA,8BAAA,QAAS,IAAI,GAAE;gBACpC,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE;gBAE9B,qDAAqD;gBACrD,IAAI,UAAU,CAAC,gBAAgB,YAAY,CAAC,GAAG,CAAC,SAAS;oBACvD,gBAAgB,YAAY,CAAC,GAAG,CAAC;gBACnC,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,uBAAuB,EAAE;oBAC9D,gBAAgB,uBAAuB,GAAG;gBAC5C;YACF;YAEA,wBAAwB;YACxB,aAAa;gBACX;gBACA;gBACA,IAAI,EAAE,oBAAA,8BAAA,QAAS,IAAI;YACrB;QACF;4BAAG;QAAC;QAAS;KAAO;IAEpB,OAAO;AACT;GAlCa;;QACuB,6PAAA,CAAA,aAAU","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/lib/course.ts"],"sourcesContent":["import { Task, Milestone } from \"@/types\";\r\nimport { Module, ModuleItem } from \"@/types/course\";\r\n\r\n/**\r\n * Transforms course milestones to module format for consistent UI rendering\r\n * \r\n * @param milestones - Array of course milestones with tasks\r\n * @returns Array of modules with their items\r\n */\r\nexport function transformMilestonesToModules(milestones: Milestone[] | undefined): Module[] {\r\n  if (!milestones || !Array.isArray(milestones)) {\r\n    return [];\r\n  }\r\n\r\n  const transformedModules = milestones.map((milestone: Milestone) => {\r\n    // Map tasks to module items if they exist\r\n    const moduleItems: ModuleItem[] = [];\r\n\r\n    if (milestone.tasks && Array.isArray(milestone.tasks)) {\r\n      milestone.tasks.forEach((task: Task) => {\r\n        if (task.type === 'learning_material') {\r\n          moduleItems.push({\r\n            id: task.id.toString(),\r\n            title: task.title,\r\n            position: task.ordering,\r\n            type: 'material',\r\n            content: task.content || [], // Use content if available or empty array\r\n            status: task.status,\r\n            scheduled_publish_at: task.scheduled_publish_at,\r\n            isGenerating: task.is_generating\r\n          });\r\n        } else if (task.type === 'quiz') {\r\n          moduleItems.push({\r\n            id: task.id.toString(),\r\n            title: task.title,\r\n            position: task.ordering,\r\n            type: 'quiz',\r\n            questions: task.questions || [], // Use questions if available or empty array\r\n            status: task.status,\r\n            numQuestions: task.num_questions,\r\n            scheduled_publish_at: task.scheduled_publish_at,\r\n            isGenerating: task.is_generating\r\n          });\r\n        }\r\n      });\r\n\r\n      // Sort items by position/ordering\r\n      moduleItems.sort((a, b) => a.position - b.position);\r\n    }\r\n\r\n    return {\r\n      id: milestone.id.toString(),\r\n      title: milestone.name,\r\n      position: milestone.ordering,\r\n      items: moduleItems,\r\n      isExpanded: false,\r\n      backgroundColor: `${milestone.color}80`, // Add 50% opacity for UI display\r\n      unlockAt: milestone.unlock_at\r\n    };\r\n  });\r\n\r\n  // Sort modules by position/ordering\r\n  const sortedModules = transformedModules.sort((a, b) => a.position - b.position);\r\n  \r\n  // Set the first module to be expanded by default if modules exist\r\n  if (sortedModules.length > 0) {\r\n    sortedModules[0].isExpanded = true;\r\n  }\r\n  \r\n  return sortedModules;\r\n}\r\n\r\n/**\r\n * Transforms a course object with milestones to modules format\r\n * \r\n * @param course - Course object with milestones array\r\n * @returns Array of modules\r\n */\r\n\r\nexport function transformCourseToModules(course: { milestones?: Milestone[] } | null | undefined): Module[] {\r\n  if (!course) {\r\n    return [];\r\n  }\r\n\r\n  return transformMilestonesToModules(course.milestones);\r\n}"],"names":[],"mappings":";;;;AASO,SAAS,6BAA6B,UAAmC;IAC9E,IAAI,CAAC,cAAc,CAAC,MAAM,OAAO,CAAC,aAAa;QAC7C,OAAO,EAAE;IACX;IAEA,MAAM,qBAAqB,WAAW,GAAG,CAAC,CAAC;QACzC,0CAA0C;QAC1C,MAAM,cAA4B,EAAE;QAEpC,IAAI,UAAU,KAAK,IAAI,MAAM,OAAO,CAAC,UAAU,KAAK,GAAG;YACrD,UAAU,KAAK,CAAC,OAAO,CAAC,CAAC;gBACvB,IAAI,KAAK,IAAI,KAAK,qBAAqB;oBACrC,YAAY,IAAI,CAAC;wBACf,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;wBACvB,MAAM;wBACN,SAAS,KAAK,OAAO,IAAI,EAAE;wBAC3B,QAAQ,KAAK,MAAM;wBACnB,sBAAsB,KAAK,oBAAoB;wBAC/C,cAAc,KAAK,aAAa;oBAClC;gBACF,OAAO,IAAI,KAAK,IAAI,KAAK,QAAQ;oBAC/B,YAAY,IAAI,CAAC;wBACf,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;wBACvB,MAAM;wBACN,WAAW,KAAK,SAAS,IAAI,EAAE;wBAC/B,QAAQ,KAAK,MAAM;wBACnB,cAAc,KAAK,aAAa;wBAChC,sBAAsB,KAAK,oBAAoB;wBAC/C,cAAc,KAAK,aAAa;oBAClC;gBACF;YACF;YAEA,kCAAkC;YAClC,YAAY,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ;QACpD;QAEA,OAAO;YACL,IAAI,UAAU,EAAE,CAAC,QAAQ;YACzB,OAAO,UAAU,IAAI;YACrB,UAAU,UAAU,QAAQ;YAC5B,OAAO;YACP,YAAY;YACZ,iBAAiB,AAAC,GAAkB,OAAhB,UAAU,KAAK,EAAC;YACpC,UAAU,UAAU,SAAS;QAC/B;IACF;IAEA,oCAAoC;IACpC,MAAM,gBAAgB,mBAAmB,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ;IAE/E,kEAAkE;IAClE,IAAI,cAAc,MAAM,GAAG,GAAG;QAC5B,aAAa,CAAC,EAAE,CAAC,UAAU,GAAG;IAChC;IAEA,OAAO;AACT;AASO,SAAS,yBAAyB,MAAuD;IAC9F,IAAI,CAAC,QAAQ;QACX,OAAO,EAAE;IACX;IAEA,OAAO,6BAA6B,OAAO,UAAU;AACvD","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/lib/api.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useAuth } from \"./auth\";\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { Task, Milestone } from \"@/types\";\r\nimport { Module } from \"@/types/course\";\r\nimport { transformMilestonesToModules } from \"./course\";\r\n\r\n// Define course interface based on your backend response\r\nexport interface Course {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  coverImage?: string;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n  moduleCount?: number;\r\n  role?: string;\r\n  org?: {\r\n    id: number;\r\n    name: string;\r\n    slug: string;\r\n  };\r\n  org_id?: number;\r\n  // Add other fields as needed\r\n}\r\n\r\n// School interface (mapped from organization in the API)\r\nexport interface School {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n  url?: string;\r\n  role?: string;\r\n  slug?: string;\r\n  // Add other fields as needed\r\n}\r\n\r\n/**\r\n * Hook to fetch courses for the current user\r\n */\r\nexport function useCourses() {\r\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\r\n  const [courses, setCourses] = useState<Course[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  \r\n  // Fetch courses immediately when user ID is available\r\n  useEffect(() => {\r\n    if (!isAuthenticated || !user?.id || authLoading) {\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    \r\n    // Simple fetch without caching\r\n    fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/${user.id}/courses`)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Request failed: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        // Transform the API response to match the expected format\r\n        const formattedCourses: Course[] = data.map((course: any) => ({\r\n          id: course.id,\r\n          title: course.name,\r\n          role: course.role,\r\n          cohort_id: course.cohort_id,\r\n          org: course.org,\r\n          org_id: course.org?.id,\r\n          coverImage: course.coverImage,\r\n          createdAt: course.createdAt,\r\n          updatedAt: course.updatedAt\r\n        }));\r\n        \r\n        setCourses(formattedCourses);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error fetching courses:', err);\r\n        setError(err);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [user?.id, isAuthenticated, authLoading]);\r\n  \r\n  return {\r\n    courses,\r\n    isLoading,\r\n    error\r\n  };\r\n}\r\n\r\n/**\r\n * Hook to fetch schools for the current user\r\n */\r\nexport function useSchools() {\r\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\r\n  const [schools, setSchools] = useState<School[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  \r\n  // Fetch schools immediately when user ID is available\r\n  useEffect(() => {\r\n    if (!isAuthenticated || !user?.id || authLoading) {\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    \r\n    // Simple fetch without caching\r\n    fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/${user.id}/orgs`)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Request failed: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        // Transform the API response to match the expected format\r\n        const formattedSchools: School[] = data.map((org: any) => ({\r\n          id: org.id,\r\n          name: org.name,\r\n          description: org.description,\r\n          url: org.url,\r\n          role: org.role,\r\n          createdAt: org.createdAt,\r\n          updatedAt: org.updatedAt\r\n        }));\r\n        \r\n        setSchools(formattedSchools);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error fetching schools:', err);\r\n        setError(err);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [user?.id, isAuthenticated, authLoading]);\r\n  \r\n  return {\r\n    schools,\r\n    isLoading,\r\n    error\r\n  };\r\n} \r\n\r\n/**\r\n * Fetches and processes completion data for a user in a cohort\r\n * @param cohortId - The ID of the cohort\r\n * @param userId - The ID of the user\r\n * @returns Object containing task and question completion data\r\n */\r\nexport const getCompletionData = async (cohortId: number, userId: string): Promise<{\r\n  taskCompletions: Record<string, boolean>,\r\n  questionCompletions: Record<string, Record<string, boolean>>\r\n}> => {\r\n  const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/cohorts/${cohortId}/completion?user_id=${userId}`);\r\n\r\n  if (!response.ok) {\r\n      throw new Error(`Failed to fetch completion data: ${response.status}`);\r\n  }\r\n\r\n  const completionData = await response.json();\r\n\r\n  // Process completion data for tasks\r\n  const taskCompletions: Record<string, boolean> = {};\r\n  // Process completion data for questions\r\n  const questionCompletions: Record<string, Record<string, boolean>> = {};\r\n\r\n  // Iterate through each task in the completion data\r\n  Object.entries(completionData).forEach(([taskId, taskData]: [string, any]) => {\r\n      // Store task completion status\r\n      taskCompletions[taskId] = taskData.is_complete;\r\n\r\n      // Store question completion status if questions exist\r\n      if (taskData.questions && taskData.questions.length > 0) {\r\n          const questionsMap: Record<string, boolean> = {};\r\n\r\n          taskData.questions.forEach((question: any) => {\r\n              questionsMap[question.question_id.toString()] = question.is_complete;\r\n          });\r\n\r\n          questionCompletions[taskId] = questionsMap;\r\n      }\r\n  });\r\n\r\n  return { taskCompletions, questionCompletions };\r\n}; \r\n\r\n/**\r\n * Fetches course data and transforms it into modules\r\n * @param courseId - The ID of the course\r\n * @param baseUrl - The base URL for the API request (defaults to NEXT_PUBLIC_BACKEND_URL)\r\n * @returns Object containing the course data and transformed modules\r\n * \r\n * NOTE: This is a client-side function. For server components, use the version in server-api.ts\r\n */\r\nexport const getCourseModules = async (courseId: string, baseUrl?: string): Promise<{\r\n  courseData: any,\r\n  modules: any[]\r\n}> => {\r\n  // Determine which URL to use (server-side vs client-side)\r\n  const apiUrl = baseUrl || process.env.NEXT_PUBLIC_BACKEND_URL;\r\n  \r\n  const response = await fetch(`${apiUrl}/courses/${courseId}`, {\r\n    cache: 'no-store'\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch course data: ${response.status}`);\r\n  }\r\n\r\n  const courseData = await response.json();\r\n  \r\n  // Use the shared utility function to transform the milestones to modules\r\n  const modules = transformMilestonesToModules(courseData.milestones);\r\n\r\n  return { courseData, modules };\r\n}; \r\n\r\n\r\nexport const addModule = async (courseId: string, schoolId: string, modules: Module[], setModules: (modules: Module[]) => void, setActiveModuleId: (moduleId: string) => void, lastUsedColorIndex: number, setLastUsedColorIndex: (colorIndex: number) => void) => {\r\n  // Generate a diverse set of theme-compatible colors for dark mode\r\n  const getRandomPastelColor = () => {\r\n      // Predefined set of diverse dark mode friendly colors in hex format\r\n      const themeColors = [\r\n          '#2d3748',    // Slate blue\r\n          '#433c4c',    // Deep purple\r\n          '#4a5568',    // Cool gray\r\n          '#312e51',    // Indigo\r\n          '#364135',    // Forest green\r\n          '#4c393a',    // Burgundy\r\n          '#334155',    // Navy blue\r\n          '#553c2d',    // Rust brown\r\n          '#37303f',    // Plum\r\n          '#3c4b64',    // Steel blue\r\n          '#463c46',    // Mauve\r\n          '#3c322d',    // Coffee\r\n      ];\r\n\r\n      // Ensure we don't pick a color similar to the last one\r\n      let newColorIndex;\r\n      do {\r\n          newColorIndex = Math.floor(Math.random() * themeColors.length);\r\n          // If we have more than 6 colors, make sure the new color is at least 3 positions away\r\n          // from the last one to ensure greater visual distinction\r\n      } while (\r\n          lastUsedColorIndex !== -1 &&\r\n          (Math.abs(newColorIndex - lastUsedColorIndex) < 3 ||\r\n              newColorIndex === lastUsedColorIndex)\r\n      );\r\n\r\n      // Update the last used color index\r\n      setLastUsedColorIndex(newColorIndex);\r\n\r\n      return themeColors[newColorIndex];\r\n  };\r\n\r\n  // Select a random color for the module\r\n  const backgroundColor = getRandomPastelColor();\r\n\r\n  try {\r\n      // Make POST request to create a new milestone (module)\r\n      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/courses/${courseId}/milestones`, {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: \"New Module\",\r\n              color: backgroundColor, // Now sending color as hex with # symbol\r\n          }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error(`Failed to create module: ${response.status}`);\r\n      }\r\n\r\n      // Get the module ID from the response\r\n      const data = await response.json();\r\n\r\n      // Create the new module with the ID from the API\r\n      const newModule: Module = {\r\n          id: data.id.toString(), // Convert to string to match our Module interface\r\n          title: \"New Module\",\r\n          position: modules.length,\r\n          items: [],\r\n          isExpanded: true,\r\n          backgroundColor: `${backgroundColor}80`, // Add 50% opacity for UI display\r\n          isEditing: false\r\n      };\r\n\r\n      setModules([...modules, newModule]);\r\n      setActiveModuleId(newModule.id);\r\n  } catch (error) {\r\n      console.error(\"Error creating module:\", error);\r\n\r\n      // Fallback to client-side ID generation if the API call fails\r\n      const newModule: Module = {\r\n          id: `module-${Date.now()}`,\r\n          title: \"New Module\",\r\n          position: modules.length,\r\n          items: [],\r\n          isExpanded: true,\r\n          backgroundColor: `${backgroundColor}80`, // Add 50% opacity for UI display\r\n          isEditing: false\r\n      };\r\n\r\n      setModules([...modules, newModule]);\r\n      setActiveModuleId(newModule.id);\r\n  }\r\n};"],"names":[],"mappings":";;;;;;;AAkKkC;AAhKlC;AACA;AAGA;;AANA;;;;AA2CO,SAAS;;IACd,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,WAAW,WAAW,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,UAAO,AAAD;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAgB;IAEjD,sDAAsD;IACtD,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;gCAAE;YACR,IAAI,CAAC,mBAAmB,EAAC,iBAAA,2BAAA,KAAM,EAAE,KAAI,aAAa;gBAChD;YACF;YAEA,aAAa;YAEb,+BAA+B;YAC/B,MAAM,AAAC,GAA+C,kEAAT,WAAiB,OAAR,KAAK,EAAE,EAAC,aAC3D,IAAI;wCAAC,CAAA;oBACJ,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,MAAM,IAAI,MAAM,AAAC,mBAAkC,OAAhB,SAAS,MAAM;oBACpD;oBACA,OAAO,SAAS,IAAI;gBACtB;uCACC,IAAI;wCAAC,CAAA;oBACJ,0DAA0D;oBAC1D,MAAM,mBAA6B,KAAK,GAAG;iEAAC,CAAC;gCAMnC;mCANoD;gCAC5D,IAAI,OAAO,EAAE;gCACb,OAAO,OAAO,IAAI;gCAClB,MAAM,OAAO,IAAI;gCACjB,WAAW,OAAO,SAAS;gCAC3B,KAAK,OAAO,GAAG;gCACf,MAAM,GAAE,cAAA,OAAO,GAAG,cAAV,kCAAA,YAAY,EAAE;gCACtB,YAAY,OAAO,UAAU;gCAC7B,WAAW,OAAO,SAAS;gCAC3B,WAAW,OAAO,SAAS;4BAC7B;;;oBAEA,WAAW;gBACb;uCACC,KAAK;wCAAC,CAAA;oBACL,QAAQ,KAAK,CAAC,2BAA2B;oBACzC,SAAS;gBACX;uCACC,OAAO;wCAAC;oBACP,aAAa;gBACf;;QACJ;+BAAG;QAAC,iBAAA,2BAAA,KAAM,EAAE;QAAE;QAAiB;KAAY;IAE3C,OAAO;QACL;QACA;QACA;IACF;AACF;GApDgB;;QAC4C,qHAAA,CAAA,UAAO;;;AAwD5D,SAAS;;IACd,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,WAAW,WAAW,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,UAAO,AAAD;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAgB;IAEjD,sDAAsD;IACtD,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;gCAAE;YACR,IAAI,CAAC,mBAAmB,EAAC,iBAAA,2BAAA,KAAM,EAAE,KAAI,aAAa;gBAChD;YACF;YAEA,aAAa;YAEb,+BAA+B;YAC/B,MAAM,AAAC,GAA+C,kEAAT,WAAiB,OAAR,KAAK,EAAE,EAAC,UAC3D,IAAI;wCAAC,CAAA;oBACJ,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,MAAM,IAAI,MAAM,AAAC,mBAAkC,OAAhB,SAAS,MAAM;oBACpD;oBACA,OAAO,SAAS,IAAI;gBACtB;uCACC,IAAI;wCAAC,CAAA;oBACJ,0DAA0D;oBAC1D,MAAM,mBAA6B,KAAK,GAAG;iEAAC,CAAC,MAAa,CAAC;gCACzD,IAAI,IAAI,EAAE;gCACV,MAAM,IAAI,IAAI;gCACd,aAAa,IAAI,WAAW;gCAC5B,KAAK,IAAI,GAAG;gCACZ,MAAM,IAAI,IAAI;gCACd,WAAW,IAAI,SAAS;gCACxB,WAAW,IAAI,SAAS;4BAC1B,CAAC;;oBAED,WAAW;gBACb;uCACC,KAAK;wCAAC,CAAA;oBACL,QAAQ,KAAK,CAAC,2BAA2B;oBACzC,SAAS;gBACX;uCACC,OAAO;wCAAC;oBACP,aAAa;gBACf;;QACJ;+BAAG;QAAC,iBAAA,2BAAA,KAAM,EAAE;QAAE;QAAiB;KAAY;IAE3C,OAAO;QACL;QACA;QACA;IACF;AACF;IAlDgB;;QAC4C,qHAAA,CAAA,UAAO;;;AAyD5D,MAAM,oBAAoB,OAAO,UAAkB;IAIxD,MAAM,WAAW,MAAM,MAAM,AAAC,GAAiD,kEAAX,aAA0C,OAA/B,UAAS,wBAA6B,OAAP;IAE9G,IAAI,CAAC,SAAS,EAAE,EAAE;QACd,MAAM,IAAI,MAAM,AAAC,oCAAmD,OAAhB,SAAS,MAAM;IACvE;IAEA,MAAM,iBAAiB,MAAM,SAAS,IAAI;IAE1C,oCAAoC;IACpC,MAAM,kBAA2C,CAAC;IAClD,wCAAwC;IACxC,MAAM,sBAA+D,CAAC;IAEtE,mDAAmD;IACnD,OAAO,OAAO,CAAC,gBAAgB,OAAO,CAAC;YAAC,CAAC,QAAQ,SAAwB;QACrE,+BAA+B;QAC/B,eAAe,CAAC,OAAO,GAAG,SAAS,WAAW;QAE9C,sDAAsD;QACtD,IAAI,SAAS,SAAS,IAAI,SAAS,SAAS,CAAC,MAAM,GAAG,GAAG;YACrD,MAAM,eAAwC,CAAC;YAE/C,SAAS,SAAS,CAAC,OAAO,CAAC,CAAC;gBACxB,YAAY,CAAC,SAAS,WAAW,CAAC,QAAQ,GAAG,GAAG,SAAS,WAAW;YACxE;YAEA,mBAAmB,CAAC,OAAO,GAAG;QAClC;IACJ;IAEA,OAAO;QAAE;QAAiB;IAAoB;AAChD;AAUO,MAAM,mBAAmB,OAAO,UAAkB;IAIvD,0DAA0D;IAC1D,MAAM,SAAS;IAEf,MAAM,WAAW,MAAM,MAAM,AAAC,GAAoB,OAAlB,QAAO,aAAoB,OAAT,WAAY;QAC5D,OAAO;IACT;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,AAAC,gCAA+C,OAAhB,SAAS,MAAM;IACjE;IAEA,MAAM,aAAa,MAAM,SAAS,IAAI;IAEtC,yEAAyE;IACzE,MAAM,UAAU,CAAA,GAAA,uHAAA,CAAA,+BAA4B,AAAD,EAAE,WAAW,UAAU;IAElE,OAAO;QAAE;QAAY;IAAQ;AAC/B;AAGO,MAAM,YAAY,OAAO,UAAkB,UAAkB,SAAmB,YAAyC,mBAA+C,oBAA4B;IACzM,kEAAkE;IAClE,MAAM,uBAAuB;QACzB,oEAAoE;QACpE,MAAM,cAAc;YAChB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACH;QAED,uDAAuD;QACvD,IAAI;QACJ,GAAG;YACC,gBAAgB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,YAAY,MAAM;QAC7D,sFAAsF;QACtF,yDAAyD;QAC7D,QACI,uBAAuB,CAAC,KACxB,CAAC,KAAK,GAAG,CAAC,gBAAgB,sBAAsB,KAC5C,kBAAkB,kBAAkB,EAC1C;QAEF,mCAAmC;QACnC,sBAAsB;QAEtB,OAAO,WAAW,CAAC,cAAc;IACrC;IAEA,uCAAuC;IACvC,MAAM,kBAAkB;IAExB,IAAI;QACA,uDAAuD;QACvD,MAAM,WAAW,MAAM,MAAM,AAAC,GAAiD,kEAAX,aAAoB,OAAT,UAAS,gBAAc;YAClG,QAAQ;YACR,SAAS;gBACL,gBAAgB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;gBACjB,MAAM;gBACN,OAAO;YACX;QACJ;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,IAAI,MAAM,AAAC,4BAA2C,OAAhB,SAAS,MAAM;QAC/D;QAEA,sCAAsC;QACtC,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,iDAAiD;QACjD,MAAM,YAAoB;YACtB,IAAI,KAAK,EAAE,CAAC,QAAQ;YACpB,OAAO;YACP,UAAU,QAAQ,MAAM;YACxB,OAAO,EAAE;YACT,YAAY;YACZ,iBAAiB,AAAC,GAAkB,OAAhB,iBAAgB;YACpC,WAAW;QACf;QAEA,WAAW;eAAI;YAAS;SAAU;QAClC,kBAAkB,UAAU,EAAE;IAClC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QAExC,8DAA8D;QAC9D,MAAM,YAAoB;YACtB,IAAI,AAAC,UAAoB,OAAX,KAAK,GAAG;YACtB,OAAO;YACP,UAAU,QAAQ,MAAM;YACxB,OAAO,EAAE;YACT,YAAY;YACZ,iBAAiB,AAAC,GAAkB,OAAhB,iBAAgB;YACpC,WAAW;QACf;QAEA,WAAW;eAAI;YAAS;SAAU;QAClC,kBAAkB,UAAU,EAAE;IAClC;AACF","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/CreateCourseDialog.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { X } from 'lucide-react';\r\n\r\ninterface CreateCourseDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSuccess?: (courseData: { id: string; name: string }) => void;\r\n    schoolId?: string | number;\r\n}\r\n\r\nexport default function CreateCourseDialog({\r\n    open,\r\n    onClose,\r\n    onSuccess,\r\n    schoolId\r\n}: CreateCourseDialogProps) {\r\n    const [courseName, setCourseName] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Reset form state when dialog is opened\r\n    useEffect(() => {\r\n        if (open) {\r\n            setCourseName('');\r\n            setError('');\r\n            setIsLoading(false);\r\n        }\r\n    }, [open]);\r\n\r\n    const handleSubmit = async () => {\r\n        // Validate course name\r\n        if (!courseName.trim()) {\r\n            setError('Course name is required');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setIsLoading(true);\r\n\r\n            // Make API request to create course\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/courses/`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    name: courseName,\r\n                    org_id: Number(schoolId)\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to create course');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // Reset form\r\n            setCourseName('');\r\n            setError('');\r\n\r\n            // Call the success callback with the created course data\r\n            if (onSuccess) {\r\n                onSuccess({\r\n                    id: data.id,\r\n                    name: courseName\r\n                });\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(\"Error creating course:\", err);\r\n            setError('Failed to create course. Please try again.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!open) return null;\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\r\n            <div\r\n                className=\"w-full max-w-md bg-[#1A1A1A] rounded-lg shadow-2xl\"\r\n                onClick={e => e.stopPropagation()}\r\n            >\r\n                {/* Dialog Content */}\r\n                <div className=\"p-6 mt-4\">\r\n                    <div className=\"space-y-4\">\r\n                        <div>\r\n                            <input\r\n                                id=\"courseName\"\r\n                                type=\"text\"\r\n                                value={courseName}\r\n                                onChange={(e) => {\r\n                                    setCourseName(e.target.value);\r\n                                    if (error) setError('');\r\n                                }}\r\n                                placeholder=\"What will you name your course?\"\r\n                                className={`w-full px-4 py-3 bg-[#0D0D0D] text-white text-lg rounded-lg font-light placeholder-gray-500 outline-none ${error ? 'border border-red-500' : 'border-none'}`}\r\n                                disabled={isLoading}\r\n                            />\r\n                            {error && (\r\n                                <p className=\"mt-1 text-sm text-red-500\">{error}</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Dialog Footer */}\r\n                <div className=\"flex justify-end gap-4 p-6\">\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 text-gray-400 hover:text-white transition-colors focus:outline-none cursor-pointer\"\r\n                        disabled={isLoading}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleSubmit}\r\n                        className={`px-6 py-2 bg-white text-black text-sm font-medium rounded-full hover:opacity-90 transition-opacity focus:outline-none cursor-pointer ${isLoading ? 'opacity-70' : ''}`}\r\n                        disabled={isLoading}\r\n                    >\r\n                        {isLoading ? (\r\n                            <span className=\"flex items-center justify-center\">\r\n                                <svg className=\"animate-spin h-5 w-5 text-black\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                                </svg>\r\n                            </span>\r\n                        ) : 'Create course'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":";;;AA0C4C;;AAxC5C;;;AAFA;;AAYe,SAAS,mBAAmB,KAKjB;QALiB,EACvC,IAAI,EACJ,OAAO,EACP,SAAS,EACT,QAAQ,EACc,GALiB;;IAMvC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,yCAAyC;IACzC,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;wCAAE;YACN,IAAI,MAAM;gBACN,cAAc;gBACd,SAAS;gBACT,aAAa;YACjB;QACJ;uCAAG;QAAC;KAAK;IAET,MAAM,eAAe;QACjB,uBAAuB;QACvB,IAAI,CAAC,WAAW,IAAI,IAAI;YACpB,SAAS;YACT;QACJ;QAEA,IAAI;YACA,aAAa;YAEb,oCAAoC;YACpC,MAAM,WAAW,MAAM,MAAM,AAAC,GAAsC,kEAAA,cAAY;gBAC5E,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACjB,MAAM;oBACN,QAAQ,OAAO;gBACnB;YACJ;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM;YACpB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,aAAa;YACb,cAAc;YACd,SAAS;YAET,yDAAyD;YACzD,IAAI,WAAW;gBACX,UAAU;oBACN,IAAI,KAAK,EAAE;oBACX,MAAM;gBACV;YACJ;QAEJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,0BAA0B;YACxC,SAAS;QACb,SAAU;YACN,aAAa;QACjB;IACJ;IAEA,IAAI,CAAC,MAAM,OAAO;IAElB,qBACI,4SAAC;QAAI,WAAU;kBACX,cAAA,4SAAC;YACG,WAAU;YACV,SAAS,CAAA,IAAK,EAAE,eAAe;;8BAG/B,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC;wBAAI,WAAU;kCACX,cAAA,4SAAC;;8CACG,4SAAC;oCACG,IAAG;oCACH,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC;wCACP,cAAc,EAAE,MAAM,CAAC,KAAK;wCAC5B,IAAI,OAAO,SAAS;oCACxB;oCACA,aAAY;oCACZ,WAAW,AAAC,4GAA2J,OAAhD,QAAQ,0BAA0B;oCACzJ,UAAU;;;;;;gCAEb,uBACG,4SAAC;oCAAE,WAAU;8CAA6B;;;;;;;;;;;;;;;;;;;;;;8BAO1D,4SAAC;oBAAI,WAAU;;sCACX,4SAAC;4BACG,SAAS;4BACT,WAAU;4BACV,UAAU;sCACb;;;;;;sCAGD,4SAAC;4BACG,SAAS;4BACT,WAAW,AAAC,wIAAqK,OAA9B,YAAY,eAAe;4BAC9K,UAAU;sCAET,0BACG,4SAAC;gCAAK,WAAU;0CACZ,cAAA,4SAAC;oCAAI,WAAU;oCAAkC,OAAM;oCAA6B,MAAK;oCAAO,SAAQ;;sDACpG,4SAAC;4CAAO,WAAU;4CAAa,IAAG;4CAAK,IAAG;4CAAK,GAAE;4CAAK,QAAO;4CAAe,aAAY;;;;;;sDACxF,4SAAC;4CAAK,WAAU;4CAAa,MAAK;4CAAe,GAAE;;;;;;;;;;;;;;;;uCAG3D;;;;;;;;;;;;;;;;;;;;;;;AAM5B;GA7HwB;KAAA","debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/SchoolPickerDialog.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from 'react';\r\nimport { X } from 'lucide-react';\r\n\r\ninterface School {\r\n    id: string;\r\n    name: string;\r\n    role?: string;\r\n    description?: string;\r\n    createdAt?: string;\r\n    updatedAt?: string;\r\n    url?: string;\r\n    slug?: string;\r\n}\r\n\r\ninterface SchoolPickerDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    schools: School[];\r\n    onSelectSchool: (schoolId: string) => void;\r\n    onCreateSchool: () => void;\r\n}\r\n\r\nexport default function SchoolPickerDialog({\r\n    open,\r\n    onClose,\r\n    schools,\r\n    onSelectSchool,\r\n    onCreateSchool\r\n}: SchoolPickerDialogProps) {\r\n    if (!open) return null;\r\n\r\n    // Check if user owns any schools\r\n    const hasOwnedSchool = schools.some(school =>\r\n        school.role === 'owner'\r\n    );\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\r\n            <div\r\n                className=\"w-full max-w-md bg-[#1A1A1A] rounded-lg shadow-2xl\"\r\n                onClick={e => e.stopPropagation()}\r\n            >\r\n                {/* Dialog Header */}\r\n                <div className=\"flex justify-between items-center p-6\">\r\n                    <h2 className=\"text-xl font-light text-white\">Select a School</h2>\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"text-gray-400 hover:text-white transition-colors focus:outline-none cursor-pointer\"\r\n                    >\r\n                        <X size={24} />\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Dialog Content */}\r\n                <div className=\"p-6\">\r\n                    <div className=\"space-y-4\">\r\n                        {schools.map(school => (\r\n                            <button\r\n                                key={school.id}\r\n                                onClick={() => onSelectSchool(school.id)}\r\n                                className=\"w-full px-4 py-3 bg-[#0D0D0D] text-white text-left rounded-lg hover:bg-gray-800 transition-colors focus:outline-none cursor-pointer flex justify-between items-center\"\r\n                            >\r\n                                <span>{school.name}</span>\r\n                                {(school.role === 'owner' || school.role === 'admin') && (\r\n                                    <span className={`text-xs px-2 py-1 rounded-full text-white ${school.role === 'owner' ? 'bg-purple-700' : 'bg-blue-600'\r\n                                        }`}>\r\n                                        {school.role === 'owner' ? 'Owner' : 'Admin'}\r\n                                    </span>\r\n                                )}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Dialog Footer */}\r\n                {!hasOwnedSchool && (<div className=\"flex justify-end gap-4 p-6\">\r\n                    <button\r\n                        onClick={onCreateSchool}\r\n                        className=\"px-6 py-2 bg-white text-black text-sm font-medium rounded-full hover:opacity-90 transition-opacity focus:outline-none cursor-pointer\"\r\n                    >\r\n                        Create a School\r\n                    </button>\r\n\r\n                </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":";;;;AAGA;AAHA;;;AAwBe,SAAS,mBAAmB,KAMjB;QANiB,EACvC,IAAI,EACJ,OAAO,EACP,OAAO,EACP,cAAc,EACd,cAAc,EACQ,GANiB;IAOvC,IAAI,CAAC,MAAM,OAAO;IAElB,iCAAiC;IACjC,MAAM,iBAAiB,QAAQ,IAAI,CAAC,CAAA,SAChC,OAAO,IAAI,KAAK;IAGpB,qBACI,4SAAC;QAAI,WAAU;kBACX,cAAA,4SAAC;YACG,WAAU;YACV,SAAS,CAAA,IAAK,EAAE,eAAe;;8BAG/B,4SAAC;oBAAI,WAAU;;sCACX,4SAAC;4BAAG,WAAU;sCAAgC;;;;;;sCAC9C,4SAAC;4BACG,SAAS;4BACT,WAAU;sCAEV,cAAA,4SAAC,mRAAA,CAAA,IAAC;gCAAC,MAAM;;;;;;;;;;;;;;;;;8BAKjB,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC;wBAAI,WAAU;kCACV,QAAQ,GAAG,CAAC,CAAA,uBACT,4SAAC;gCAEG,SAAS,IAAM,eAAe,OAAO,EAAE;gCACvC,WAAU;;kDAEV,4SAAC;kDAAM,OAAO,IAAI;;;;;;oCACjB,CAAC,OAAO,IAAI,KAAK,WAAW,OAAO,IAAI,KAAK,OAAO,mBAChD,4SAAC;wCAAK,WAAW,AAAC,6CACb,OADyD,OAAO,IAAI,KAAK,UAAU,kBAAkB;kDAErG,OAAO,IAAI,KAAK,UAAU,UAAU;;;;;;;+BARxC,OAAO,EAAE;;;;;;;;;;;;;;;gBAiB7B,CAAC,gCAAmB,4SAAC;oBAAI,WAAU;8BAChC,cAAA,4SAAC;wBACG,SAAS;wBACT,WAAU;kCACb;;;;;;;;;;;;;;;;;;;;;;AASrB;KAlEwB","debugId":null}},
    {"offset": {"line": 776, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/layout/header.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { signOut, useSession } from \"next-auth/react\";\r\nimport { useSchools } from \"@/lib/api\";\r\nimport CreateCourseDialog from \"@/components/CreateCourseDialog\";\r\nimport SchoolPickerDialog from \"@/components/SchoolPickerDialog\";\r\nimport { ChevronDown, Plus, X, Book, School } from \"lucide-react\";\r\nimport { Cohort } from \"@/types\";\r\n\r\ninterface HeaderProps {\r\n    showCreateCourseButton?: boolean;\r\n    cohorts?: Cohort[];\r\n    activeCohort?: Cohort | null;\r\n    onCohortSelect?: (cohort: Cohort) => void;\r\n    showTryDemoButton?: boolean;\r\n}\r\n\r\nexport function Header({\r\n    showCreateCourseButton = true,\r\n    cohorts = [],\r\n    activeCohort = null,\r\n    onCohortSelect,\r\n    showTryDemoButton = false\r\n}: HeaderProps) {\r\n    const router = useRouter();\r\n    const { data: session } = useSession();\r\n    const [profileMenuOpen, setProfileMenuOpen] = useState(false);\r\n    const [cohortDropdownOpen, setCohortDropdownOpen] = useState(false);\r\n    const [isCreateCourseDialogOpen, setIsCreateCourseDialogOpen] = useState(false);\r\n    const [isSchoolPickerOpen, setIsSchoolPickerOpen] = useState(false);\r\n    const [mobileActionsOpen, setMobileActionsOpen] = useState(false);\r\n    const profileMenuRef = useRef<HTMLDivElement>(null);\r\n    const cohortDropdownRef = useRef<HTMLDivElement>(null);\r\n    const mobileActionsRef = useRef<HTMLDivElement>(null);\r\n    const { schools, isLoading } = useSchools();\r\n\r\n    // Check if user has a school they own (role admin)\r\n    const hasOwnedSchool = Boolean(schools && schools.length > 0 &&\r\n        schools.some(school => school.role === 'owner' || school.role === 'admin'));\r\n\r\n    // Use the first owned/admin school or just first school as fallback\r\n    const ownedSchool = schools?.find(school => school.role === 'owner' || school.role === 'admin');\r\n    const schoolId = ownedSchool?.id || (schools && schools.length > 0 ? schools[0].id : null);\r\n\r\n    // Close the profile menu and mobile actions when clicking outside\r\n    useEffect(() => {\r\n        function handleClickOutside(event: MouseEvent) {\r\n            if (profileMenuRef.current && !profileMenuRef.current.contains(event.target as Node)) {\r\n                setProfileMenuOpen(false);\r\n            }\r\n            if (cohortDropdownRef.current && !cohortDropdownRef.current.contains(event.target as Node)) {\r\n                setCohortDropdownOpen(false);\r\n            }\r\n            if (mobileActionsRef.current && !mobileActionsRef.current.contains(event.target as Node)) {\r\n                setMobileActionsOpen(false);\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [profileMenuRef, cohortDropdownRef, mobileActionsRef]);\r\n\r\n    // Handle logout\r\n    const handleLogout = () => {\r\n        signOut({ callbackUrl: \"/login\" });\r\n        setProfileMenuOpen(false);\r\n    };\r\n\r\n    // Toggle profile menu\r\n    const toggleProfileMenu = () => {\r\n        setProfileMenuOpen(!profileMenuOpen);\r\n    };\r\n\r\n    // Toggle cohort dropdown\r\n    const toggleCohortDropdown = () => {\r\n        if (cohorts.length > 1) {\r\n            setCohortDropdownOpen(!cohortDropdownOpen);\r\n        }\r\n    };\r\n\r\n    // Toggle mobile actions menu\r\n    const toggleMobileActions = () => {\r\n        setMobileActionsOpen(!mobileActionsOpen);\r\n    };\r\n\r\n    // Handle cohort selection\r\n    const handleCohortSelect = (cohort: Cohort) => {\r\n        if (onCohortSelect) {\r\n            onCohortSelect(cohort);\r\n        }\r\n        setCohortDropdownOpen(false);\r\n    };\r\n\r\n    // Handle button click based on school ownership\r\n    const handleButtonClick = (e: React.MouseEvent) => {\r\n        // If no schools, redirect to school creation\r\n        if (!schools || schools.length === 0) {\r\n            router.push(\"/school/admin/create\");\r\n            return;\r\n        }\r\n\r\n        // If exactly one school and user is owner, go directly to that school\r\n        if (schools.length === 1 && (schools[0].role === 'owner')) {\r\n            router.push(`/school/admin/${schools[0].id}`);\r\n            return;\r\n        }\r\n\r\n        // Otherwise show the school picker dialog\r\n        setIsSchoolPickerOpen(true);\r\n    };\r\n\r\n    // Handle selecting a school from the picker\r\n    const handleSelectSchool = (selectedSchoolId: string) => {\r\n        router.push(`/school/admin/${selectedSchoolId}`);\r\n        setIsSchoolPickerOpen(false);\r\n    };\r\n\r\n    // Handle creating a new school\r\n    const handleCreateSchool = () => {\r\n        router.push(\"/school/admin/create\");\r\n    };\r\n\r\n    // Handle creating a new course button click\r\n    const handleCreateCourseButtonClick = () => {\r\n        setIsCreateCourseDialogOpen(true);\r\n        setMobileActionsOpen(false);\r\n    };\r\n\r\n    // Handle success callback from CreateCourseDialog\r\n    const handleCourseCreationSuccess = (courseData: { id: string; name: string }) => {\r\n        if (hasOwnedSchool && schoolId) {\r\n            // Redirect to the new course page - dialog will be unmounted during navigation\r\n            router.push(`/school/admin/${schoolId}/courses/${courseData.id}`);\r\n        } else {\r\n            router.push(\"/school/admin/create\");\r\n        }\r\n    };\r\n\r\n    // Handle go to school button click\r\n    const handleGoToSchoolClick = () => {\r\n        handleButtonClick({} as React.MouseEvent);\r\n        setMobileActionsOpen(false);\r\n    };\r\n\r\n    // Add handler for \"Try a demo\" button click\r\n    const handleTryDemoClick = () => {\r\n        window.open(\"https://sensai.hyperverge.org/school/first-principles/join?cohortId=89\", \"_blank\");\r\n        setMobileActionsOpen(false);\r\n    };\r\n\r\n    // Get user initials for avatar\r\n    const getInitials = () => {\r\n        if (session?.user?.name) {\r\n            return session.user.name.charAt(0).toUpperCase();\r\n        }\r\n        return \"U\";\r\n    };\r\n\r\n    // Get appropriate button text based on conditions\r\n    const getButtonText = () => {\r\n        if (hasOwnedSchool) {\r\n            return \"Open school\";\r\n        } else {\r\n            return \"Create a course\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <header className=\"w-full px-3 py-4 bg-black text-white\">\r\n            <div className=\"max-w-full mx-auto flex justify-between items-center\">\r\n                {/* Logo */}\r\n                <Link href=\"/\">\r\n                    <div className=\"cursor-pointer\">\r\n                        <Image\r\n                            src=\"/images/sensai-logo.svg\"\r\n                            alt=\"SensAI Logo\"\r\n                            width={120}\r\n                            height={40}\r\n                            className=\"w-[100px] h-auto sm:w-[120px]\"\r\n                            style={{\r\n                                maxWidth: '100%',\r\n                                height: 'auto'\r\n                            }}\r\n                            priority\r\n                        />\r\n                    </div>\r\n                </Link>\r\n\r\n                {/* Center - Cohort Selector or Active Cohort Name */}\r\n                {cohorts.length > 0 && activeCohort && (\r\n                    <div className=\"hidden sm:flex flex-1 justify-center mx-1 sm:mx-2\">\r\n                        {cohorts.length > 1 ? (\r\n                            <div className=\"relative\" ref={cohortDropdownRef}>\r\n                                <button\r\n                                    className=\"flex items-center text-xl font-light bg-transparent hover:bg-[#0f0f0f] rounded-full px-4 py-2 cursor-pointer truncate max-w-none\"\r\n                                    onClick={toggleCohortDropdown}\r\n                                >\r\n                                    <span className=\"truncate\">{activeCohort.name}</span>\r\n                                    <ChevronDown className=\"ml-1 sm:ml-2 h-5 w-5 flex-shrink-0\" />\r\n                                </button>\r\n\r\n                                {cohortDropdownOpen && (\r\n                                    <div className=\"absolute left-1/2 transform -translate-x-1/2 z-10 mt-1 w-full min-w-[200px] bg-[#0f0f0f] rounded-lg shadow-lg\">\r\n                                        <ul className=\"py-2\">\r\n                                            {cohorts.map(cohort => (\r\n                                                <li\r\n                                                    key={cohort.id}\r\n                                                    className={`px-4 py-3 hover:bg-gray-900 cursor-pointer truncate ${activeCohort.id === cohort.id ? 'text-white font-light' : 'text-gray-300'\r\n                                                        }`}\r\n                                                    onClick={() => handleCohortSelect(cohort)}\r\n                                                >\r\n                                                    {cohort.name}\r\n                                                </li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ) : (\r\n                            <h2 className=\"text-xl font-light truncate max-w-none\">{activeCohort.name}</h2>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Right side actions */}\r\n                <div className=\"flex items-center space-x-4 pr-1\">\r\n\r\n                    <>\r\n                        {showTryDemoButton && (\r\n                            <button\r\n                                onClick={handleTryDemoClick}\r\n                                className=\"hidden md:block px-6 py-3 bg-white/20 text-white text-sm font-medium rounded-full hover:bg-white/30 cursor-pointer\"\r\n                            >\r\n                                Try a demo\r\n                            </button>\r\n                        )}\r\n                        {showCreateCourseButton && (\r\n                            <button\r\n                                onClick={handleButtonClick}\r\n                                className=\"hidden md:block px-6 py-3 bg-white text-black text-sm font-medium rounded-full hover:opacity-90 transition-opacity focus:outline-none focus:ring-0 focus:border-0 cursor-pointer\"\r\n                            >\r\n                                {getButtonText()}\r\n                            </button>\r\n                        )}\r\n                    </>\r\n\r\n\r\n                    {/* Profile dropdown */}\r\n                    <div className=\"relative\" ref={profileMenuRef}>\r\n                        <button\r\n                            className=\"w-10 h-10 rounded-full bg-purple-700 flex items-center justify-center hover:bg-purple-600 transition-colors focus:outline-none focus:ring-0 focus:border-0 cursor-pointer\"\r\n                            onClick={toggleProfileMenu}\r\n                        >\r\n                            <span className=\"text-white font-medium\">{getInitials()}</span>\r\n                        </button>\r\n\r\n                        {/* Profile dropdown menu */}\r\n                        {profileMenuOpen && (\r\n                            <div className=\"absolute right-0 mt-2 w-64 bg-[#111111] rounded-md shadow-lg py-1 z-10\">\r\n                                <div className=\"px-4 py-3 border-b border-gray-800\">\r\n                                    <div className=\"flex items-center\">\r\n                                        <div className=\"w-10 h-10 rounded-full bg-purple-700 flex items-center justify-center mr-3\">\r\n                                            <span className=\"text-white font-medium\">{getInitials()}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div className=\"text-sm font-medium\">{session?.user?.name || \"User\"}</div>\r\n                                            <div className=\"text-xs text-gray-400\">{session?.user?.email || \"user@example.com\"}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"border-t border-gray-800 py-1\">\r\n                                    <button\r\n                                        onClick={handleLogout}\r\n                                        className=\"flex w-full items-center text-left px-4 py-2 text-sm text-gray-300 hover:bg-gray-800 cursor-pointer\"\r\n                                    >\r\n                                        <svg className=\"w-5 h-5 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\r\n                                        </svg>\r\n                                        Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Mobile Floating Action Button and Menu */}\r\n            {showCreateCourseButton && (\r\n                <div className=\"md:hidden\">\r\n                    {/* Semi-transparent overlay */}\r\n                    {mobileActionsOpen && (\r\n                        <div\r\n                            className=\"fixed inset-0 z-10\"\r\n                            style={{ backgroundColor: 'rgba(0, 0, 0, 0.8)' }}\r\n                            aria-hidden=\"true\"\r\n                            onClick={() => setMobileActionsOpen(false)}\r\n                        />\r\n                    )}\r\n\r\n                    {/* Main FAB button and menu contents */}\r\n                    <div ref={mobileActionsRef}>\r\n                        {/* Main FAB button */}\r\n                        <button\r\n                            onClick={toggleMobileActions}\r\n                            className=\"fixed bottom-6 right-6 w-14 h-14 rounded-full bg-white text-black flex items-center justify-center shadow-lg z-20 cursor-pointer transition-transform duration-300 focus:outline-none\"\r\n                            aria-label=\"Actions menu\"\r\n                        >\r\n                            {mobileActionsOpen ?\r\n                                <X className=\"h-6 w-6\" /> :\r\n                                hasOwnedSchool ? (\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-6 w-6\">\r\n                                        <rect width=\"7\" height=\"9\" x=\"3\" y=\"3\" rx=\"1\"></rect>\r\n                                        <rect width=\"7\" height=\"5\" x=\"14\" y=\"3\" rx=\"1\"></rect>\r\n                                        <rect width=\"7\" height=\"9\" x=\"14\" y=\"12\" rx=\"1\"></rect>\r\n                                        <rect width=\"7\" height=\"5\" x=\"3\" y=\"16\" rx=\"1\"></rect>\r\n                                    </svg>\r\n                                ) : (\r\n                                    <Plus className=\"h-6 w-6\" />\r\n                                )\r\n                            }\r\n                        </button>\r\n\r\n                        {/* Action buttons that appear when FAB is clicked */}\r\n                        {mobileActionsOpen && (\r\n                            <div className=\"fixed bottom-24 right-6 flex flex-col gap-4 items-end z-20\">\r\n                                {/* Try a demo Button - only shown if not already a learner */}\r\n                                {showTryDemoButton && (\r\n                                    <div className=\"flex items-center gap-3\">\r\n                                        <span className=\"bg-black text-white py-2 px-4 rounded-full text-sm shadow-md\">\r\n                                            Try a demo\r\n                                        </span>\r\n                                        <button\r\n                                            onClick={handleTryDemoClick}\r\n                                            className=\"w-14 h-14 rounded-full bg-white text-black flex items-center justify-center shadow-md cursor-pointer\"\r\n                                            aria-label=\"Try as a learner\"\r\n                                        >\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-6 w-6\">\r\n                                                <path d=\"M12 9a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z\"></path>\r\n                                                <path d=\"M12 3v2\"></path>\r\n                                                <path d=\"M12 19v2\"></path>\r\n                                                <path d=\"m19 12 2 1\"></path>\r\n                                                <path d=\"M3 13 5 12\"></path>\r\n                                                <path d=\"m17 7 1.4-1.4\"></path>\r\n                                                <path d=\"m5.6 18.4 1.4-1.4\"></path>\r\n                                                <path d=\"m16.7 18.4 1.4 1.4\"></path>\r\n                                                <path d=\"m5.6 5.6 1.4 1.4\"></path>\r\n                                            </svg>\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n\r\n\r\n                                {/* Go To School Button - only shown if hasOwnedSchool is true */}\r\n                                {hasOwnedSchool ? (\r\n                                    <div className=\"flex items-center gap-3\">\r\n                                        <span className=\"bg-black text-white py-2 px-4 rounded-full text-sm shadow-md\">\r\n                                            Open school\r\n                                        </span>\r\n                                        <button\r\n                                            onClick={handleGoToSchoolClick}\r\n                                            className=\"w-14 h-14 rounded-full bg-white text-black flex items-center justify-center shadow-md cursor-pointer\"\r\n                                            aria-label=\"Go to school\"\r\n                                        >\r\n                                            <School className=\"h-6 w-6\" />\r\n                                        </button>\r\n                                    </div>\r\n                                ) : /* Create Course Button */ <div className=\"flex items-center gap-3\">\r\n                                    <span className=\"bg-black text-white py-2 px-4 rounded-full text-sm shadow-md\">\r\n                                        Create a course\r\n                                    </span>\r\n                                    <button\r\n                                        onClick={handleCreateCourseButtonClick}\r\n                                        className=\"w-14 h-14 rounded-full bg-white text-black flex items-center justify-center shadow-md cursor-pointer\"\r\n                                        aria-label=\"Create a course\"\r\n                                    >\r\n                                        <Book className=\"h-6 w-6\" />\r\n                                    </button>\r\n                                </div>}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Create Course Dialog */}\r\n            <CreateCourseDialog\r\n                open={isCreateCourseDialogOpen}\r\n                onClose={() => setIsCreateCourseDialogOpen(false)}\r\n                onSuccess={handleCourseCreationSuccess}\r\n                schoolId={schoolId || undefined}\r\n            />\r\n\r\n            {/* School Picker Dialog */}\r\n            {schools && (\r\n                <SchoolPickerDialog\r\n                    open={isSchoolPickerOpen}\r\n                    onClose={() => setIsSchoolPickerOpen(false)}\r\n                    schools={schools}\r\n                    onSelectSchool={handleSelectSchool}\r\n                    onCreateSchool={handleCreateSchool}\r\n                />\r\n            )}\r\n        </header>\r\n    );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1558, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/Toast.tsx"],"sourcesContent":["import React from 'react';\r\nimport { X } from 'lucide-react';\r\n\r\ninterface ToastProps {\r\n    show: boolean;\r\n    title: string;\r\n    description: string;\r\n    emoji: string;\r\n    onClose: () => void;\r\n    isMobileView?: boolean;\r\n}\r\n\r\nconst Toast: React.FC<ToastProps> = ({\r\n    show,\r\n    title,\r\n    description,\r\n    emoji,\r\n    onClose,\r\n    isMobileView = false\r\n}) => {\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <div className={`fixed ${isMobileView ? 'top-0 left-0 right-0 w-full rounded-none' : 'bottom-4 right-4 rounded-lg max-w-md'} bg-white text-black px-6 py-4 shadow-lg z-100 flex items-center gap-4`}>\r\n            <div className=\"flex items-center justify-center w-10 h-10 bg-amber-50 rounded-full\">\r\n                <span className=\"text-xl\">{emoji}</span>\r\n            </div>\r\n            <div className=\"flex-1\">\r\n                <h3 className=\"font-medium text-base\">{title}</h3>\r\n                <p className=\"text-sm text-gray-600 mt-0.5 leading-tight\">{description}</p>\r\n            </div>\r\n            <button\r\n                onClick={onClose}\r\n                className=\"text-gray-400 hover:text-gray-600 cursor-pointer\"\r\n            >\r\n                <X size={16} />\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Toast; "],"names":[],"mappings":";;;;AACA;;;AAWA,MAAM,QAA8B;QAAC,EACjC,IAAI,EACJ,KAAK,EACL,WAAW,EACX,KAAK,EACL,OAAO,EACP,eAAe,KAAK,EACvB;IACG,IAAI,CAAC,MAAM,OAAO;IAElB,qBACI,4SAAC;QAAI,WAAW,AAAC,SAA2G,OAAnG,eAAe,6CAA6C,wCAAuC;;0BACxH,4SAAC;gBAAI,WAAU;0BACX,cAAA,4SAAC;oBAAK,WAAU;8BAAW;;;;;;;;;;;0BAE/B,4SAAC;gBAAI,WAAU;;kCACX,4SAAC;wBAAG,WAAU;kCAAyB;;;;;;kCACvC,4SAAC;wBAAE,WAAU;kCAA8C;;;;;;;;;;;;0BAE/D,4SAAC;gBACG,SAAS;gBACT,WAAU;0BAEV,cAAA,4SAAC,mRAAA,CAAA,IAAC;oBAAC,MAAM;;;;;;;;;;;;;;;;;AAIzB;KA3BM;uCA6BS","debugId":null}},
    {"offset": {"line": 1646, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/ConfirmationDialog.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from 'react';\r\nimport { X, Trash2 } from 'lucide-react';\r\n\r\ninterface ConfirmationDialogProps {\r\n    // Core props (required)\r\n    onConfirm: () => void;\r\n    onCancel: () => void;\r\n    onClickOutside?: () => void;\r\n    // Visibility prop (with two possible names for backward compatibility)\r\n    open?: boolean;\r\n    show?: boolean;\r\n\r\n    // Content props\r\n    title?: string;\r\n    message?: string;\r\n\r\n    // Button text props\r\n    confirmButtonText?: string;\r\n    cancelButtonText?: string;\r\n\r\n    // State props\r\n    isLoading?: boolean;\r\n    errorMessage?: string | null;\r\n\r\n    // Type props for styling\r\n    type?: 'publish' | 'delete' | 'custom' | 'save';\r\n\r\n    // Custom content to be rendered between message and buttons\r\n    children?: React.ReactNode;\r\n\r\n    // Close button props\r\n    showCloseButton?: boolean;\r\n    onClose?: () => void;\r\n}\r\n\r\nexport default function ConfirmationDialog({\r\n    // Use either open or show prop for visibility\r\n    open,\r\n    show,\r\n\r\n    // Content props with defaults\r\n    title,\r\n    message,\r\n\r\n    // Action handlers\r\n    onConfirm,\r\n    onCancel,\r\n    onClickOutside,\r\n    // Button text with defaults\r\n    confirmButtonText,\r\n    cancelButtonText = \"Cancel\",\r\n\r\n    // State props\r\n    isLoading = false,\r\n    errorMessage = null,\r\n\r\n    // Type with default\r\n    type = 'delete',\r\n\r\n    // Custom content\r\n    children,\r\n\r\n    // Close button props\r\n    showCloseButton = false,\r\n    onClose\r\n}: ConfirmationDialogProps) {\r\n    // Handle both 'open' and 'show' props for backward compatibility\r\n    const isVisible = open !== undefined ? open : (show !== undefined ? show : false);\r\n\r\n    if (!isVisible) return null;\r\n\r\n    // Default values based on type\r\n    const defaultTitle = type === 'publish' ? \"Ready to publish?\"\r\n        : type === 'save' ? \"Save changes?\"\r\n            : \"Confirm deletion\";\r\n    const defaultMessage = type === 'publish'\r\n        ? \"Make sure your content is complete and reviewed for errors before publishing\"\r\n        : type === 'save'\r\n            ? \"Do you want to save your changes?\"\r\n            : \"Are you sure you want to delete? This action cannot be undone.\";\r\n    const defaultButtonText = type === 'publish' ? \"Publish Now\"\r\n        : type === 'save' ? \"Save\"\r\n            : \"Delete\";\r\n\r\n    // Use provided values or defaults\r\n    const displayTitle = title || defaultTitle;\r\n    const displayMessage = message || defaultMessage;\r\n    const buttonText = confirmButtonText || defaultButtonText;\r\n\r\n    // Button styles based on type\r\n    const buttonBgColor =\r\n        type === 'publish' ? 'bg-green-800 hover:bg-green-900' :\r\n            type === 'delete' ? 'bg-red-800 hover:bg-red-900' :\r\n                type === 'save' ? 'bg-yellow-500 hover:bg-yellow-600' :\r\n                    'bg-blue-600 hover:bg-blue-700'; // Default for custom type\r\n\r\n    // Handle close button click\r\n    const handleClose = () => {\r\n        if (onClose) {\r\n            onClose();\r\n        } else {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm z-[100] flex items-center justify-center p-4\"\r\n            onClick={(e) => {\r\n                e.stopPropagation();\r\n                onClickOutside ? onClickOutside() : onCancel();\r\n            }}\r\n        >\r\n            <div\r\n                className=\"w-full max-w-md bg-[#1A1A1A] rounded-lg shadow-2xl relative\"\r\n                onClick={(e) => e.stopPropagation()}\r\n            >\r\n                {showCloseButton && (\r\n                    <button\r\n                        className=\"absolute top-4 right-4 text-gray-400 hover:text-white transition-colors focus:outline-none cursor-pointer\"\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        <X size={18} />\r\n                    </button>\r\n                )}\r\n                <div className=\"p-6\">\r\n                    <h2 className=\"text-xl font-light text-white mb-4\">{displayTitle}</h2>\r\n                    <p className=\"text-gray-300\">{displayMessage}</p>\r\n                    {errorMessage && (\r\n                        <p className=\"mt-4 text-red-400 text-sm\">{errorMessage}</p>\r\n                    )}\r\n\r\n                    {/* Render custom content if provided */}\r\n                    {children && (\r\n                        <div className=\"mt-6\">\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"flex justify-end gap-4 p-6\">\r\n                    <button\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            onCancel();\r\n                        }}\r\n                        className=\"px-4 py-2 text-gray-400 hover:text-white transition-colors focus:outline-none cursor-pointer\"\r\n                        disabled={isLoading}\r\n                    >\r\n                        {cancelButtonText}\r\n                    </button>\r\n                    <button\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            onConfirm();\r\n                        }}\r\n                        className={`px-6 py-2 ${buttonBgColor} ${type === 'save' ? 'text-black' : 'text-white'} text-sm font-medium rounded-full transition-colors focus:outline-none cursor-pointer ${isLoading ? 'opacity-70' : ''}`}\r\n                        disabled={isLoading}\r\n                    >\r\n                        {isLoading ? (\r\n                            <div className=\"flex items-center justify-center\">\r\n                                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\r\n                                <span>{buttonText}</span>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"flex items-center\">\r\n                                {type === 'delete' && <Trash2 size={16} className=\"mr-2\" />}\r\n                                {buttonText}\r\n                            </div>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":";;;;AAGA;AAAA;AAHA;;;AAqCe,SAAS,mBAAmB,KA8BjB;QA9BiB,EACvC,8CAA8C;IAC9C,IAAI,EACJ,IAAI,EAEJ,8BAA8B;IAC9B,KAAK,EACL,OAAO,EAEP,kBAAkB;IAClB,SAAS,EACT,QAAQ,EACR,cAAc,EACd,4BAA4B;IAC5B,iBAAiB,EACjB,mBAAmB,QAAQ,EAE3B,cAAc;IACd,YAAY,KAAK,EACjB,eAAe,IAAI,EAEnB,oBAAoB;IACpB,OAAO,QAAQ,EAEf,iBAAiB;IACjB,QAAQ,EAER,qBAAqB;IACrB,kBAAkB,KAAK,EACvB,OAAO,EACe,GA9BiB;IA+BvC,iEAAiE;IACjE,MAAM,YAAY,SAAS,YAAY,OAAQ,SAAS,YAAY,OAAO;IAE3E,IAAI,CAAC,WAAW,OAAO;IAEvB,+BAA+B;IAC/B,MAAM,eAAe,SAAS,YAAY,sBACpC,SAAS,SAAS,kBACd;IACV,MAAM,iBAAiB,SAAS,YAC1B,iFACA,SAAS,SACL,sCACA;IACV,MAAM,oBAAoB,SAAS,YAAY,gBACzC,SAAS,SAAS,SACd;IAEV,kCAAkC;IAClC,MAAM,eAAe,SAAS;IAC9B,MAAM,iBAAiB,WAAW;IAClC,MAAM,aAAa,qBAAqB;IAExC,8BAA8B;IAC9B,MAAM,gBACF,SAAS,YAAY,oCACjB,SAAS,WAAW,gCAChB,SAAS,SAAS,sCACd,iCAAiC,0BAA0B;IAE3E,4BAA4B;IAC5B,MAAM,cAAc;QAChB,IAAI,SAAS;YACT;QACJ,OAAO;YACH;QACJ;IACJ;IAEA,qBACI,4SAAC;QACG,WAAU;QACV,SAAS,CAAC;YACN,EAAE,eAAe;YACjB,iBAAiB,mBAAmB;QACxC;kBAEA,cAAA,4SAAC;YACG,WAAU;YACV,SAAS,CAAC,IAAM,EAAE,eAAe;;gBAEhC,iCACG,4SAAC;oBACG,WAAU;oBACV,SAAS,CAAC;wBACN,EAAE,eAAe;wBACjB;oBACJ;8BAEA,cAAA,4SAAC,mRAAA,CAAA,IAAC;wBAAC,MAAM;;;;;;;;;;;8BAGjB,4SAAC;oBAAI,WAAU;;sCACX,4SAAC;4BAAG,WAAU;sCAAsC;;;;;;sCACpD,4SAAC;4BAAE,WAAU;sCAAiB;;;;;;wBAC7B,8BACG,4SAAC;4BAAE,WAAU;sCAA6B;;;;;;wBAI7C,0BACG,4SAAC;4BAAI,WAAU;sCACV;;;;;;;;;;;;8BAIb,4SAAC;oBAAI,WAAU;;sCACX,4SAAC;4BACG,SAAS,CAAC;gCACN,EAAE,eAAe;gCACjB;4BACJ;4BACA,WAAU;4BACV,UAAU;sCAET;;;;;;sCAEL,4SAAC;4BACG,SAAS,CAAC;gCACN,EAAE,eAAe;gCACjB;4BACJ;4BACA,WAAW,AAAC,aAA6B,OAAjB,eAAc,KAAyI,OAAtI,SAAS,SAAS,eAAe,cAAa,0FAAsH,OAA9B,YAAY,eAAe;4BAC1M,UAAU;sCAET,0BACG,4SAAC;gCAAI,WAAU;;kDACX,4SAAC;wCAAI,WAAU;;;;;;kDACf,4SAAC;kDAAM;;;;;;;;;;;qDAGX,4SAAC;gCAAI,WAAU;;oCACV,SAAS,0BAAY,4SAAC,iSAAA,CAAA,SAAM;wCAAC,MAAM;wCAAI,WAAU;;;;;;oCACjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQjC;KA9IwB","debugId":null}},
    {"offset": {"line": 1853, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/Tooltip.tsx"],"sourcesContent":["import { ReactNode, useState, useEffect, useRef } from \"react\";\r\n\r\ninterface TooltipProps {\r\n    children: ReactNode;\r\n    content: string;\r\n    position?: \"top\" | \"bottom\" | \"left\" | \"right\";\r\n    delay?: number;\r\n    disabled?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport default function Tooltip({\r\n    children,\r\n    content,\r\n    position = \"top\",\r\n    delay = 300,\r\n    disabled = false,\r\n    className = \"\",\r\n}: TooltipProps) {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n    const clearTimeouts = () => {\r\n        if (timeoutRef.current) {\r\n            clearTimeout(timeoutRef.current);\r\n            timeoutRef.current = null;\r\n        }\r\n    };\r\n\r\n    // Clear timeout on unmount\r\n    useEffect(() => {\r\n        return () => clearTimeouts();\r\n    }, []);\r\n\r\n    const showTip = () => {\r\n        clearTimeouts(); // Clear any existing timeouts first\r\n        timeoutRef.current = setTimeout(() => {\r\n            setIsVisible(true);\r\n        }, delay);\r\n    };\r\n\r\n    const hideTip = () => {\r\n        clearTimeouts(); // Clear the show timeout\r\n        setIsVisible(false);\r\n    };\r\n\r\n    // Position-based classes for the tooltip\r\n    const positionClasses = {\r\n        top: \"bottom-full left-1/2 -translate-x-1/2 mb-2\",\r\n        bottom: \"top-full left-1/2 -translate-x-1/2 mt-2\",\r\n        left: \"right-full top-1/2 -translate-y-1/2 mr-2\",\r\n        right: \"left-full top-1/2 -translate-y-1/2 ml-2\",\r\n    };\r\n\r\n    // Arrow classes based on position\r\n    const arrowClasses = {\r\n        top: \"bottom-[-6px] left-1/2 -translate-x-1/2 border-l-transparent border-r-transparent border-b-transparent\",\r\n        bottom: \"top-[-6px] left-1/2 -translate-x-1/2 border-l-transparent border-r-transparent border-t-transparent\",\r\n        left: \"right-[-6px] top-1/2 -translate-y-1/2 border-t-transparent border-b-transparent border-r-transparent\",\r\n        right: \"left-[-6px] top-1/2 -translate-y-1/2 border-t-transparent border-b-transparent border-l-transparent\",\r\n    };\r\n\r\n    if (disabled) return children;\r\n\r\n    return (\r\n        <div\r\n            className={`relative inline-block cursor-pointer ${className}`}\r\n            onMouseEnter={showTip}\r\n            onMouseLeave={hideTip}\r\n            onTouchStart={showTip}\r\n            onTouchEnd={hideTip}\r\n        >\r\n            {children}\r\n\r\n            {isVisible && (\r\n                <div\r\n                    className={`absolute px-3 py-2 text-sm font-light text-white bg-gray-900 rounded-md whitespace-nowrap pointer-events-none ${positionClasses[position]}`}\r\n                    role=\"tooltip\"\r\n                    aria-hidden={!isVisible}\r\n                    style={{ zIndex: 9999 }}\r\n                >\r\n                    {content}\r\n                    <div\r\n                        className={`absolute w-0 h-0 border-4 border-gray-900 ${arrowClasses[position]}`}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":";;;;AAAA;;;;AAWe,SAAS,QAAQ,KAOjB;QAPiB,EAC5B,QAAQ,EACR,OAAO,EACP,WAAW,KAAK,EAChB,QAAQ,GAAG,EACX,WAAW,KAAK,EAChB,YAAY,EAAE,EACH,GAPiB;;IAQ5B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,aAAa,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAyB;IAEjD,MAAM,gBAAgB;QAClB,IAAI,WAAW,OAAO,EAAE;YACpB,aAAa,WAAW,OAAO;YAC/B,WAAW,OAAO,GAAG;QACzB;IACJ;IAEA,2BAA2B;IAC3B,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;6BAAE;YACN;qCAAO,IAAM;;QACjB;4BAAG,EAAE;IAEL,MAAM,UAAU;QACZ,iBAAiB,oCAAoC;QACrD,WAAW,OAAO,GAAG,WAAW;YAC5B,aAAa;QACjB,GAAG;IACP;IAEA,MAAM,UAAU;QACZ,iBAAiB,yBAAyB;QAC1C,aAAa;IACjB;IAEA,yCAAyC;IACzC,MAAM,kBAAkB;QACpB,KAAK;QACL,QAAQ;QACR,MAAM;QACN,OAAO;IACX;IAEA,kCAAkC;IAClC,MAAM,eAAe;QACjB,KAAK;QACL,QAAQ;QACR,MAAM;QACN,OAAO;IACX;IAEA,IAAI,UAAU,OAAO;IAErB,qBACI,4SAAC;QACG,WAAW,AAAC,wCAAiD,OAAV;QACnD,cAAc;QACd,cAAc;QACd,cAAc;QACd,YAAY;;YAEX;YAEA,2BACG,4SAAC;gBACG,WAAW,AAAC,iHAA0I,OAA1B,eAAe,CAAC,SAAS;gBACrJ,MAAK;gBACL,eAAa,CAAC;gBACd,OAAO;oBAAE,QAAQ;gBAAK;;oBAErB;kCACD,4SAAC;wBACG,WAAW,AAAC,6CAAmE,OAAvB,YAAY,CAAC,SAAS;;;;;;;;;;;;;;;;;;AAMtG;GA9EwB;KAAA","debugId":null}},
    {"offset": {"line": 1955, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/lib/utils/dateFormat.ts"],"sourcesContent":["/**\r\n * Formats a scheduled date for display in tooltips and buttons\r\n * @param date The date to format\r\n * @returns A human-readable string representation of the date\r\n */\r\nexport const formatScheduleDate = (date: Date | null): string => {\r\n    if (!date) return \"\";\r\n\r\n    // If the date is today, show \"Today at [time]\"\r\n    const today = new Date();\r\n    if (date.getDate() === today.getDate() &&\r\n        date.getMonth() === today.getMonth() &&\r\n        date.getFullYear() === today.getFullYear()) {\r\n        return `Today at ${date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' })}`;\r\n    }\r\n\r\n    // If the date is tomorrow, show \"Tomorrow at [time]\"\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    if (date.getDate() === tomorrow.getDate() &&\r\n        date.getMonth() === tomorrow.getMonth() &&\r\n        date.getFullYear() === tomorrow.getFullYear()) {\r\n        return `Tomorrow at ${date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' })}`;\r\n    }\r\n\r\n    // Otherwise, show the full date\r\n    return date.toLocaleDateString(undefined, {\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n    });\r\n};\r\n\r\n/**\r\n * Formats a date for full display in tooltips\r\n * @param date The date to format\r\n * @returns A detailed string representation of the date\r\n */\r\nexport const formatFullScheduleDate = (date: Date | null): string => {\r\n    if (!date) return \"\";\r\n    \r\n    return date.toLocaleDateString(undefined, { \r\n        weekday: 'long', \r\n        year: 'numeric', \r\n        month: 'long', \r\n        day: 'numeric', \r\n        hour: '2-digit', \r\n        minute: '2-digit' \r\n    });\r\n}; "],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACM,MAAM,qBAAqB,CAAC;IAC/B,IAAI,CAAC,MAAM,OAAO;IAElB,+CAA+C;IAC/C,MAAM,QAAQ,IAAI;IAClB,IAAI,KAAK,OAAO,OAAO,MAAM,OAAO,MAChC,KAAK,QAAQ,OAAO,MAAM,QAAQ,MAClC,KAAK,WAAW,OAAO,MAAM,WAAW,IAAI;QAC5C,OAAO,AAAC,YAAsF,OAA3E,KAAK,kBAAkB,CAAC,WAAW;YAAE,MAAM;YAAW,QAAQ;QAAU;IAC/F;IAEA,qDAAqD;IACrD,MAAM,WAAW,IAAI,KAAK;IAC1B,SAAS,OAAO,CAAC,SAAS,OAAO,KAAK;IACtC,IAAI,KAAK,OAAO,OAAO,SAAS,OAAO,MACnC,KAAK,QAAQ,OAAO,SAAS,QAAQ,MACrC,KAAK,WAAW,OAAO,SAAS,WAAW,IAAI;QAC/C,OAAO,AAAC,eAAyF,OAA3E,KAAK,kBAAkB,CAAC,WAAW;YAAE,MAAM;YAAW,QAAQ;QAAU;IAClG;IAEA,gCAAgC;IAChC,OAAO,KAAK,kBAAkB,CAAC,WAAW;QACtC,OAAO;QACP,KAAK;QACL,MAAM;QACN,QAAQ;IACZ;AACJ;AAOO,MAAM,yBAAyB,CAAC;IACnC,IAAI,CAAC,MAAM,OAAO;IAElB,OAAO,KAAK,kBAAkB,CAAC,WAAW;QACtC,SAAS;QACT,MAAM;QACN,OAAO;QACP,KAAK;QACL,MAAM;QACN,QAAQ;IACZ;AACJ","debugId":null}},
    {"offset": {"line": 2010, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/CourseItemDialog.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useRef, useEffect, useState } from \"react\";\r\nimport { Sparkles, Check, X, Pencil, Eye, Edit2, Zap } from \"lucide-react\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { QuizQuestion } from \"../types\";\r\nimport type { LearningMaterialEditorHandle } from \"./LearningMaterialEditor\";\r\nimport type { QuizEditorHandle } from \"../types\";\r\nimport Toast from \"./Toast\";\r\nimport ConfirmationDialog from \"./ConfirmationDialog\";\r\nimport { TaskData } from \"@/types\";\r\nimport Tooltip from \"./Tooltip\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { formatScheduleDate } from \"@/lib/utils/dateFormat\";\r\nimport { useAuth } from \"@/lib/auth\";\r\n\r\n// Dynamically import the editor components\r\nconst DynamicLearningMaterialEditor = dynamic(\r\n    () => import(\"./LearningMaterialEditor\"),\r\n    {\r\n        ssr: false,\r\n        loading: () => (\r\n            <div className=\"flex items-center justify-center h-full w-full\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white\"></div>\r\n            </div>\r\n        )\r\n    }\r\n);\r\n\r\n// Dynamically import the QuizEditor component\r\nconst DynamicQuizEditor = dynamic(\r\n    () => import(\"./QuizEditor\"),\r\n    {\r\n        ssr: false,\r\n        loading: () => (\r\n            <div className=\"flex items-center justify-center h-full w-full\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white\"></div>\r\n            </div>\r\n        )\r\n    }\r\n);\r\n\r\n// Define props interface for the component\r\ninterface CourseItemDialogProps {\r\n    isOpen: boolean;\r\n    activeItem: any; // Using any for now, should be properly typed\r\n    activeModuleId: string | null;\r\n    isEditMode: boolean;\r\n    isPreviewMode: boolean;\r\n    showPublishConfirmation: boolean;\r\n    dialogTitleRef: React.RefObject<HTMLHeadingElement | null>;\r\n    dialogContentRef: React.RefObject<HTMLDivElement | null>;\r\n    onClose: () => void;\r\n    onPublishConfirm: () => void;\r\n    onPublishCancel: () => void;\r\n    onSetShowPublishConfirmation: (show: boolean) => void;\r\n    onSaveItem: () => void;\r\n    onCancelEditMode: () => void;\r\n    onEnableEditMode: () => void;\r\n    onQuizContentChange: (questions: QuizQuestion[]) => void;\r\n    focusEditor: () => void;\r\n    schoolId?: string; // School ID for fetching scorecards\r\n    courseId?: string; // Add courseId prop for learning materials\r\n}\r\n\r\nconst CourseItemDialog: React.FC<CourseItemDialogProps> = ({\r\n    isOpen,\r\n    activeItem,\r\n    activeModuleId,\r\n    isEditMode,\r\n    isPreviewMode,\r\n    showPublishConfirmation,\r\n    dialogTitleRef,\r\n    dialogContentRef,\r\n    onClose,\r\n    onPublishConfirm,\r\n    onPublishCancel,\r\n    onSetShowPublishConfirmation,\r\n    onSaveItem,\r\n    onCancelEditMode,\r\n    onEnableEditMode,\r\n    onQuizContentChange,\r\n    focusEditor,\r\n    schoolId,\r\n    courseId,\r\n}) => {\r\n    // Get authenticated user ID\r\n    const { user } = useAuth();\r\n\r\n    // Add refs for the editor components\r\n    const learningMaterialEditorRef = useRef<LearningMaterialEditorHandle>(null);\r\n    const quizEditorRef = useRef<QuizEditorHandle>(null);\r\n\r\n    // Ref to store toast timeout ID\r\n    const toastTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n    // State to track preview mode for quizzes\r\n    const [quizPreviewMode, setQuizPreviewMode] = useState(false);\r\n\r\n    // State for scheduled date\r\n    const [scheduledDate, setScheduledDate] = useState<Date | null>(null);\r\n    const [showSchedulePicker, setShowSchedulePicker] = useState(false);\r\n\r\n    // Toast state\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [toastTitle, setToastTitle] = useState(\"Published\");\r\n    const [toastDescription, setToastDescription] = useState(\"\");\r\n    const [toastEmoji, setToastEmoji] = useState(\"🚀\");\r\n\r\n    // Add state for close confirmation dialog\r\n    const [showCloseConfirmation, setShowCloseConfirmation] = useState(false);\r\n\r\n    // Add a new state variable to track which type of confirmation is being shown\r\n    const [confirmationType, setConfirmationType] = useState<'exit_edit_publish' | 'close' | 'exit_draft'>('exit_draft');\r\n\r\n    // Add state for save confirmation dialog\r\n    const [showSaveConfirmation, setShowSaveConfirmation] = useState(false);\r\n\r\n    // State to track if quiz has questions (for publish/preview button visibility)\r\n    const [hasQuizQuestions, setHasQuizQuestions] = useState(false);\r\n\r\n    // Add state for unsaved scorecard confirmation dialog\r\n    const [showUnsavedScorecardConfirmation, setShowUnsavedScorecardConfirmation] = useState(false);\r\n\r\n    const [showUnsavedScorecardChangesInfo, setShowUnsavedScorecardChangesInfo] = useState(false);\r\n\r\n    // Use useRef instead of useState for storing the pending action\r\n    const pendingActionRef = useRef<(() => void) | null>(null);\r\n\r\n    // Add a ref for the date picker container\r\n    const datePickerRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Initialize scheduledDate when activeItem changes\r\n    useEffect(() => {\r\n        if (activeItem && activeItem.scheduled_publish_at) {\r\n            setScheduledDate(new Date(activeItem.scheduled_publish_at));\r\n        } else {\r\n            setScheduledDate(null);\r\n        }\r\n    }, [activeItem]);\r\n\r\n    // Function to validate scheduled date\r\n    const verifyScheduledDateAndSchedule = (date: Date | null) => {\r\n        if (!date) {\r\n            return;\r\n        }\r\n\r\n        if (date < new Date()) {\r\n            // Show error toast for dates in the past\r\n            displayToast(\"Invalid Date\", \"Scheduled date cannot be in the past\", \"⚠️\");\r\n            return;\r\n        }\r\n\r\n        setScheduledDate(date);\r\n    }\r\n\r\n    // Reset quiz preview mode when dialog is closed\r\n    useEffect(() => {\r\n        if (!isOpen) {\r\n            setQuizPreviewMode(false);\r\n\r\n            // Clear any active toast timeout when dialog closes\r\n            if (toastTimeoutRef.current) {\r\n                clearTimeout(toastTimeoutRef.current);\r\n                toastTimeoutRef.current = null;\r\n            }\r\n\r\n            // Reset toast state when dialog closes to prevent stuck toasts\r\n            setShowToast(false);\r\n\r\n            // Make sure to clear questions from active item when the dialog closes for draft quizzes\r\n            if (activeItem &&\r\n                activeItem.type === 'quiz' &&\r\n                activeItem.status === 'draft') {\r\n\r\n                console.log('Cleaning up draft quiz questions on dialog close');\r\n                activeItem.questions = [];\r\n            }\r\n        } else if (isOpen) {\r\n            // Reset toast state when dialog opens to prevent lingering toasts\r\n            if (toastTimeoutRef.current) {\r\n                clearTimeout(toastTimeoutRef.current);\r\n                toastTimeoutRef.current = null;\r\n            }\r\n            setShowToast(false);\r\n\r\n            // When dialog opens, ensure hasQuizQuestions is correctly initialized\r\n            // For draft quizzes, always start with false (no questions)\r\n            if (activeItem &&\r\n                activeItem.type === 'quiz' &&\r\n                activeItem.status === 'draft') {\r\n\r\n                // Reset to false when dialog opens for draft quizzes\r\n                setHasQuizQuestions(false);\r\n\r\n                // Also ensure activeItem.questions is cleared\r\n                console.log('Clearing questions for draft quiz on dialog open');\r\n                activeItem.questions = [];\r\n            } else if (activeItem &&\r\n                activeItem.type === 'quiz' &&\r\n                activeItem.status === 'published') {\r\n\r\n                // For published quizzes, initialize based on actual data\r\n                // Will be updated when data is loaded by the QuizEditor\r\n                setHasQuizQuestions(activeItem.questions && activeItem.questions.length > 0);\r\n            } else {\r\n                // For materials, always true\r\n                setHasQuizQuestions(true);\r\n            }\r\n        }\r\n    }, [isOpen, activeItem]);\r\n\r\n    // Add a capture phase event listener for Escape key\r\n    useEffect(() => {\r\n        // Handler function for keydown events in the capture phase\r\n        const handleKeyDown = (e: KeyboardEvent) => {\r\n            // If Escape key is pressed\r\n            if (e.key === 'Escape') {\r\n                // Check for active dialog element to ensure dialog is actually open\r\n                const dialogElement = dialogContentRef.current;\r\n                if (!dialogElement) return;\r\n\r\n                // If close confirmation is already showing, don't do anything\r\n                if (showCloseConfirmation) {\r\n                    return;\r\n                }\r\n\r\n                // For published items in view mode, close directly\r\n                if (activeItem?.status === 'published' && !isEditMode) {\r\n                    onClose();\r\n                    return;\r\n                }\r\n\r\n                // Prevent the default behavior and stop propagation\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                // Check if there are actual changes\r\n                const hasChanges = activeItem.type === 'material'\r\n                    ? learningMaterialEditorRef.current?.hasChanges() || false\r\n                    : quizEditorRef.current?.hasChanges() || false;\r\n\r\n                // If we're in edit mode for a published item\r\n                if (activeItem?.status === 'published') {\r\n                    // Only show confirmation if there are changes\r\n                    if (hasChanges) {\r\n                        setConfirmationType('exit_edit_publish');\r\n                        setShowCloseConfirmation(true);\r\n                    } else {\r\n                        // No changes, just exit edit mode\r\n                        onCancelEditMode();\r\n                    }\r\n                } else {\r\n                    // For draft items\r\n                    // Check if the editor/quiz has any content using the appropriate ref\r\n                    const hasContent = activeItem.type === 'material'\r\n                        ? learningMaterialEditorRef.current?.hasContent() || false\r\n                        : quizEditorRef.current?.hasContent() || false;\r\n\r\n                    // Check if the title has been changed from default\r\n                    const titleElement = dialogTitleRef.current;\r\n                    const currentTitle = titleElement?.textContent || '';\r\n\r\n                    // Set default title based on item type\r\n                    let defaultTitle = \"New learning material\";\r\n                    if (activeItem.type === 'quiz') defaultTitle = \"New quiz\";\r\n\r\n                    const isTitleChanged = currentTitle !== defaultTitle && currentTitle.trim() !== '';\r\n\r\n                    // If there's no content and title hasn't changed, close without confirmation   \r\n                    if (!hasContent && !isTitleChanged) {\r\n                        onClose();\r\n                        return;\r\n                    }\r\n\r\n                    // Only show confirmation if there are changes\r\n                    if (hasChanges) {\r\n                        setConfirmationType('exit_draft');\r\n                        setShowCloseConfirmation(true);\r\n                    } else {\r\n                        // No changes, just close\r\n                        onClose();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Add the event listener in the capture phase to intercept before other handlers\r\n        document.addEventListener('keydown', handleKeyDown, true);\r\n\r\n        // Clean up the event listener when the component unmounts or when dependencies change\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown, true);\r\n        };\r\n    }, [activeItem, isEditMode, showCloseConfirmation, onClose, onCancelEditMode, dialogContentRef, dialogTitleRef]);\r\n\r\n    // Add a cleanup effect for the toast timeout when the component unmounts\r\n    useEffect(() => {\r\n        return () => {\r\n            // Clean up toast timeout on unmount\r\n            if (toastTimeoutRef.current) {\r\n                clearTimeout(toastTimeoutRef.current);\r\n                toastTimeoutRef.current = null;\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // Handle clicking outside of the date picker\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (datePickerRef.current && !datePickerRef.current.contains(event.target as Node)) {\r\n                setShowSchedulePicker(false);\r\n            }\r\n        };\r\n\r\n        if (showSchedulePicker) {\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [showSchedulePicker]);\r\n\r\n    // Bail early if dialog isn't open or there's no active item\r\n    if (!isOpen || !activeItem) return null;\r\n\r\n    // Check if the quiz has questions using the local state variable\r\n    // For non-quiz items, this is always true\r\n\r\n    // Function to handle closing the dialog\r\n    const handleCloseRequest = () => {\r\n        // Check if there are actual changes\r\n        const hasChanges = activeItem.type === 'material'\r\n            ? learningMaterialEditorRef.current?.hasChanges() || false\r\n            : quizEditorRef.current?.hasChanges() || false;\r\n\r\n        // Case 1: Published learning material in edit mode \r\n        if (activeItem?.status === 'published' && isEditMode) {\r\n            // Only show confirmation if there are changes\r\n            if (hasChanges) {\r\n                // For X button and backdrop click, we want to close the entire dialog after confirmation\r\n                // Use a different confirmation type to differentiate from the Cancel button\r\n                setConfirmationType('close');\r\n                setShowCloseConfirmation(true);\r\n            } else {\r\n                // No changes, just close\r\n                onClose();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Case 2: Draft items (check for content)\r\n        if (activeItem?.status === 'draft') {\r\n            // Check if the editor/quiz has any content using the appropriate ref\r\n            const hasContent = activeItem.type === 'material'\r\n                ? learningMaterialEditorRef.current?.hasContent() || false\r\n                : quizEditorRef.current?.hasContent() || false;\r\n\r\n            // Check if the title has been changed from default\r\n            const titleElement = dialogTitleRef.current;\r\n            const currentTitle = titleElement?.textContent || '';\r\n\r\n            // Set default title based on item type\r\n            let defaultTitle = \"New learning material\";\r\n            if (activeItem.type === 'quiz') defaultTitle = \"New quiz\";\r\n\r\n            const isTitleChanged = currentTitle !== defaultTitle && currentTitle.trim() !== '';\r\n\r\n            // If there's no content and title hasn't changed, close without confirmation\r\n            if (!hasContent && !isTitleChanged) {\r\n                onClose();\r\n                return;\r\n            }\r\n\r\n            // Only show confirmation if there are changes\r\n            if (hasChanges) {\r\n                // Set confirmation type for draft items\r\n                setConfirmationType('exit_draft');\r\n                setShowCloseConfirmation(true);\r\n            } else {\r\n                // No changes, just close\r\n                onClose();\r\n            }\r\n            return;\r\n        }\r\n        onClose();\r\n    };\r\n\r\n    // Add a handler for the Cancel button in published items' edit mode\r\n    const handleCancelEditClick = () => {\r\n        // Check if there are actual changes\r\n        const hasChanges = activeItem.type === 'material'\r\n            ? learningMaterialEditorRef.current?.hasChanges() || false\r\n            : quizEditorRef.current?.hasChanges() || false;\r\n\r\n        // Only show confirmation if there are changes\r\n        if (hasChanges) {\r\n            // Show confirmation for published items in edit mode\r\n            setConfirmationType('exit_edit_publish');\r\n            setShowCloseConfirmation(true);\r\n        } else {\r\n            // No changes, just exit edit mode\r\n            onCancelEditMode();\r\n        }\r\n    };\r\n\r\n    const handleConfirmSaveDraft = () => {\r\n        setShowCloseConfirmation(false);\r\n\r\n        // Save logic for draft: call save and then close dialog\r\n        if (activeItem?.type === 'material') {\r\n            learningMaterialEditorRef.current?.save();\r\n        } else if (activeItem?.type === 'quiz') {\r\n            quizEditorRef.current?.saveDraft();\r\n        }\r\n        onClose();\r\n    }\r\n\r\n    // Handle confirmed close action\r\n    const handleConfirmDiscardChanges = () => {\r\n        setShowCloseConfirmation(false);\r\n\r\n        if (confirmationType === 'exit_edit_publish') {\r\n            // For published items in edit mode, just exit edit mode without closing the dialog\r\n            if (activeItem?.type === 'material') {\r\n                // Use the ref to call cancel directly to revert any changes\r\n                learningMaterialEditorRef.current?.cancel();\r\n            } else if (activeItem?.type === 'quiz') {\r\n                // Use the ref to call cancel directly to revert any changes\r\n                quizEditorRef.current?.cancel();\r\n            }\r\n\r\n            // Exit edit mode but keep the dialog open\r\n            onCancelEditMode();\r\n        } else {\r\n            // For other confirmation types (draft items or X button click), close the entire dialog\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    // Handle cancel close action\r\n    const handleCancelClosingDialog = () => {\r\n        setShowCloseConfirmation(false);\r\n    };\r\n\r\n    // Handle backdrop click to close dialog\r\n    const handleDialogBackdropClick = (e: React.MouseEvent) => {\r\n        // Only close if clicking directly on the backdrop, not on the dialog content\r\n        if (dialogContentRef.current && !dialogContentRef.current.contains(e.target as Node)) {\r\n            handleCloseRequest();\r\n        }\r\n    };\r\n\r\n    // Toggle quiz preview mode\r\n    const toggleQuizPreviewMode = () => {\r\n        // If we're not already in preview mode and trying to enter it\r\n        if (!quizPreviewMode && quizEditorRef.current) {\r\n            // Check if current question has content\r\n            const hasContent = quizEditorRef.current.hasQuestionContent();\r\n\r\n            if (!hasContent) {\r\n                // Show toast notification\r\n                displayToast(\"Empty Question\", \"Please add details to the question before previewing\", \"🚫\");\r\n                return; // Prevent entering preview mode\r\n            }\r\n\r\n            // Get the current question type and check for empty correct answer or missing scorecard\r\n            const currentQuestionType = quizEditorRef.current.getCurrentQuestionType();\r\n            const currentQuestionInputType = quizEditorRef.current.getCurrentQuestionInputType();\r\n\r\n            if (currentQuestionInputType === 'code') {\r\n                const hasCodingLanguages = quizEditorRef.current.hasCodingLanguages();\r\n                if (!hasCodingLanguages) {\r\n                    // Show toast notification for missing coding languages\r\n                    displayToast(\"Missing Coding Languages\", \"Please select at least one programming language\", \"🚫\");\r\n                    return; // Prevent entering preview mode\r\n                }\r\n            }\r\n\r\n            if (currentQuestionType === 'objective') {\r\n                // For objective questions, check if correct answer is empty\r\n                const hasCorrectAnswer = quizEditorRef.current.hasCorrectAnswer();\r\n                if (!hasCorrectAnswer) {\r\n                    // Show toast notification for empty correct answer\r\n                    displayToast(\"Empty Correct Answer\", \"Please set a correct answer for this question before previewing\", \"🚫\");\r\n                    // Switch to answer tab\r\n                    quizEditorRef.current.setActiveTab('answer');\r\n                    return; // Prevent entering preview mode\r\n                }\r\n            } else if (currentQuestionType === 'subjective') {\r\n                // For subjective questions, check if scorecard is set\r\n                const hasScorecard = quizEditorRef.current.hasScorecard();\r\n                if (!hasScorecard) {\r\n                    // Show toast notification for missing scorecard\r\n                    displayToast(\"Missing Scorecard\", \"Please set a scorecard for evaluating this question before previewing\", \"🚫\");\r\n                    // Switch to scorecard tab\r\n                    quizEditorRef.current.setActiveTab('scorecard');\r\n                    return; // Prevent entering preview mode\r\n                }\r\n\r\n                // Validate the scorecard criteria for subjective questions\r\n                // Get the current question's scorecard data\r\n                const currentQuestionConfig = quizEditorRef.current.getCurrentQuestionConfig?.();\r\n\r\n                if (currentQuestionConfig?.scorecardData) {\r\n                    // Use the shared validation function to validate the scorecard criteria\r\n                    const isValid = quizEditorRef.current.validateScorecardCriteria(\r\n                        currentQuestionConfig.scorecardData,\r\n                        {\r\n                            setActiveTab: quizEditorRef.current.setActiveTab,\r\n                            showErrorMessage: displayToast\r\n                        }\r\n                    );\r\n\r\n                    if (!isValid) {\r\n                        return; // Prevent entering preview mode if validation fails\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Toggle preview mode if content exists or we're exiting preview mode\r\n        setQuizPreviewMode(!quizPreviewMode);\r\n    };\r\n\r\n    // Handle showing and hiding toast\r\n    const displayToast = (title: string, description: string, emoji: string = \"🚀\") => {\r\n        // Clear any existing timeout to prevent premature closing of new toast\r\n        if (toastTimeoutRef.current) {\r\n            clearTimeout(toastTimeoutRef.current);\r\n            toastTimeoutRef.current = null;\r\n        }\r\n\r\n        // Set toast content\r\n        setToastTitle(title);\r\n        setToastDescription(description);\r\n        setToastEmoji(emoji);\r\n        setShowToast(true);\r\n\r\n        // Set new timeout and store the ID for future reference\r\n        toastTimeoutRef.current = setTimeout(() => {\r\n            setShowToast(false);\r\n            toastTimeoutRef.current = null;\r\n        }, 5000); // Auto-hide after 5 seconds\r\n    };\r\n\r\n    // Handle save button click - show confirmation\r\n    const handleSaveClick = () => {\r\n        checkUnsavedScorecardChangesBeforeAction(() => {\r\n            // For quizzes, validate before showing save confirmation\r\n            if (activeItem?.type === 'quiz' && quizEditorRef.current) {\r\n                // Run validation before opening the save confirmation\r\n                const isValid = quizEditorRef.current.validateBeforePublish();\r\n                if (!isValid) {\r\n                    return; // Don't show confirmation if validation fails\r\n                }\r\n            }\r\n\r\n            // For learning materials, validate content exists\r\n            if (activeItem?.type === 'material' && learningMaterialEditorRef.current) {\r\n                const hasContent = learningMaterialEditorRef.current.hasContent();\r\n                if (!hasContent) {\r\n                    // Show error message\r\n                    displayToast(\r\n                        \"Empty learning material\",\r\n                        \"Please add content before saving\",\r\n                        \"🚫\"\r\n                    );\r\n                    return; // Don't show confirmation if validation fails\r\n                }\r\n            }\r\n\r\n            // If validation passes, show save confirmation\r\n            setShowSaveConfirmation(true);\r\n        });\r\n    };\r\n\r\n    // Function to check for unsaved scorecard changes and handle appropriately\r\n    const checkUnsavedScorecardChangesBeforeAction = (action: () => void) => {\r\n        // For quizzes, check for unsaved scorecard changes first\r\n        if (activeItem?.type === 'quiz' && quizEditorRef.current) {\r\n            if (quizEditorRef.current.hasUnsavedScorecardChanges()) {\r\n                pendingActionRef.current = action;\r\n                setShowUnsavedScorecardConfirmation(true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // If no unsaved scorecard changes, proceed with the action\r\n        action();\r\n    };\r\n\r\n    // Handle unsaved scorecard confirmation - navigate to question\r\n    const handleGoBackToScorecard = () => {\r\n        setShowUnsavedScorecardConfirmation(false);\r\n\r\n        // Clear the pending action\r\n        pendingActionRef.current = null;\r\n    };\r\n\r\n    // Handle discard unsaved scorecard changes\r\n    const handleDiscardScorecardChanges = () => {\r\n        setShowUnsavedScorecardConfirmation(false);\r\n\r\n        // Execute the appropriate action based on what was being attempted\r\n        if (pendingActionRef.current) {\r\n            pendingActionRef.current();\r\n        }\r\n\r\n        // Clear the pending action\r\n        pendingActionRef.current = null;\r\n    };\r\n\r\n    // Handle confirmed save action\r\n    const handleConfirmSavePublished = () => {\r\n        setShowSaveConfirmation(false);\r\n\r\n        // Execute the actual save action based on item type\r\n        if (activeItem?.type === 'material') {\r\n            // Use the ref to call save directly\r\n            learningMaterialEditorRef.current?.save();\r\n        } else if (activeItem?.type === 'quiz') {\r\n            // Use the ref to call save directly\r\n            quizEditorRef.current?.savePublished();\r\n        }\r\n    };\r\n\r\n    // Handle cancel save action\r\n    const handleCancelSave = () => {\r\n        setShowSaveConfirmation(false);\r\n    };\r\n\r\n    const isClosingDraft = confirmationType === 'exit_draft';\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"fixed inset-0 z-50 bg-[#111111] flex flex-col\"\r\n                onClick={handleDialogBackdropClick}\r\n            >\r\n                <div\r\n                    ref={dialogContentRef}\r\n                    style={{\r\n                        backgroundColor: '#1A1A1A',\r\n                        border: 'none'\r\n                    }}\r\n                    className=\"w-full h-full flex flex-col\"\r\n                    onClick={(e) => e.stopPropagation()}\r\n                >\r\n                    {/* Dialog Header */}\r\n                    <div\r\n                        className=\"flex items-center justify-between p-4 border-b\"\r\n                        style={{ backgroundColor: '#111111' }}\r\n                    >\r\n                        <div className=\"flex-1 flex items-center\">\r\n                            <h2\r\n                                ref={dialogTitleRef}\r\n                                contentEditable={(activeItem?.status !== 'published' || isEditMode)}\r\n                                suppressContentEditableWarning\r\n                                onInput={(e) => {\r\n                                    // For both learning materials and quizzes, allow editing title \r\n                                    // but don't propagate changes upward yet (will be handled during save)\r\n                                    // The current title will be stored in the DOM element\r\n                                    // and will be sent to the API during save/publish\r\n                                }}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === 'Enter') {\r\n                                        e.preventDefault();\r\n                                        // Blur the element to trigger save\r\n                                        (e.target as HTMLElement).blur();\r\n                                    }\r\n                                }}\r\n                                onClick={(e) => {\r\n                                    // Prevent click from bubbling up\r\n                                    e.stopPropagation();\r\n\r\n                                    // If not editable, don't continue\r\n                                    if ((activeItem?.status === 'published' && !isEditMode)) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    // Set a flag to indicate the title is being edited\r\n                                    const titleElement = e.currentTarget as HTMLElement;\r\n                                    titleElement.dataset.editing = \"true\";\r\n\r\n                                    // Only set cursor at the end on first click (not on double-click)\r\n                                    // This allows double-click to select text as expected\r\n                                    if (!titleElement.dataset.clicked) {\r\n                                        titleElement.dataset.clicked = \"true\";\r\n\r\n                                        // Set cursor position at the end of text\r\n                                        const range = document.createRange();\r\n                                        const selection = window.getSelection();\r\n                                        const textNode = titleElement.firstChild || titleElement;\r\n\r\n                                        if (textNode) {\r\n                                            const textLength = textNode.textContent?.length || 0;\r\n                                            range.setStart(textNode, textLength);\r\n                                            range.setEnd(textNode, textLength);\r\n                                            selection?.removeAllRanges();\r\n                                            selection?.addRange(range);\r\n                                        }\r\n\r\n                                        // Reset the clicked flag after a short delay\r\n                                        setTimeout(() => {\r\n                                            titleElement.dataset.clicked = \"\";\r\n                                        }, 300);\r\n                                    }\r\n                                }}\r\n                                className={`text-2xl font-light text-white outline-none empty:before:content-[attr(data-placeholder)] empty:before:text-gray-400 empty:before:pointer-events-none cursor-text mr-4 ${(activeItem?.status !== 'published' || isEditMode) ? 'w-full min-w-[300px]' : ''}`}\r\n                                data-placeholder={activeItem?.type === 'material' ? 'New learning material' : 'New quiz'}\r\n                            >\r\n                                {activeItem?.title}\r\n                            </h2>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-3\">\r\n                            {/* Preview Mode Toggle for Quizzes/Exams */}\r\n                            {activeItem?.type === 'quiz' && hasQuizQuestions && (\r\n                                <button\r\n                                    onClick={toggleQuizPreviewMode}\r\n                                    className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-blue-500 hover:bg-[#222222] focus:border-blue-500 active:border-blue-500 rounded-full transition-colors cursor-pointer\"\r\n                                    aria-label={quizPreviewMode ? \"Exit preview\" : \"Preview quiz\"}\r\n                                >\r\n                                    {quizPreviewMode ? (\r\n                                        <>\r\n                                            <Edit2 size={16} className=\"mr-2\" />\r\n                                            Exit Preview\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Eye size={16} className=\"mr-2\" />\r\n                                            Preview\r\n                                        </>\r\n                                    )}\r\n                                </button>\r\n                            )}\r\n\r\n                            {/* Publish button for all item types */}\r\n                            {activeItem?.status === 'draft' &&\r\n                                ((activeItem?.type === 'quiz' && hasQuizQuestions) ||\r\n                                    activeItem?.type === 'material') && (\r\n                                    <>\r\n                                        {/* Save Draft button */}\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                checkUnsavedScorecardChangesBeforeAction(() => {\r\n                                                    handleConfirmSaveDraft();\r\n                                                });\r\n                                            }}\r\n                                            className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-yellow-500 hover:bg-[#222222] focus:border-gray-500 active:border-gray-500 rounded-full transition-colors cursor-pointer mr-3\"\r\n                                            aria-label={`Save ${activeItem?.type} draft`}\r\n                                        >\r\n                                            <Check size={16} className=\"mr-2\" />\r\n                                            Save draft\r\n                                        </button>\r\n                                        {/* Existing Publish button */}\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                checkUnsavedScorecardChangesBeforeAction(() => {\r\n                                                    // For quizzes, validate before showing publish confirmation\r\n                                                    if (activeItem?.type === 'quiz' && quizEditorRef.current) {\r\n                                                        // Run validation before opening the publish confirmation\r\n                                                        const isValid = quizEditorRef.current.validateBeforePublish();\r\n                                                        if (!isValid) {\r\n                                                            return; // Don't show confirmation if validation fails\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    // For learning materials, validate content exists\r\n                                                    if (activeItem?.type === 'material' && learningMaterialEditorRef.current) {\r\n                                                        const hasContent = learningMaterialEditorRef.current.hasContent();\r\n                                                        if (!hasContent) {\r\n                                                            // Show error message\r\n                                                            displayToast(\r\n                                                                \"Empty learning material\",\r\n                                                                \"Please add content before publishing\",\r\n                                                                \"🚫\"\r\n                                                            );\r\n                                                            return; // Don't show confirmation if validation fails\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    // If validation passes, show publish confirmation\r\n                                                    onSetShowPublishConfirmation(true);\r\n                                                });\r\n                                            }}\r\n                                            className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-green-500 hover:bg-[#222222] focus:border-green-500 active:border-green-500 rounded-full transition-colors cursor-pointer\"\r\n                                            aria-label={`Publish ${activeItem?.type}`}\r\n                                        >\r\n                                            <Zap size={16} className=\"mr-2\" />\r\n                                            Publish\r\n                                        </button>\r\n                                    </>\r\n                                )}\r\n\r\n                            {activeItem?.status === 'published' && isEditMode && !quizPreviewMode ? (\r\n                                <>\r\n                                    {scheduledDate && (\r\n                                        <div className=\"flex items-center mr-3\">\r\n                                            <button\r\n                                                onClick={() => setShowSchedulePicker(!showSchedulePicker)}\r\n                                                className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-yellow-600 hover:bg-[#222222] focus:border-yellow-600 active:border-yellow-600 rounded-full transition-colors cursor-pointer\"\r\n                                                aria-label=\"Set scheduled publication date\"\r\n                                            >\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\">\r\n                                                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                                                    <polyline points=\"12 6 12 12 16 14\"></polyline>\r\n                                                </svg>\r\n                                                {formatScheduleDate(scheduledDate)}\r\n                                            </button>\r\n                                            {showSchedulePicker && (\r\n                                                <div ref={datePickerRef} className=\"absolute mt-2 top-16 z-50 bg-[#242424] p-3 border border-gray-700 rounded-lg shadow-lg\">\r\n                                                    <DatePicker\r\n                                                        selected={scheduledDate}\r\n                                                        onChange={(date) => verifyScheduledDateAndSchedule(date)}\r\n                                                        showTimeSelect\r\n                                                        timeFormat=\"HH:mm\"\r\n                                                        timeIntervals={15}\r\n                                                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                                                        timeCaption=\"Time\"\r\n                                                        minDate={new Date()} // Can't schedule in the past\r\n                                                        className=\"bg-[#333333] rounded-md p-2 px-4 w-full text-white cursor-pointer\"\r\n                                                        wrapperClassName=\"w-full\"\r\n                                                        calendarClassName=\"bg-[#242424] text-white border border-gray-700 rounded-lg shadow-lg cursor-pointer\"\r\n                                                        inline\r\n                                                    />\r\n                                                    <div className=\"mt-2 flex justify-end\">\r\n                                                        <button\r\n                                                            onClick={() => setShowSchedulePicker(false)}\r\n                                                            className=\"px-3 py-1 text-xs text-white bg-[#444444] hover:bg-[#555555] rounded-md\"\r\n                                                        >\r\n                                                            Close\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                    <button\r\n                                        onClick={handleSaveClick}\r\n                                        className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-green-500 hover:bg-[#222222] focus:border-green-500 active:border-green-500 rounded-full transition-colors cursor-pointer\"\r\n                                        aria-label=\"Save changes\"\r\n                                    >\r\n                                        <Check size={16} className=\"mr-2\" />\r\n                                        Save\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={handleCancelEditClick}\r\n                                        className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-gray-500 hover:bg-[#222222] focus:border-gray-500 active:border-gray-500 rounded-full transition-colors cursor-pointer\"\r\n                                        aria-label=\"Cancel editing\"\r\n                                    >\r\n                                        <X size={16} className=\"mr-2\" />\r\n                                        Cancel\r\n                                    </button>\r\n                                </>\r\n                            ) : activeItem?.status === 'published' && !isEditMode && !quizPreviewMode && (\r\n                                <>\r\n                                    {activeItem.scheduled_publish_at && (\r\n                                        <Tooltip content={`Scheduled for ${formatScheduleDate(new Date(activeItem.scheduled_publish_at))}`} position=\"top\">\r\n                                            <button\r\n                                                className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-yellow-600 hover:bg-[#222222] focus:border-yellow-600 active:border-yellow-600 rounded-full transition-colors\"\r\n                                                aria-label=\"Scheduled publishing information\"\r\n                                            >\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\">\r\n                                                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                                                    <polyline points=\"12 6 12 12 16 14\"></polyline>\r\n                                                </svg>\r\n                                                Scheduled\r\n                                            </button>\r\n                                        </Tooltip>\r\n                                    )}\r\n                                    <button\r\n                                        onClick={onEnableEditMode}\r\n                                        className=\"flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-violet-600 hover:bg-[#222222] focus:border-violet-600 active:border-violet-600 rounded-full transition-colors cursor-pointer\"\r\n                                        aria-label=\"Edit item\"\r\n                                    >\r\n                                        <Pencil size={16} className=\"mr-2\" />\r\n                                        Edit\r\n                                    </button>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Close button */}\r\n                        <button\r\n                            onClick={handleCloseRequest}\r\n                            className=\"ml-2 p-2 text-white hover:text-white rounded-full hover:bg-[#333333] transition-colors cursor-pointer\"\r\n                            aria-label=\"Close dialog\"\r\n                        >\r\n                            <X size={24} />\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Dialog Content */}\r\n                    <div\r\n                        className=\"flex-1 overflow-y-auto dialog-content-editor\"\r\n                        style={{ height: 'calc(100vh - 65px)' }} // Adjust height to account for header\r\n                        onClick={(e) => {\r\n                            // Ensure the click event doesn't bubble up\r\n                            e.stopPropagation();\r\n\r\n                            // Only focus the editor if in editable mode\r\n                            if (activeItem?.status !== 'published' || isEditMode) {\r\n                                // Focus the editor\r\n                                focusEditor();\r\n                            }\r\n                        }}\r\n                    >\r\n                        {activeItem?.type === 'material' ? (\r\n                            <DynamicLearningMaterialEditor\r\n                                ref={learningMaterialEditorRef}\r\n                                key={`material-${activeItem.id}-${isEditMode}`}\r\n                                readOnly={activeItem.status === 'published' && !isEditMode}\r\n                                showPublishConfirmation={showPublishConfirmation}\r\n                                onPublishConfirm={onPublishConfirm}\r\n                                onPublishCancel={onPublishCancel}\r\n                                taskId={activeItem.id}\r\n                                isDarkMode={true}\r\n                                scheduledPublishAt={scheduledDate ? scheduledDate.toISOString() : null}\r\n                                onPublishSuccess={(updatedData?: TaskData) => {\r\n                                    // Handle publish success\r\n                                    if (updatedData) {\r\n                                        // Properly update the UI state first\r\n                                        // This will transform the publish button to edit button\r\n                                        if (activeItem && updatedData.status === 'published') {\r\n                                            activeItem.status = 'published';\r\n                                            activeItem.title = updatedData.title;\r\n                                            // Add the scheduled_publish_at value from updatedData to activeItem\r\n                                            activeItem.scheduled_publish_at = updatedData.scheduled_publish_at;\r\n\r\n                                            if (updatedData.scheduled_publish_at) {\r\n                                                setScheduledDate(new Date(updatedData.scheduled_publish_at));\r\n                                            } else {\r\n                                                setScheduledDate(null);\r\n                                            }\r\n\r\n                                            if (updatedData.blocks) {\r\n                                                // @ts-ignore - types may not perfectly match\r\n                                                activeItem.content = updatedData.blocks;\r\n                                            }\r\n                                        }\r\n\r\n                                        // Update will be handled by the parent component\r\n                                        onPublishConfirm();\r\n\r\n                                        // Show toast notification\r\n                                        const publishMessage = updatedData.scheduled_publish_at ? \"Your learning material has been scheduled for publishing\" : \"Your learning material has been published\";\r\n                                        displayToast(\"Published\", publishMessage);\r\n                                    }\r\n                                    // Hide the publish confirmation dialog\r\n                                    onSetShowPublishConfirmation(false);\r\n                                }}\r\n                                onSaveSuccess={(updatedData?: TaskData) => {\r\n                                    // Handle save success - similar to publish success but without status change\r\n                                    if (updatedData) {\r\n                                        // Update the activeItem with new title and content\r\n                                        if (activeItem) {\r\n                                            activeItem.title = updatedData.title;\r\n                                            // Add the scheduled_publish_at value when saving\r\n                                            activeItem.scheduled_publish_at = updatedData.scheduled_publish_at;\r\n\r\n                                            if (updatedData.blocks) {\r\n                                                // @ts-ignore - types may not perfectly match\r\n                                                activeItem.content = updatedData.blocks;\r\n                                            }\r\n                                        }\r\n\r\n                                        // Call the parent's save function\r\n                                        onSaveItem();\r\n\r\n                                        // Show toast notification for save success\r\n                                        displayToast(\"Saved\", `Your learning material has been updated`);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        ) : activeItem?.type === 'quiz' ? (\r\n                            <DynamicQuizEditor\r\n                                ref={quizEditorRef}\r\n                                key={`quiz-${activeItem.id}-${isEditMode}`}\r\n                                scheduledPublishAt={scheduledDate ? scheduledDate.toISOString() : null}\r\n                                onChange={(questions) => {\r\n                                    // Track if there are questions for publish/preview button visibility\r\n                                    setHasQuizQuestions(questions.length > 0);\r\n\r\n                                    // Keep activeItem.questions updated for component state consistency\r\n                                    if (activeItem) {\r\n                                        activeItem.questions = questions;\r\n                                    }\r\n\r\n                                    // Notify parent component\r\n                                    onQuizContentChange(questions);\r\n                                }}\r\n                                isPreviewMode={quizPreviewMode}\r\n                                isDarkMode={true}\r\n                                readOnly={activeItem.status === 'published' && !isEditMode}\r\n                                taskId={activeItem.id}\r\n                                status={activeItem.status}\r\n                                taskType={activeItem.type}\r\n                                showPublishConfirmation={showPublishConfirmation}\r\n                                onPublishCancel={onPublishCancel}\r\n                                onValidationError={(message, description) => {\r\n                                    // Display toast notification for validation errors during publishing\r\n                                    displayToast(message, description, \"🚫\");\r\n                                }}\r\n                                courseId={courseId}\r\n                                userId={user?.id}\r\n                                onSaveSuccess={(updatedData) => {\r\n                                    // Handle save success\r\n                                    if (updatedData) {\r\n                                        // Update the activeItem with the updated title and questions\r\n                                        if (activeItem) {\r\n                                            activeItem.title = updatedData.title;\r\n                                            // Add the scheduled_publish_at value when saving\r\n                                            activeItem.scheduled_publish_at = updatedData.scheduled_publish_at;\r\n\r\n                                            if (updatedData.questions) {\r\n                                                activeItem.questions = updatedData.questions;\r\n                                            }\r\n                                        }\r\n\r\n                                        // Call onSaveItem to exit edit mode\r\n                                        onSaveItem();\r\n\r\n                                        // Show toast notification for save success\r\n                                        displayToast(\"Saved\", `Your ${activeItem.type} has been updated`);\r\n                                    }\r\n                                }}\r\n                                onPublishSuccess={(updatedData) => {\r\n                                    // Handle publish success\r\n                                    if (updatedData) {\r\n                                        // Properly update the UI state first\r\n                                        // Properly update the UI state first\r\n                                        // This will transform the publish button to edit button\r\n                                        if (activeItem && updatedData.status === 'published') {\r\n                                            activeItem.status = 'published';\r\n                                            activeItem.title = updatedData.title;\r\n                                            // Add the scheduled_publish_at value from updatedData to activeItem\r\n                                            activeItem.scheduled_publish_at = updatedData.scheduled_publish_at;\r\n\r\n                                            if (updatedData.scheduled_publish_at) {\r\n                                                setScheduledDate(new Date(updatedData.scheduled_publish_at));\r\n                                            } else {\r\n                                                setScheduledDate(null);\r\n                                            }\r\n\r\n                                            if (updatedData.questions) {\r\n                                                activeItem.questions = updatedData.questions;\r\n                                            }\r\n                                        }\r\n\r\n                                        // Update will be handled by the parent component\r\n                                        // Pass the updated data to the parent component\r\n                                        onPublishConfirm();\r\n\r\n                                        // Show toast notification\r\n                                        const publishMessage = updatedData.scheduled_publish_at ? `Your quiz has been scheduled for publishing` : `Your quiz has been published`;\r\n                                        displayToast(\"Published\", publishMessage);\r\n                                    }\r\n\r\n                                    // Hide the publish confirmation dialog\r\n                                    onSetShowPublishConfirmation(false);\r\n                                }}\r\n                                schoolId={schoolId}\r\n                                onQuestionChangeWithUnsavedScorecardChanges={() => {\r\n                                    setShowUnsavedScorecardChangesInfo(true);\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Close confirmation dialog */}\r\n            <ConfirmationDialog\r\n                open={showCloseConfirmation}\r\n                title={isClosingDraft ? \"Save Your Progress\" : \"Unsaved Changes\"}\r\n                message={\r\n                    isClosingDraft\r\n                        ?\r\n                        \"Would you like to save your progress before leaving? If you don't save, all your progress will be lost.\" : \"All your unsaved changes will be lost if you leave without saving. Are you sure you want to leave?\"\r\n                }\r\n                confirmButtonText={isClosingDraft ? \"Save\" : \"Discard changes\"}\r\n                cancelButtonText={isClosingDraft ? \"Discard\" : \"Continue Editing\"}\r\n                onConfirm={isClosingDraft ? handleConfirmSaveDraft : handleConfirmDiscardChanges}\r\n                onCancel={isClosingDraft ? handleConfirmDiscardChanges : handleCancelClosingDialog}\r\n                onClickOutside={isClosingDraft ? () => setShowCloseConfirmation(false) : handleCancelClosingDialog}\r\n                type={isClosingDraft ? 'save' : 'delete'}\r\n                showCloseButton={isClosingDraft}\r\n                onClose={() => setShowCloseConfirmation(false)}\r\n            />\r\n\r\n            {/* Save confirmation dialog */}\r\n            <ConfirmationDialog\r\n                open={showSaveConfirmation}\r\n                title=\"Ready to save changes\"\r\n                message=\"These changes will be reflected to learners immediately after saving. Are you sure you want to proceed?\"\r\n                confirmButtonText=\"Save\"\r\n                cancelButtonText=\"Continue Editing\"\r\n                onConfirm={handleConfirmSavePublished}\r\n                onCancel={handleCancelSave}\r\n                type=\"publish\"\r\n            />\r\n\r\n            {/* Unsaved scorecard confirmation dialog */}\r\n            <ConfirmationDialog\r\n                open={showUnsavedScorecardConfirmation}\r\n                title=\"Unsaved Scorecard Changes\"\r\n                message={`The scorecard for this question has unsaved changes. Do you want to discard them and continue, or go back to save them?`}\r\n                confirmButtonText=\"Discard changes\"\r\n                cancelButtonText=\"Go Back\"\r\n                onConfirm={handleDiscardScorecardChanges}\r\n                onCancel={handleGoBackToScorecard}\r\n                type=\"delete\"\r\n            />\r\n\r\n            <ConfirmationDialog\r\n                open={showUnsavedScorecardChangesInfo}\r\n                title=\"You have unsaved changes\"\r\n                message={`Your scorecard has unsaved changes. Either save them or discard them.`}\r\n                confirmButtonText=\"Go back\"\r\n                cancelButtonText=\"\"\r\n                onConfirm={() => {\r\n                    setShowUnsavedScorecardChangesInfo(false);\r\n                }}\r\n                onCancel={() => {\r\n                    setShowUnsavedScorecardChangesInfo(false);\r\n                }}\r\n                type=\"custom\"\r\n            />\r\n\r\n            {/* Toast notification */}\r\n            <Toast\r\n                show={showToast}\r\n                title={toastTitle}\r\n                description={toastDescription}\r\n                emoji={toastEmoji}\r\n                onClose={() => setShowToast(false)}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CourseItemDialog; "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;;;;;AAfA;;;;;;;;;;;AAiBA,2CAA2C;AAC3C,MAAM,gCAAgC,CAAA,GAAA,iRAAA,CAAA,UAAO,AAAD,EACxC;;;;;;IAEI,KAAK;IACL,SAAS,kBACL,4SAAC;YAAI,WAAU;sBACX,cAAA,4SAAC;gBAAI,WAAU;;;;;;;;;;;;KANzB;AAYN,8CAA8C;AAC9C,MAAM,oBAAoB,CAAA,GAAA,iRAAA,CAAA,UAAO,AAAD,EAC5B;;;;;;IAEI,KAAK;IACL,SAAS,kBACL,4SAAC;YAAI,WAAU;sBACX,cAAA,4SAAC;gBAAI,WAAU;;;;;;;;;;;;MANzB;AAmCN,MAAM,mBAAoD;QAAC,EACvD,MAAM,EACN,UAAU,EACV,cAAc,EACd,UAAU,EACV,aAAa,EACb,uBAAuB,EACvB,cAAc,EACd,gBAAgB,EAChB,OAAO,EACP,gBAAgB,EAChB,eAAe,EACf,4BAA4B,EAC5B,UAAU,EACV,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,WAAW,EACX,QAAQ,EACR,QAAQ,EACX;;IACG,4BAA4B;IAC5B,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,UAAO,AAAD;IAEvB,qCAAqC;IACrC,MAAM,4BAA4B,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAgC;IACvE,MAAM,gBAAgB,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAoB;IAE/C,gCAAgC;IAChC,MAAM,kBAAkB,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAyB;IAEtD,0CAA0C;IAC1C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,2BAA2B;IAC3B,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAe;IAChE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAE7D,cAAc;IACd,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,0CAA0C;IAC1C,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEnE,8EAA8E;IAC9E,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAgD;IAEvG,yCAAyC;IACzC,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEjE,+EAA+E;IAC/E,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEzD,sDAAsD;IACtD,MAAM,CAAC,kCAAkC,oCAAoC,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEzF,MAAM,CAAC,iCAAiC,mCAAmC,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEvF,gEAAgE;IAChE,MAAM,mBAAmB,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAuB;IAErD,0CAA0C;IAC1C,MAAM,gBAAgB,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAkB;IAE7C,mDAAmD;IACnD,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;sCAAE;YACN,IAAI,cAAc,WAAW,oBAAoB,EAAE;gBAC/C,iBAAiB,IAAI,KAAK,WAAW,oBAAoB;YAC7D,OAAO;gBACH,iBAAiB;YACrB;QACJ;qCAAG;QAAC;KAAW;IAEf,sCAAsC;IACtC,MAAM,iCAAiC,CAAC;QACpC,IAAI,CAAC,MAAM;YACP;QACJ;QAEA,IAAI,OAAO,IAAI,QAAQ;YACnB,yCAAyC;YACzC,aAAa,gBAAgB,wCAAwC;YACrE;QACJ;QAEA,iBAAiB;IACrB;IAEA,gDAAgD;IAChD,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;sCAAE;YACN,IAAI,CAAC,QAAQ;gBACT,mBAAmB;gBAEnB,oDAAoD;gBACpD,IAAI,gBAAgB,OAAO,EAAE;oBACzB,aAAa,gBAAgB,OAAO;oBACpC,gBAAgB,OAAO,GAAG;gBAC9B;gBAEA,+DAA+D;gBAC/D,aAAa;gBAEb,yFAAyF;gBACzF,IAAI,cACA,WAAW,IAAI,KAAK,UACpB,WAAW,MAAM,KAAK,SAAS;oBAE/B,QAAQ,GAAG,CAAC;oBACZ,WAAW,SAAS,GAAG,EAAE;gBAC7B;YACJ,OAAO,IAAI,QAAQ;gBACf,kEAAkE;gBAClE,IAAI,gBAAgB,OAAO,EAAE;oBACzB,aAAa,gBAAgB,OAAO;oBACpC,gBAAgB,OAAO,GAAG;gBAC9B;gBACA,aAAa;gBAEb,sEAAsE;gBACtE,4DAA4D;gBAC5D,IAAI,cACA,WAAW,IAAI,KAAK,UACpB,WAAW,MAAM,KAAK,SAAS;oBAE/B,qDAAqD;oBACrD,oBAAoB;oBAEpB,8CAA8C;oBAC9C,QAAQ,GAAG,CAAC;oBACZ,WAAW,SAAS,GAAG,EAAE;gBAC7B,OAAO,IAAI,cACP,WAAW,IAAI,KAAK,UACpB,WAAW,MAAM,KAAK,aAAa;oBAEnC,yDAAyD;oBACzD,wDAAwD;oBACxD,oBAAoB,WAAW,SAAS,IAAI,WAAW,SAAS,CAAC,MAAM,GAAG;gBAC9E,OAAO;oBACH,6BAA6B;oBAC7B,oBAAoB;gBACxB;YACJ;QACJ;qCAAG;QAAC;QAAQ;KAAW;IAEvB,oDAAoD;IACpD,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;sCAAE;YACN,2DAA2D;YAC3D,MAAM;4DAAgB,CAAC;oBACnB,2BAA2B;oBAC3B,IAAI,EAAE,GAAG,KAAK,UAAU;4BAsBd,oCACA;wBAtBN,oEAAoE;wBACpE,MAAM,gBAAgB,iBAAiB,OAAO;wBAC9C,IAAI,CAAC,eAAe;wBAEpB,8DAA8D;wBAC9D,IAAI,uBAAuB;4BACvB;wBACJ;wBAEA,mDAAmD;wBACnD,IAAI,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,CAAC,YAAY;4BACnD;4BACA;wBACJ;wBAEA,oDAAoD;wBACpD,EAAE,cAAc;wBAChB,EAAE,eAAe;wBAEjB,oCAAoC;wBACpC,MAAM,aAAa,WAAW,IAAI,KAAK,aACjC,EAAA,qCAAA,0BAA0B,OAAO,cAAjC,yDAAA,mCAAmC,UAAU,OAAM,QACnD,EAAA,yBAAA,cAAc,OAAO,cAArB,6CAAA,uBAAuB,UAAU,OAAM;wBAE7C,6CAA6C;wBAC7C,IAAI,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,aAAa;4BACpC,8CAA8C;4BAC9C,IAAI,YAAY;gCACZ,oBAAoB;gCACpB,yBAAyB;4BAC7B,OAAO;gCACH,kCAAkC;gCAClC;4BACJ;wBACJ,OAAO;gCAIG,qCACA;4BAJN,kBAAkB;4BAClB,qEAAqE;4BACrE,MAAM,aAAa,WAAW,IAAI,KAAK,aACjC,EAAA,sCAAA,0BAA0B,OAAO,cAAjC,0DAAA,oCAAmC,UAAU,OAAM,QACnD,EAAA,0BAAA,cAAc,OAAO,cAArB,8CAAA,wBAAuB,UAAU,OAAM;4BAE7C,mDAAmD;4BACnD,MAAM,eAAe,eAAe,OAAO;4BAC3C,MAAM,eAAe,CAAA,yBAAA,mCAAA,aAAc,WAAW,KAAI;4BAElD,uCAAuC;4BACvC,IAAI,eAAe;4BACnB,IAAI,WAAW,IAAI,KAAK,QAAQ,eAAe;4BAE/C,MAAM,iBAAiB,iBAAiB,gBAAgB,aAAa,IAAI,OAAO;4BAEhF,gFAAgF;4BAChF,IAAI,CAAC,cAAc,CAAC,gBAAgB;gCAChC;gCACA;4BACJ;4BAEA,8CAA8C;4BAC9C,IAAI,YAAY;gCACZ,oBAAoB;gCACpB,yBAAyB;4BAC7B,OAAO;gCACH,yBAAyB;gCACzB;4BACJ;4BACA;wBACJ;oBACJ;gBACJ;;YAEA,iFAAiF;YACjF,SAAS,gBAAgB,CAAC,WAAW,eAAe;YAEpD,sFAAsF;YACtF;8CAAO;oBACH,SAAS,mBAAmB,CAAC,WAAW,eAAe;gBAC3D;;QACJ;qCAAG;QAAC;QAAY;QAAY;QAAuB;QAAS;QAAkB;QAAkB;KAAe;IAE/G,yEAAyE;IACzE,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;sCAAE;YACN;8CAAO;oBACH,oCAAoC;oBACpC,IAAI,gBAAgB,OAAO,EAAE;wBACzB,aAAa,gBAAgB,OAAO;wBACpC,gBAAgB,OAAO,GAAG;oBAC9B;gBACJ;;QACJ;qCAAG,EAAE;IAEL,6CAA6C;IAC7C,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;sCAAE;YACN,MAAM;iEAAqB,CAAC;oBACxB,IAAI,cAAc,OAAO,IAAI,CAAC,cAAc,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAAW;wBAChF,sBAAsB;oBAC1B;gBACJ;;YAEA,IAAI,oBAAoB;gBACpB,SAAS,gBAAgB,CAAC,aAAa;YAC3C;YAEA;8CAAO;oBACH,SAAS,mBAAmB,CAAC,aAAa;gBAC9C;;QACJ;qCAAG;QAAC;KAAmB;IAEvB,4DAA4D;IAC5D,IAAI,CAAC,UAAU,CAAC,YAAY,OAAO;IAEnC,iEAAiE;IACjE,0CAA0C;IAE1C,wCAAwC;IACxC,MAAM,qBAAqB;YAGjB,oCACA;QAHN,oCAAoC;QACpC,MAAM,aAAa,WAAW,IAAI,KAAK,aACjC,EAAA,qCAAA,0BAA0B,OAAO,cAAjC,yDAAA,mCAAmC,UAAU,OAAM,QACnD,EAAA,yBAAA,cAAc,OAAO,cAArB,6CAAA,uBAAuB,UAAU,OAAM;QAE7C,oDAAoD;QACpD,IAAI,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,YAAY;YAClD,8CAA8C;YAC9C,IAAI,YAAY;gBACZ,yFAAyF;gBACzF,4EAA4E;gBAC5E,oBAAoB;gBACpB,yBAAyB;YAC7B,OAAO;gBACH,yBAAyB;gBACzB;YACJ;YACA;QACJ;QAEA,0CAA0C;QAC1C,IAAI,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,SAAS;gBAG1B,qCACA;YAHN,qEAAqE;YACrE,MAAM,aAAa,WAAW,IAAI,KAAK,aACjC,EAAA,sCAAA,0BAA0B,OAAO,cAAjC,0DAAA,oCAAmC,UAAU,OAAM,QACnD,EAAA,0BAAA,cAAc,OAAO,cAArB,8CAAA,wBAAuB,UAAU,OAAM;YAE7C,mDAAmD;YACnD,MAAM,eAAe,eAAe,OAAO;YAC3C,MAAM,eAAe,CAAA,yBAAA,mCAAA,aAAc,WAAW,KAAI;YAElD,uCAAuC;YACvC,IAAI,eAAe;YACnB,IAAI,WAAW,IAAI,KAAK,QAAQ,eAAe;YAE/C,MAAM,iBAAiB,iBAAiB,gBAAgB,aAAa,IAAI,OAAO;YAEhF,6EAA6E;YAC7E,IAAI,CAAC,cAAc,CAAC,gBAAgB;gBAChC;gBACA;YACJ;YAEA,8CAA8C;YAC9C,IAAI,YAAY;gBACZ,wCAAwC;gBACxC,oBAAoB;gBACpB,yBAAyB;YAC7B,OAAO;gBACH,yBAAyB;gBACzB;YACJ;YACA;QACJ;QACA;IACJ;IAEA,oEAAoE;IACpE,MAAM,wBAAwB;YAGpB,oCACA;QAHN,oCAAoC;QACpC,MAAM,aAAa,WAAW,IAAI,KAAK,aACjC,EAAA,qCAAA,0BAA0B,OAAO,cAAjC,yDAAA,mCAAmC,UAAU,OAAM,QACnD,EAAA,yBAAA,cAAc,OAAO,cAArB,6CAAA,uBAAuB,UAAU,OAAM;QAE7C,8CAA8C;QAC9C,IAAI,YAAY;YACZ,qDAAqD;YACrD,oBAAoB;YACpB,yBAAyB;QAC7B,OAAO;YACH,kCAAkC;YAClC;QACJ;IACJ;IAEA,MAAM,yBAAyB;QAC3B,yBAAyB;QAEzB,wDAAwD;QACxD,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,YAAY;gBACjC;aAAA,qCAAA,0BAA0B,OAAO,cAAjC,yDAAA,mCAAmC,IAAI;QAC3C,OAAO,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,QAAQ;gBACpC;aAAA,yBAAA,cAAc,OAAO,cAArB,6CAAA,uBAAuB,SAAS;QACpC;QACA;IACJ;IAEA,gCAAgC;IAChC,MAAM,8BAA8B;QAChC,yBAAyB;QAEzB,IAAI,qBAAqB,qBAAqB;YAC1C,mFAAmF;YACnF,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,YAAY;oBACjC,4DAA4D;gBAC5D;iBAAA,qCAAA,0BAA0B,OAAO,cAAjC,yDAAA,mCAAmC,MAAM;YAC7C,OAAO,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,QAAQ;oBACpC,4DAA4D;gBAC5D;iBAAA,yBAAA,cAAc,OAAO,cAArB,6CAAA,uBAAuB,MAAM;YACjC;YAEA,0CAA0C;YAC1C;QACJ,OAAO;YACH,wFAAwF;YACxF;QACJ;IACJ;IAEA,6BAA6B;IAC7B,MAAM,4BAA4B;QAC9B,yBAAyB;IAC7B;IAEA,wCAAwC;IACxC,MAAM,4BAA4B,CAAC;QAC/B,6EAA6E;QAC7E,IAAI,iBAAiB,OAAO,IAAI,CAAC,iBAAiB,OAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAW;YAClF;QACJ;IACJ;IAEA,2BAA2B;IAC3B,MAAM,wBAAwB;QAC1B,8DAA8D;QAC9D,IAAI,CAAC,mBAAmB,cAAc,OAAO,EAAE;YAC3C,wCAAwC;YACxC,MAAM,aAAa,cAAc,OAAO,CAAC,kBAAkB;YAE3D,IAAI,CAAC,YAAY;gBACb,0BAA0B;gBAC1B,aAAa,kBAAkB,wDAAwD;gBACvF,QAAQ,gCAAgC;YAC5C;YAEA,wFAAwF;YACxF,MAAM,sBAAsB,cAAc,OAAO,CAAC,sBAAsB;YACxE,MAAM,2BAA2B,cAAc,OAAO,CAAC,2BAA2B;YAElF,IAAI,6BAA6B,QAAQ;gBACrC,MAAM,qBAAqB,cAAc,OAAO,CAAC,kBAAkB;gBACnE,IAAI,CAAC,oBAAoB;oBACrB,uDAAuD;oBACvD,aAAa,4BAA4B,mDAAmD;oBAC5F,QAAQ,gCAAgC;gBAC5C;YACJ;YAEA,IAAI,wBAAwB,aAAa;gBACrC,4DAA4D;gBAC5D,MAAM,mBAAmB,cAAc,OAAO,CAAC,gBAAgB;gBAC/D,IAAI,CAAC,kBAAkB;oBACnB,mDAAmD;oBACnD,aAAa,wBAAwB,mEAAmE;oBACxG,uBAAuB;oBACvB,cAAc,OAAO,CAAC,YAAY,CAAC;oBACnC,QAAQ,gCAAgC;gBAC5C;YACJ,OAAO,IAAI,wBAAwB,cAAc;oBAaf,iDAAA;gBAZ9B,sDAAsD;gBACtD,MAAM,eAAe,cAAc,OAAO,CAAC,YAAY;gBACvD,IAAI,CAAC,cAAc;oBACf,gDAAgD;oBAChD,aAAa,qBAAqB,yEAAyE;oBAC3G,0BAA0B;oBAC1B,cAAc,OAAO,CAAC,YAAY,CAAC;oBACnC,QAAQ,gCAAgC;gBAC5C;gBAEA,2DAA2D;gBAC3D,4CAA4C;gBAC5C,MAAM,yBAAwB,kDAAA,CAAA,yBAAA,cAAc,OAAO,EAAC,wBAAwB,cAA9C,sEAAA,qDAAA;gBAE9B,IAAI,kCAAA,4CAAA,sBAAuB,aAAa,EAAE;oBACtC,wEAAwE;oBACxE,MAAM,UAAU,cAAc,OAAO,CAAC,yBAAyB,CAC3D,sBAAsB,aAAa,EACnC;wBACI,cAAc,cAAc,OAAO,CAAC,YAAY;wBAChD,kBAAkB;oBACtB;oBAGJ,IAAI,CAAC,SAAS;wBACV,QAAQ,oDAAoD;oBAChE;gBACJ;YACJ;QACJ;QAEA,sEAAsE;QACtE,mBAAmB,CAAC;IACxB;IAEA,kCAAkC;IAClC,MAAM,eAAe,SAAC,OAAe;YAAqB,yEAAgB;QACtE,uEAAuE;QACvE,IAAI,gBAAgB,OAAO,EAAE;YACzB,aAAa,gBAAgB,OAAO;YACpC,gBAAgB,OAAO,GAAG;QAC9B;QAEA,oBAAoB;QACpB,cAAc;QACd,oBAAoB;QACpB,cAAc;QACd,aAAa;QAEb,wDAAwD;QACxD,gBAAgB,OAAO,GAAG,WAAW;YACjC,aAAa;YACb,gBAAgB,OAAO,GAAG;QAC9B,GAAG,OAAO,4BAA4B;IAC1C;IAEA,+CAA+C;IAC/C,MAAM,kBAAkB;QACpB,yCAAyC;YACrC,yDAAyD;YACzD,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,UAAU,cAAc,OAAO,EAAE;gBACtD,sDAAsD;gBACtD,MAAM,UAAU,cAAc,OAAO,CAAC,qBAAqB;gBAC3D,IAAI,CAAC,SAAS;oBACV,QAAQ,8CAA8C;gBAC1D;YACJ;YAEA,kDAAkD;YAClD,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,cAAc,0BAA0B,OAAO,EAAE;gBACtE,MAAM,aAAa,0BAA0B,OAAO,CAAC,UAAU;gBAC/D,IAAI,CAAC,YAAY;oBACb,qBAAqB;oBACrB,aACI,2BACA,oCACA;oBAEJ,QAAQ,8CAA8C;gBAC1D;YACJ;YAEA,+CAA+C;YAC/C,wBAAwB;QAC5B;IACJ;IAEA,2EAA2E;IAC3E,MAAM,2CAA2C,CAAC;QAC9C,yDAAyD;QACzD,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,UAAU,cAAc,OAAO,EAAE;YACtD,IAAI,cAAc,OAAO,CAAC,0BAA0B,IAAI;gBACpD,iBAAiB,OAAO,GAAG;gBAC3B,oCAAoC;gBACpC;YACJ;QACJ;QAEA,2DAA2D;QAC3D;IACJ;IAEA,+DAA+D;IAC/D,MAAM,0BAA0B;QAC5B,oCAAoC;QAEpC,2BAA2B;QAC3B,iBAAiB,OAAO,GAAG;IAC/B;IAEA,2CAA2C;IAC3C,MAAM,gCAAgC;QAClC,oCAAoC;QAEpC,mEAAmE;QACnE,IAAI,iBAAiB,OAAO,EAAE;YAC1B,iBAAiB,OAAO;QAC5B;QAEA,2BAA2B;QAC3B,iBAAiB,OAAO,GAAG;IAC/B;IAEA,+BAA+B;IAC/B,MAAM,6BAA6B;QAC/B,wBAAwB;QAExB,oDAAoD;QACpD,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,YAAY;gBACjC,oCAAoC;YACpC;aAAA,qCAAA,0BAA0B,OAAO,cAAjC,yDAAA,mCAAmC,IAAI;QAC3C,OAAO,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,QAAQ;gBACpC,oCAAoC;YACpC;aAAA,yBAAA,cAAc,OAAO,cAArB,6CAAA,uBAAuB,aAAa;QACxC;IACJ;IAEA,4BAA4B;IAC5B,MAAM,mBAAmB;QACrB,wBAAwB;IAC5B;IAEA,MAAM,iBAAiB,qBAAqB;IAE5C,qBACI;;0BACI,4SAAC;gBACG,WAAU;gBACV,SAAS;0BAET,cAAA,4SAAC;oBACG,KAAK;oBACL,OAAO;wBACH,iBAAiB;wBACjB,QAAQ;oBACZ;oBACA,WAAU;oBACV,SAAS,CAAC,IAAM,EAAE,eAAe;;sCAGjC,4SAAC;4BACG,WAAU;4BACV,OAAO;gCAAE,iBAAiB;4BAAU;;8CAEpC,4SAAC;oCAAI,WAAU;8CACX,cAAA,4SAAC;wCACG,KAAK;wCACL,iBAAkB,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe;wCACxD,8BAA8B;wCAC9B,SAAS,CAAC;wCACN,gEAAgE;wCAChE,uEAAuE;wCACvE,sDAAsD;wCACtD,kDAAkD;wCACtD;wCACA,WAAW,CAAC;4CACR,IAAI,EAAE,GAAG,KAAK,SAAS;gDACnB,EAAE,cAAc;gDAChB,mCAAmC;gDAClC,EAAE,MAAM,CAAiB,IAAI;4CAClC;wCACJ;wCACA,SAAS,CAAC;4CACN,iCAAiC;4CACjC,EAAE,eAAe;4CAEjB,kCAAkC;4CAClC,IAAK,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,CAAC,YAAa;gDACrD;4CACJ;4CAEA,mDAAmD;4CACnD,MAAM,eAAe,EAAE,aAAa;4CACpC,aAAa,OAAO,CAAC,OAAO,GAAG;4CAE/B,kEAAkE;4CAClE,sDAAsD;4CACtD,IAAI,CAAC,aAAa,OAAO,CAAC,OAAO,EAAE;gDAC/B,aAAa,OAAO,CAAC,OAAO,GAAG;gDAE/B,yCAAyC;gDACzC,MAAM,QAAQ,SAAS,WAAW;gDAClC,MAAM,YAAY,OAAO,YAAY;gDACrC,MAAM,WAAW,aAAa,UAAU,IAAI;gDAE5C,IAAI,UAAU;wDACS;oDAAnB,MAAM,aAAa,EAAA,wBAAA,SAAS,WAAW,cAApB,4CAAA,sBAAsB,MAAM,KAAI;oDACnD,MAAM,QAAQ,CAAC,UAAU;oDACzB,MAAM,MAAM,CAAC,UAAU;oDACvB,sBAAA,gCAAA,UAAW,eAAe;oDAC1B,sBAAA,gCAAA,UAAW,QAAQ,CAAC;gDACxB;gDAEA,6CAA6C;gDAC7C,WAAW;oDACP,aAAa,OAAO,CAAC,OAAO,GAAG;gDACnC,GAAG;4CACP;wCACJ;wCACA,WAAW,AAAC,0KAA0P,OAAjF,AAAC,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,aAAc,yBAAyB;wCACnQ,oBAAkB,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,aAAa,0BAA0B;kDAE7E,uBAAA,iCAAA,WAAY,KAAK;;;;;;;;;;;8CAG1B,4SAAC;oCAAI,WAAU;;wCAEV,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,UAAU,kCAC5B,4SAAC;4CACG,SAAS;4CACT,WAAU;4CACV,cAAY,kBAAkB,iBAAiB;sDAE9C,gCACG;;kEACI,4SAAC,yRAAA,CAAA,QAAK;wDAAC,MAAM;wDAAI,WAAU;;;;;;oDAAS;;6EAIxC;;kEACI,4SAAC,uRAAA,CAAA,MAAG;wDAAC,MAAM;wDAAI,WAAU;;;;;;oDAAS;;;;;;;;wCAQjD,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,WACpB,CAAC,CAAC,uBAAA,iCAAA,WAAY,IAAI,MAAK,UAAU,oBAC7B,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,UAAU,mBAC/B;;8DAEI,4SAAC;oDACG,SAAS;wDACL,yCAAyC;4DACrC;wDACJ;oDACJ;oDACA,WAAU;oDACV,cAAY,AAAC,QAAwB,OAAjB,uBAAA,iCAAA,WAAY,IAAI,EAAC;;sEAErC,4SAAC,2RAAA,CAAA,QAAK;4DAAC,MAAM;4DAAI,WAAU;;;;;;wDAAS;;;;;;;8DAIxC,4SAAC;oDACG,SAAS;wDACL,yCAAyC;4DACrC,4DAA4D;4DAC5D,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,UAAU,cAAc,OAAO,EAAE;gEACtD,yDAAyD;gEACzD,MAAM,UAAU,cAAc,OAAO,CAAC,qBAAqB;gEAC3D,IAAI,CAAC,SAAS;oEACV,QAAQ,8CAA8C;gEAC1D;4DACJ;4DAEA,kDAAkD;4DAClD,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,cAAc,0BAA0B,OAAO,EAAE;gEACtE,MAAM,aAAa,0BAA0B,OAAO,CAAC,UAAU;gEAC/D,IAAI,CAAC,YAAY;oEACb,qBAAqB;oEACrB,aACI,2BACA,wCACA;oEAEJ,QAAQ,8CAA8C;gEAC1D;4DACJ;4DAEA,kDAAkD;4DAClD,6BAA6B;wDACjC;oDACJ;oDACA,WAAU;oDACV,cAAY,AAAC,WAA2B,OAAjB,uBAAA,iCAAA,WAAY,IAAI;;sEAEvC,4SAAC,uRAAA,CAAA,MAAG;4DAAC,MAAM;4DAAI,WAAU;;;;;;wDAAS;;;;;;;;;wCAMjD,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,cAAc,CAAC,gCAClD;;gDACK,+BACG,4SAAC;oDAAI,WAAU;;sEACX,4SAAC;4DACG,SAAS,IAAM,sBAAsB,CAAC;4DACtC,WAAU;4DACV,cAAW;;8EAEX,4SAAC;oEAAI,OAAM;oEAA6B,OAAM;oEAAK,QAAO;oEAAK,SAAQ;oEAAY,MAAK;oEAAO,QAAO;oEAAe,aAAY;oEAAI,eAAc;oEAAQ,gBAAe;oEAAQ,WAAU;;sFACxL,4SAAC;4EAAO,IAAG;4EAAK,IAAG;4EAAK,GAAE;;;;;;sFAC1B,4SAAC;4EAAS,QAAO;;;;;;;;;;;;gEAEpB,CAAA,GAAA,oIAAA,CAAA,qBAAkB,AAAD,EAAE;;;;;;;wDAEvB,oCACG,4SAAC;4DAAI,KAAK;4DAAe,WAAU;;8EAC/B,4SAAC,mQAAA,CAAA,UAAU;oEACP,UAAU;oEACV,UAAU,CAAC,OAAS,+BAA+B;oEACnD,cAAc;oEACd,YAAW;oEACX,eAAe;oEACf,YAAW;oEACX,aAAY;oEACZ,SAAS,IAAI;oEACb,WAAU;oEACV,kBAAiB;oEACjB,mBAAkB;oEAClB,MAAM;;;;;;8EAEV,4SAAC;oEAAI,WAAU;8EACX,cAAA,4SAAC;wEACG,SAAS,IAAM,sBAAsB;wEACrC,WAAU;kFACb;;;;;;;;;;;;;;;;;;;;;;;8DAQrB,4SAAC;oDACG,SAAS;oDACT,WAAU;oDACV,cAAW;;sEAEX,4SAAC,2RAAA,CAAA,QAAK;4DAAC,MAAM;4DAAI,WAAU;;;;;;wDAAS;;;;;;;8DAGxC,4SAAC;oDACG,SAAS;oDACT,WAAU;oDACV,cAAW;;sEAEX,4SAAC,mRAAA,CAAA,IAAC;4DAAC,MAAM;4DAAI,WAAU;;;;;;wDAAS;;;;;;;;2DAIxC,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,CAAC,cAAc,CAAC,iCACtD;;gDACK,WAAW,oBAAoB,kBAC5B,4SAAC,gIAAA,CAAA,UAAO;oDAAC,SAAS,AAAC,iBAA8E,OAA9D,CAAA,GAAA,oIAAA,CAAA,qBAAkB,AAAD,EAAE,IAAI,KAAK,WAAW,oBAAoB;oDAAM,UAAS;8DACzG,cAAA,4SAAC;wDACG,WAAU;wDACV,cAAW;;0EAEX,4SAAC;gEAAI,OAAM;gEAA6B,OAAM;gEAAK,QAAO;gEAAK,SAAQ;gEAAY,MAAK;gEAAO,QAAO;gEAAe,aAAY;gEAAI,eAAc;gEAAQ,gBAAe;gEAAQ,WAAU;;kFACxL,4SAAC;wEAAO,IAAG;wEAAK,IAAG;wEAAK,GAAE;;;;;;kFAC1B,4SAAC;wEAAS,QAAO;;;;;;;;;;;;4DACf;;;;;;;;;;;;8DAKlB,4SAAC;oDACG,SAAS;oDACT,WAAU;oDACV,cAAW;;sEAEX,4SAAC,6RAAA,CAAA,SAAM;4DAAC,MAAM;4DAAI,WAAU;;;;;;wDAAS;;;;;;;;;;;;;;;8CAQrD,4SAAC;oCACG,SAAS;oCACT,WAAU;oCACV,cAAW;8CAEX,cAAA,4SAAC,mRAAA,CAAA,IAAC;wCAAC,MAAM;;;;;;;;;;;;;;;;;sCAKjB,4SAAC;4BACG,WAAU;4BACV,OAAO;gCAAE,QAAQ;4BAAqB;4BACtC,SAAS,CAAC;gCACN,2CAA2C;gCAC3C,EAAE,eAAe;gCAEjB,4CAA4C;gCAC5C,IAAI,CAAA,uBAAA,iCAAA,WAAY,MAAM,MAAK,eAAe,YAAY;oCAClD,mBAAmB;oCACnB;gCACJ;4BACJ;sCAEC,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,2BAClB,4SAAC;gCACG,KAAK;gCAEL,UAAU,WAAW,MAAM,KAAK,eAAe,CAAC;gCAChD,yBAAyB;gCACzB,kBAAkB;gCAClB,iBAAiB;gCACjB,QAAQ,WAAW,EAAE;gCACrB,YAAY;gCACZ,oBAAoB,gBAAgB,cAAc,WAAW,KAAK;gCAClE,kBAAkB,CAAC;oCACf,yBAAyB;oCACzB,IAAI,aAAa;wCACb,qCAAqC;wCACrC,wDAAwD;wCACxD,IAAI,cAAc,YAAY,MAAM,KAAK,aAAa;4CAClD,WAAW,MAAM,GAAG;4CACpB,WAAW,KAAK,GAAG,YAAY,KAAK;4CACpC,oEAAoE;4CACpE,WAAW,oBAAoB,GAAG,YAAY,oBAAoB;4CAElE,IAAI,YAAY,oBAAoB,EAAE;gDAClC,iBAAiB,IAAI,KAAK,YAAY,oBAAoB;4CAC9D,OAAO;gDACH,iBAAiB;4CACrB;4CAEA,IAAI,YAAY,MAAM,EAAE;gDACpB,6CAA6C;gDAC7C,WAAW,OAAO,GAAG,YAAY,MAAM;4CAC3C;wCACJ;wCAEA,iDAAiD;wCACjD;wCAEA,0BAA0B;wCAC1B,MAAM,iBAAiB,YAAY,oBAAoB,GAAG,6DAA6D;wCACvH,aAAa,aAAa;oCAC9B;oCACA,uCAAuC;oCACvC,6BAA6B;gCACjC;gCACA,eAAe,CAAC;oCACZ,6EAA6E;oCAC7E,IAAI,aAAa;wCACb,mDAAmD;wCACnD,IAAI,YAAY;4CACZ,WAAW,KAAK,GAAG,YAAY,KAAK;4CACpC,iDAAiD;4CACjD,WAAW,oBAAoB,GAAG,YAAY,oBAAoB;4CAElE,IAAI,YAAY,MAAM,EAAE;gDACpB,6CAA6C;gDAC7C,WAAW,OAAO,GAAG,YAAY,MAAM;4CAC3C;wCACJ;wCAEA,kCAAkC;wCAClC;wCAEA,2CAA2C;wCAC3C,aAAa,SAAU;oCAC3B;gCACJ;+BA9DK,AAAC,YAA4B,OAAjB,WAAW,EAAE,EAAC,KAAc,OAAX;;;;2EAgEtC,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,uBACrB,4SAAC;gCACG,KAAK;gCAEL,oBAAoB,gBAAgB,cAAc,WAAW,KAAK;gCAClE,UAAU,CAAC;oCACP,qEAAqE;oCACrE,oBAAoB,UAAU,MAAM,GAAG;oCAEvC,oEAAoE;oCACpE,IAAI,YAAY;wCACZ,WAAW,SAAS,GAAG;oCAC3B;oCAEA,0BAA0B;oCAC1B,oBAAoB;gCACxB;gCACA,eAAe;gCACf,YAAY;gCACZ,UAAU,WAAW,MAAM,KAAK,eAAe,CAAC;gCAChD,QAAQ,WAAW,EAAE;gCACrB,QAAQ,WAAW,MAAM;gCACzB,UAAU,WAAW,IAAI;gCACzB,yBAAyB;gCACzB,iBAAiB;gCACjB,mBAAmB,CAAC,SAAS;oCACzB,qEAAqE;oCACrE,aAAa,SAAS,aAAa;gCACvC;gCACA,UAAU;gCACV,MAAM,EAAE,iBAAA,2BAAA,KAAM,EAAE;gCAChB,eAAe,CAAC;oCACZ,sBAAsB;oCACtB,IAAI,aAAa;wCACb,6DAA6D;wCAC7D,IAAI,YAAY;4CACZ,WAAW,KAAK,GAAG,YAAY,KAAK;4CACpC,iDAAiD;4CACjD,WAAW,oBAAoB,GAAG,YAAY,oBAAoB;4CAElE,IAAI,YAAY,SAAS,EAAE;gDACvB,WAAW,SAAS,GAAG,YAAY,SAAS;4CAChD;wCACJ;wCAEA,oCAAoC;wCACpC;wCAEA,2CAA2C;wCAC3C,aAAa,SAAS,AAAC,QAAuB,OAAhB,WAAW,IAAI,EAAC;oCAClD;gCACJ;gCACA,kBAAkB,CAAC;oCACf,yBAAyB;oCACzB,IAAI,aAAa;wCACb,qCAAqC;wCACrC,qCAAqC;wCACrC,wDAAwD;wCACxD,IAAI,cAAc,YAAY,MAAM,KAAK,aAAa;4CAClD,WAAW,MAAM,GAAG;4CACpB,WAAW,KAAK,GAAG,YAAY,KAAK;4CACpC,oEAAoE;4CACpE,WAAW,oBAAoB,GAAG,YAAY,oBAAoB;4CAElE,IAAI,YAAY,oBAAoB,EAAE;gDAClC,iBAAiB,IAAI,KAAK,YAAY,oBAAoB;4CAC9D,OAAO;gDACH,iBAAiB;4CACrB;4CAEA,IAAI,YAAY,SAAS,EAAE;gDACvB,WAAW,SAAS,GAAG,YAAY,SAAS;4CAChD;wCACJ;wCAEA,iDAAiD;wCACjD,gDAAgD;wCAChD;wCAEA,0BAA0B;wCAC1B,MAAM,iBAAiB,YAAY,oBAAoB,GAAI,gDAAgD;wCAC3G,aAAa,aAAa;oCAC9B;oCAEA,uCAAuC;oCACvC,6BAA6B;gCACjC;gCACA,UAAU;gCACV,6CAA6C;oCACzC,mCAAmC;gCACvC;+BAvFK,AAAC,QAAwB,OAAjB,WAAW,EAAE,EAAC,KAAc,OAAX;;;;2EAyFlC;;;;;;;;;;;;;;;;;0BAMhB,4SAAC,2IAAA,CAAA,UAAkB;gBACf,MAAM;gBACN,OAAO,iBAAiB,uBAAuB;gBAC/C,SACI,iBAEI,4GAA4G;gBAEpH,mBAAmB,iBAAiB,SAAS;gBAC7C,kBAAkB,iBAAiB,YAAY;gBAC/C,WAAW,iBAAiB,yBAAyB;gBACrD,UAAU,iBAAiB,8BAA8B;gBACzD,gBAAgB,iBAAiB,IAAM,yBAAyB,SAAS;gBACzE,MAAM,iBAAiB,SAAS;gBAChC,iBAAiB;gBACjB,SAAS,IAAM,yBAAyB;;;;;;0BAI5C,4SAAC,2IAAA,CAAA,UAAkB;gBACf,MAAM;gBACN,OAAM;gBACN,SAAQ;gBACR,mBAAkB;gBAClB,kBAAiB;gBACjB,WAAW;gBACX,UAAU;gBACV,MAAK;;;;;;0BAIT,4SAAC,2IAAA,CAAA,UAAkB;gBACf,MAAM;gBACN,OAAM;gBACN,SAAU;gBACV,mBAAkB;gBAClB,kBAAiB;gBACjB,WAAW;gBACX,UAAU;gBACV,MAAK;;;;;;0BAGT,4SAAC,2IAAA,CAAA,UAAkB;gBACf,MAAM;gBACN,OAAM;gBACN,SAAU;gBACV,mBAAkB;gBAClB,kBAAiB;gBACjB,WAAW;oBACP,mCAAmC;gBACvC;gBACA,UAAU;oBACN,mCAAmC;gBACvC;gBACA,MAAK;;;;;;0BAIT,4SAAC,8HAAA,CAAA,UAAK;gBACF,MAAM;gBACN,OAAO;gBACP,aAAa;gBACb,OAAO;gBACP,SAAS,IAAM,aAAa;;;;;;;;AAI5C;GArjCM;;QAsBe,qHAAA,CAAA,UAAO;;;MAtBtB;uCAujCS","debugId":null}},
    {"offset": {"line": 3290, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/CourseModuleList.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { ChevronUp, ChevronDown, ChevronRight, ChevronDown as ChevronDownExpand, Plus, HelpCircle, Trash, Clipboard, Check, Loader2, Copy, FileText, Brain, BookOpen, PenSquare, FileQuestion, ClipboardList, Lock, Ban } from \"lucide-react\";\r\nimport { Module, ModuleItem, Quiz } from \"@/types/course\";\r\nimport { QuizQuestion } from \"@/types/quiz\"; // Import from types instead\r\nimport CourseItemDialog from \"@/components/CourseItemDialog\";\r\nimport ConfirmationDialog from \"@/components/ConfirmationDialog\";\r\nimport Tooltip from \"@/components/Tooltip\"; // Import the Tooltip component\r\nimport { formatScheduleDate } from \"@/lib/utils/dateFormat\"; // Import the utility function\r\n\r\n\r\ninterface CourseModuleListProps {\r\n    modules: Module[];\r\n    mode: 'edit' | 'view'; // 'edit' for teacher editing, 'view' for learner viewing\r\n    onToggleModule: (moduleId: string) => void;\r\n    onOpenItem?: (moduleId: string, itemId: string) => void;\r\n    onMoveItemUp?: (moduleId: string, itemId: string) => void;\r\n    onMoveItemDown?: (moduleId: string, itemId: string) => void;\r\n    onDeleteItem?: (moduleId: string, itemId: string) => void;\r\n    onAddLearningMaterial?: (moduleId: string) => Promise<void>;\r\n    onAddQuiz?: (moduleId: string) => Promise<void>;\r\n    onMoveModuleUp?: (moduleId: string) => void;\r\n    onMoveModuleDown?: (moduleId: string) => void;\r\n    onDeleteModule?: (moduleId: string) => void;\r\n    onEditModuleTitle?: (moduleId: string) => void;\r\n    expandedModules?: Record<string, boolean>; // For learner view\r\n    saveModuleTitle?: (moduleId: string) => void; // Function to save module title\r\n    cancelModuleEditing?: (moduleId: string) => void; // Function to cancel module title editing\r\n    completedTaskIds?: Record<string, boolean>; // Added prop for completed task IDs\r\n    completedQuestionIds?: Record<string, Record<string, boolean>>; // Add prop for partially completed quiz questions\r\n    schoolId?: string; // Add school ID for fetching scorecards\r\n    courseId?: string; // Add courseId for fetching learning materials\r\n\r\n    // Dialog-related props\r\n    isDialogOpen?: boolean;\r\n    activeItem?: ModuleItem | null;\r\n    activeModuleId?: string | null;\r\n    isEditMode?: boolean;\r\n    isPreviewMode?: boolean;\r\n    showPublishConfirmation?: boolean;\r\n    handleConfirmPublish?: () => void;\r\n    handleCancelPublish?: () => void;\r\n    closeDialog?: () => void;\r\n    saveItem?: () => void;\r\n    cancelEditMode?: () => void;\r\n    enableEditMode?: () => void;\r\n    handleQuizContentChange?: (questions: QuizQuestion[]) => void;\r\n    setShowPublishConfirmation?: (show: boolean) => void;\r\n    onDuplicateItem?: (moduleId: string, taskData: any, ordering: number) => Promise<void>;\r\n}\r\n\r\nexport default function CourseModuleList({\r\n    modules,\r\n    mode,\r\n    onToggleModule,\r\n    onOpenItem,\r\n    onMoveItemUp,\r\n    onMoveItemDown,\r\n    onDeleteItem,\r\n    onAddLearningMaterial,\r\n    onAddQuiz,\r\n    onMoveModuleUp,\r\n    onMoveModuleDown,\r\n    onDeleteModule,\r\n    onEditModuleTitle,\r\n    expandedModules = {},\r\n    saveModuleTitle = () => { }, // Default empty function\r\n    cancelModuleEditing = () => { }, // Default empty function\r\n    completedTaskIds = {}, // Default empty object for completed task IDs\r\n    completedQuestionIds = {}, // Default empty object for completed question IDs\r\n    schoolId,\r\n    courseId,\r\n\r\n    // Dialog-related props\r\n    isDialogOpen = false,\r\n    activeItem = null,\r\n    activeModuleId = null,\r\n    isEditMode = false,\r\n    isPreviewMode = false,\r\n    showPublishConfirmation = false,\r\n    handleConfirmPublish = () => { },\r\n    handleCancelPublish = () => { },\r\n    closeDialog = () => { },\r\n    saveItem = () => { },\r\n    cancelEditMode = () => { },\r\n    enableEditMode = () => { },\r\n    handleQuizContentChange = () => { },\r\n    setShowPublishConfirmation = () => { },\r\n    onDuplicateItem,\r\n}: CourseModuleListProps) {\r\n\r\n    // Track completed items - initialize with completedTaskIds prop\r\n    const [completedItems, setCompletedItems] = useState<Record<string, boolean>>(completedTaskIds);\r\n\r\n    // State to track module deletion confirmation\r\n    const [moduleToDelete, setModuleToDelete] = useState<string | null>(null);\r\n\r\n    // State to track deletion in progress\r\n    const [deletingTaskId, setDeletingTaskId] = useState<string | null>(null);\r\n\r\n    // State to track module deletion in progress\r\n    const [deletingModuleId, setDeletingModuleId] = useState<string | null>(null);\r\n\r\n    // State to track task deletion confirmation\r\n    const [taskToDelete, setTaskToDelete] = useState<{ moduleId: string, itemId: string, itemType?: string } | null>(null);\r\n\r\n    // States to track module swapping in progress\r\n    const [swappingModuleUpId, setSwappingModuleUpId] = useState<string | null>(null);\r\n    const [swappingModuleDownId, setSwappingModuleDownId] = useState<string | null>(null);\r\n\r\n    // States to track task swapping in progress\r\n    const [swappingTaskUpId, setSwappingTaskUpId] = useState<string | null>(null);\r\n    const [swappingTaskDownId, setSwappingTaskDownId] = useState<string | null>(null);\r\n\r\n    // State to track task duplication in progress\r\n    const [duplicatingTaskId, setDuplicatingTaskId] = useState<string | null>(null);\r\n\r\n    // Update completedItems when completedTaskIds changes\r\n    useEffect(() => {\r\n        // Only update the state if the values are actually different\r\n        // This prevents an infinite update loop\r\n        const hasChanged = JSON.stringify(completedItems) !== JSON.stringify(completedTaskIds);\r\n        if (hasChanged) {\r\n            setCompletedItems(completedTaskIds);\r\n        }\r\n    }, [completedTaskIds, completedItems]);\r\n\r\n    // Refs for the dialog\r\n    const dialogTitleRef = useRef<HTMLHeadingElement | null>(null);\r\n    const dialogContentRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    // Function to focus the editor\r\n    const focusEditor = () => {\r\n        // First, blur the title element\r\n        if (dialogTitleRef.current) {\r\n            dialogTitleRef.current.blur();\r\n        }\r\n\r\n        // Then try to find and focus the editor\r\n        setTimeout(() => {\r\n            try {\r\n                const selectors = [\r\n                    '.bn-editor',\r\n                    '.ProseMirror',\r\n                    '.dialog-content-editor [contenteditable=\"true\"]',\r\n                    '.dialog-content-editor .bn-container',\r\n                    '.dialog-content-editor [tabindex=\"0\"]',\r\n                    '.dialog-content-editor [role=\"textbox\"]',\r\n                    '.dialog-content-editor div[contenteditable]'\r\n                ];\r\n\r\n                for (const selector of selectors) {\r\n                    const el = document.querySelector(selector);\r\n                    if (el instanceof HTMLElement) {\r\n                        el.focus();\r\n                        return; // Exit once we've focused an element\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error('Error focusing editor:', err);\r\n            }\r\n        }, 200);\r\n    };\r\n\r\n    // Function to handle swapping modules via API\r\n    const swapModules = async (moduleId1: string, moduleId2: string) => {\r\n        if (!courseId) {\r\n            console.error('Course ID is required for swapping modules');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/courses/${courseId}/milestones/swap`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    milestone_1_id: moduleId1,\r\n                    milestone_2_id: moduleId2,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to swap modules: ${response.statusText}`);\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error swapping modules:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // Function to handle swapping tasks via API\r\n    const swapTasks = async (taskId1: string, taskId2: string) => {\r\n        if (!courseId) {\r\n            console.error('Course ID is required for swapping modules');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/courses/${courseId}/tasks/swap`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    task_1_id: taskId1,\r\n                    task_2_id: taskId2,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to swap tasks: ${response.statusText}`);\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error swapping tasks:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // Function to handle moving a module up (with API call)\r\n    const handleMoveModuleUp = async (moduleId: string) => {\r\n        // Find the module and its index\r\n        const index = modules.findIndex(m => m.id === moduleId);\r\n        if (index <= 0) return; // Can't move up if it's the first one\r\n\r\n        // Get the previous module\r\n        const previousModule = modules[index - 1];\r\n        if (!previousModule) return;\r\n\r\n        try {\r\n            // Set loading state\r\n            setSwappingModuleUpId(moduleId);\r\n\r\n            // Call the API to swap modules\r\n            await swapModules(moduleId, previousModule.id);\r\n\r\n            // Update UI via the parent component's handler\r\n            if (onMoveModuleUp) {\r\n                onMoveModuleUp(moduleId);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to move module up:', error);\r\n            // Could add a toast notification here\r\n        } finally {\r\n            // Clear loading state\r\n            setSwappingModuleUpId(null);\r\n        }\r\n    };\r\n\r\n    // Function to handle moving a module down (with API call)\r\n    const handleMoveModuleDown = async (moduleId: string) => {\r\n        // Find the module and its index\r\n        const index = modules.findIndex(m => m.id === moduleId);\r\n        if (index === -1 || index === modules.length - 1) return; // Can't move down if it's the last one\r\n\r\n        // Get the next module\r\n        const nextModule = modules[index + 1];\r\n        if (!nextModule) return;\r\n\r\n        try {\r\n            // Set loading state\r\n            setSwappingModuleDownId(moduleId);\r\n\r\n            // Call the API to swap modules\r\n            await swapModules(moduleId, nextModule.id);\r\n\r\n            // Update UI via the parent component's handler\r\n            if (onMoveModuleDown) {\r\n                onMoveModuleDown(moduleId);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to move module down:', error);\r\n            // Could add a toast notification here\r\n        } finally {\r\n            // Clear loading state\r\n            setSwappingModuleDownId(null);\r\n        }\r\n    };\r\n\r\n    // Function to handle moving a task up (with API call)\r\n    const handleMoveTaskUp = async (moduleId: string, taskId: string) => {\r\n        // Find the module\r\n        const module = modules.find(m => m.id === moduleId);\r\n        if (!module) return;\r\n\r\n        // Find the task and its index\r\n        const index = module.items.findIndex(item => item.id === taskId);\r\n        if (index <= 0) return; // Can't move up if it's the first one\r\n\r\n        // Get the previous task\r\n        const previousTask = module.items[index - 1];\r\n        if (!previousTask) return;\r\n\r\n        try {\r\n            // Set loading state\r\n            setSwappingTaskUpId(taskId);\r\n\r\n            // Call the API to swap tasks\r\n            await swapTasks(taskId, previousTask.id);\r\n\r\n            // Update UI via the parent component's handler\r\n            if (onMoveItemUp) {\r\n                onMoveItemUp(moduleId, taskId);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to move task up:', error);\r\n            // Could add a toast notification here\r\n        } finally {\r\n            // Clear loading state\r\n            setSwappingTaskUpId(null);\r\n        }\r\n    };\r\n\r\n    // Function to handle moving a task down (with API call)\r\n    const handleMoveTaskDown = async (moduleId: string, taskId: string) => {\r\n        // Find the module\r\n        const module = modules.find(m => m.id === moduleId);\r\n        if (!module) return;\r\n\r\n        // Find the task and its index\r\n        const index = module.items.findIndex(item => item.id === taskId);\r\n        if (index === -1 || index === module.items.length - 1) return; // Can't move down if it's the last one\r\n\r\n        // Get the next task\r\n        const nextTask = module.items[index + 1];\r\n        if (!nextTask) return;\r\n\r\n        try {\r\n            // Set loading state\r\n            setSwappingTaskDownId(taskId);\r\n\r\n            // Call the API to swap tasks\r\n            await swapTasks(taskId, nextTask.id);\r\n\r\n            // Update UI via the parent component's handler\r\n            if (onMoveItemDown) {\r\n                onMoveItemDown(moduleId, taskId);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to move task down:', error);\r\n            // Could add a toast notification here\r\n        } finally {\r\n            // Clear loading state\r\n            setSwappingTaskDownId(null);\r\n        }\r\n    };\r\n\r\n    // Get the appropriate expanded state based on mode\r\n    const getIsExpanded = (moduleId: string) => {\r\n        if (mode === 'edit') {\r\n            return modules.find(m => m.id === moduleId)?.isExpanded || false;\r\n        } else {\r\n            return expandedModules[moduleId] || false;\r\n        }\r\n    };\r\n\r\n    // Function to format unlock date for display\r\n    const formatUnlockDate = (unlockAt: string) => {\r\n        const date = new Date(unlockAt);\r\n        return date.toLocaleDateString('en-US', {\r\n            weekday: 'long',\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n        });\r\n    };\r\n\r\n    // Handle module click based on mode\r\n    const handleModuleClick = (e: React.MouseEvent, moduleId: string) => {\r\n        // Find the module\r\n        const module = modules.find(m => m.id === moduleId);\r\n        if (!module) return;\r\n\r\n        // Prevent clicking on locked modules\r\n        if (module.unlockAt) {\r\n            return;\r\n        }\r\n\r\n        // If in edit mode and module is in editing mode, don't toggle expansion\r\n        if (mode === 'edit' && module.isEditing) {\r\n            return;\r\n        }\r\n\r\n        // Prevent toggling if clicking on buttons\r\n        if (\r\n            (e.target as HTMLElement).tagName === 'BUTTON' ||\r\n            (e.target as HTMLElement).closest('button')\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        onToggleModule(moduleId);\r\n    };\r\n\r\n    // Function to handle task deletion with API call\r\n    const handleDeleteTask = async (moduleId: string, itemId: string) => {\r\n        try {\r\n            setDeletingTaskId(itemId);\r\n\r\n            // Make the API call to delete the task\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/${itemId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to delete task: ${response.statusText}`);\r\n            }\r\n\r\n            // If the API call was successful, update the UI\r\n            if (onDeleteItem) {\r\n                onDeleteItem(moduleId, itemId);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Error deleting task:', error);\r\n            // You could add a toast notification here for the error\r\n        } finally {\r\n            setDeletingTaskId(null);\r\n        }\r\n    };\r\n\r\n    // Function to handle task delete confirmation\r\n    const handleConfirmTaskDelete = () => {\r\n        if (taskToDelete) {\r\n            handleDeleteTask(taskToDelete.moduleId, taskToDelete.itemId);\r\n        }\r\n        setTaskToDelete(null);\r\n    };\r\n\r\n    // Function to cancel task deletion\r\n    const handleCancelTaskDelete = () => {\r\n        setTaskToDelete(null);\r\n    };\r\n\r\n    // Function to handle module delete confirmation\r\n    const handleConfirmModuleDelete = async () => {\r\n        if (moduleToDelete && onDeleteModule) {\r\n            try {\r\n                setDeletingModuleId(moduleToDelete);\r\n\r\n                // Make the API call to delete the module (milestone)\r\n                const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/milestones/${moduleToDelete}`, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to delete module: ${response.statusText}`);\r\n                }\r\n\r\n                // If the API call was successful, update the UI\r\n                onDeleteModule(moduleToDelete);\r\n\r\n            } catch (error) {\r\n                console.error('Error deleting module:', error);\r\n                // Could add a toast notification here for the error\r\n            } finally {\r\n                setDeletingModuleId(null);\r\n            }\r\n        }\r\n        setModuleToDelete(null);\r\n    };\r\n\r\n    // Function to cancel module deletion\r\n    const handleCancelModuleDelete = () => {\r\n        setModuleToDelete(null);\r\n    };\r\n\r\n    // Function to get item type name for display\r\n    const getItemTypeName = (type?: string) => {\r\n        switch (type) {\r\n            case 'material': return 'learning material';\r\n            case 'quiz': return 'quiz';\r\n        }\r\n    };\r\n\r\n    // Function to handle task duplication with API call\r\n    const handleDuplicateTask = async (moduleId: string, itemId: string) => {\r\n        if (!courseId) {\r\n            console.error('Course ID is required for cloning tasks');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setDuplicatingTaskId(itemId);\r\n\r\n            // Make the API call to duplicate the task\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/duplicate`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    task_id: parseInt(itemId),\r\n                    milestone_id: parseInt(moduleId),\r\n                    course_id: parseInt(courseId)\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to duplicate task: ${response.statusText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // If the API call was successful, update the UI\r\n            if (onDuplicateItem) {\r\n                await onDuplicateItem(moduleId, data['task'], data['ordering']);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Error duplicating task:', error);\r\n            // You could add a toast notification here for the error\r\n        } finally {\r\n            setDuplicatingTaskId(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"space-y-2\">\r\n                {modules.map((module, index) => {\r\n                    const moduleContent = (\r\n                        <div\r\n                            key={module.id}\r\n                            className=\"border-none rounded-lg transition-colors\"\r\n                            style={{ backgroundColor: module.backgroundColor }}\r\n                        >\r\n                            <div className=\"flex flex-col\">\r\n                                {/* Module header with title and buttons */}\r\n                                <div\r\n                                    className={`flex items-center p-4 pb-3 ${module.unlockAt ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}`}\r\n                                    onClick={(e) => handleModuleClick(e, module.id)}\r\n                                >\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            // Prevent toggling locked modules\r\n                                            if (module.unlockAt) return;\r\n\r\n                                            onToggleModule(module.id);\r\n                                        }}\r\n                                        className={`hidden sm:block mr-2 transition-colors ${module.unlockAt ? 'text-gray-500 cursor-not-allowed' : 'text-gray-400 hover:text-white cursor-pointer'}`}\r\n                                        aria-label={getIsExpanded(module.id) ? \"Collapse module\" : \"Expand module\"}\r\n                                        disabled={!!module.unlockAt}\r\n                                    >\r\n                                        {getIsExpanded(module.id) ? <ChevronDownExpand size={18} /> : <ChevronRight size={18} />}\r\n                                    </button>\r\n                                    <div className=\"flex-1 mr-2 sm:mr-4\">\r\n                                        {mode === 'edit' && module.isEditing ? (\r\n                                            <h2\r\n                                                contentEditable\r\n                                                suppressContentEditableWarning\r\n                                                className=\"text-lg sm:text-xl font-light text-white outline-none empty:before:content-[attr(data-placeholder)] empty:before:text-gray-400 empty:before:pointer-events-none\"\r\n                                                data-module-id={module.id}\r\n                                                data-placeholder=\"New Module\"\r\n                                                onClick={(e) => e.stopPropagation()}\r\n                                            >\r\n                                                {module.title}\r\n                                            </h2>\r\n                                        ) : (\r\n                                            <div className=\"flex items-center\">\r\n                                                <h2\r\n                                                    className={`text-lg sm:text-xl font-light ${module.unlockAt ? 'text-gray-400' : 'text-white'}`}\r\n                                                >\r\n                                                    {module.title || \"New Module\"}\r\n                                                </h2>\r\n                                                {module.unlockAt && (\r\n                                                    <Lock size={16} className=\"ml-2 text-gray-400\" />\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* Module action buttons - only in edit mode */}\r\n                                    {mode === 'edit' && (\r\n                                        <div className=\"flex items-center space-x-2\">\r\n                                            {module.isEditing ? (\r\n                                                <>\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            saveModuleTitle(module.id);\r\n                                                        }}\r\n                                                        className=\"px-3 py-1 text-sm text-black bg-gray-300 hover:bg-gray-400 border border-black hover:border-gray-600 rounded-md transition-colors cursor-pointer flex items-center\"\r\n                                                        aria-label=\"Save module title\"\r\n                                                    >\r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\">\r\n                                                            <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\r\n                                                            <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\r\n                                                            <polyline points=\"7 3 7 8 15 8\"></polyline>\r\n                                                        </svg>\r\n                                                        Save\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            cancelModuleEditing(module.id);\r\n                                                        }}\r\n                                                        className=\"px-3 py-1 text-sm text-gray-300 hover:text-white transition-colors focus:outline-none cursor-pointer flex items-center\"\r\n                                                        aria-label=\"Cancel editing\"\r\n                                                    >\r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\">\r\n                                                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                                                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                                                        </svg>\r\n                                                        Cancel\r\n                                                    </button>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            if (onEditModuleTitle) {\r\n                                                                onEditModuleTitle(module.id);\r\n                                                            }\r\n                                                        }}\r\n                                                        className=\"px-3 py-1 text-sm text-black bg-gray-300 hover:bg-gray-400 border border-black hover:border-gray-600 rounded-md transition-colors cursor-pointer flex items-center\"\r\n                                                        aria-label=\"Edit module title\"\r\n                                                    >\r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\">\r\n                                                            <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n                                                            <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n                                                        </svg>\r\n                                                        Edit\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            handleMoveModuleUp(module.id);\r\n                                                        }}\r\n                                                        disabled={index === 0 || swappingModuleUpId === module.id}\r\n                                                        className=\"p-1 text-gray-400 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors cursor-pointer\"\r\n                                                        aria-label=\"Move module up\"\r\n                                                    >\r\n                                                        {swappingModuleUpId === module.id ? (\r\n                                                            <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                        ) : (\r\n                                                            <ChevronUp size={18} />\r\n                                                        )}\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            handleMoveModuleDown(module.id);\r\n                                                        }}\r\n                                                        disabled={index === modules.length - 1 || swappingModuleDownId === module.id}\r\n                                                        className=\"p-1 text-gray-400 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors cursor-pointer\"\r\n                                                        aria-label=\"Move module down\"\r\n                                                    >\r\n                                                        {swappingModuleDownId === module.id ? (\r\n                                                            <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                        ) : (\r\n                                                            <ChevronDown size={18} />\r\n                                                        )}\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            setModuleToDelete(module.id);\r\n                                                        }}\r\n                                                        className=\"p-1 text-gray-400 hover:text-white transition-colors cursor-pointer\"\r\n                                                        aria-label=\"Delete module\"\r\n                                                        disabled={deletingModuleId === module.id}\r\n                                                    >\r\n                                                        {deletingModuleId === module.id ? (\r\n                                                            <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                        ) : (\r\n                                                            <Trash size={18} />\r\n                                                        )}\r\n                                                    </button>\r\n                                                </>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {/* Add expand/collapse button on the right side for view mode */}\r\n                                    {mode === 'view' && (\r\n                                        <button\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                // Prevent toggling locked modules\r\n                                                if (module.unlockAt) return;\r\n\r\n                                                onToggleModule(module.id);\r\n\r\n                                            }}\r\n                                            className={`flex items-center px-3 py-1 text-sm focus:outline-none focus:ring-0 focus:border-0 transition-colors rounded-full border ${module.unlockAt ? 'text-gray-500 border-gray-600 bg-gray-800 cursor-not-allowed' : 'text-gray-400 hover:text-white border-gray-700 bg-gray-900 cursor-pointer'}`}\r\n                                            aria-label={getIsExpanded(module.id) ? \"Collapse module\" : \"Expand module\"}\r\n                                            disabled={!!module.unlockAt}\r\n                                        >\r\n                                            {getIsExpanded(module.id) ? (\r\n                                                <>\r\n                                                    <ChevronUp size={16} className=\"mr-1\" />\r\n                                                    <span className=\"hidden sm:inline\">Collapse</span>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <ChevronDown size={16} className=\"mr-1\" />\r\n                                                    <span className=\"hidden sm:inline\">Expand</span>\r\n                                                </>\r\n                                            )}\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n\r\n                                {/* Progress information and bar - shown differently based on expanded state */}\r\n                                {mode === 'view' && module.progress !== undefined && (\r\n                                    <div className={`${module.unlockAt ? 'cursor-not-allowed' : 'cursor-pointer'}`}>\r\n                                        {getIsExpanded(module.id) ? (\r\n                                            <div className=\"px-4 pb-2\">\r\n                                                <div className=\"flex justify-end items-center mb-1\">\r\n                                                    <div className=\"text-sm text-gray-400\">\r\n                                                        {module.progress}%\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"w-full bg-gray-700 h-2 rounded-full\">\r\n                                                    <div\r\n                                                        className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\r\n                                                        style={{ width: `${module.progress}%` }}\r\n                                                    ></div>\r\n                                                </div>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div className=\"px-4 pb-4\">\r\n                                                <div className=\"flex justify-end items-center mb-1\">\r\n                                                    <div className=\"text-sm text-gray-400\">\r\n                                                        {module.progress}%\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"w-full bg-gray-700 h-2 rounded-full\">\r\n                                                    <div\r\n                                                        className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\r\n                                                        style={{ width: `${module.progress}%` }}\r\n                                                    ></div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            {/* Module content - only visible when expanded */}\r\n                            {getIsExpanded(module.id) && (\r\n                                <div className=\"px-4 pb-4\">\r\n                                    <div className=\"pl-2 sm:pl-6 border-l border-gray-400 ml-2 space-y-2\">\r\n                                        {module.items.map((item, itemIndex) => (\r\n                                            <div\r\n                                                key={item.id}\r\n                                                data-testid={`module-item-${item.id}`}\r\n                                                className={`flex items-center group p-2 rounded-md cursor-pointer transition-all relative mt-2 hover:bg-gray-700/50 ${completedItems[item.id] ? \"opacity-60\" : \"\"\r\n                                                    } ${item.isGenerating ? \"opacity-40 pointer-events-none\" : \"\"\r\n                                                    }`}\r\n                                                onClick={() => onOpenItem && !item.isGenerating && onOpenItem(module.id, item.id)}\r\n                                            >\r\n                                                <div className={`flex items-center justify-center mr-4 sm:mr-2 ${completedItems[item.id]\r\n                                                    ? \"opacity-50\"\r\n                                                    : \"opacity-100\"\r\n                                                    }`}>\r\n                                                    {/* Enhanced visual distinction with color and better icons */}\r\n                                                    {item.type === 'material' ? (\r\n                                                        <div className={`w-7 h-7 rounded-md flex items-center justify-center ${completedItems[item.id]\r\n                                                            ? \"bg-green-500/15\"\r\n                                                            : \"bg-blue-500/15\"\r\n                                                            }`}>\r\n                                                            <BookOpen size={16} className={`${completedItems[item.id]\r\n                                                                ? \"text-green-500\"\r\n                                                                : \"text-blue-400\"\r\n                                                                }`} />\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div className={`w-7 h-7 rounded-md flex items-center justify-center ${completedItems[item.id]\r\n                                                            ? \"bg-green-500/15\"\r\n                                                            : (completedQuestionIds[item.id] &&\r\n                                                                Object.keys(completedQuestionIds[item.id]).some(qId => completedQuestionIds[item.id][qId] === true)\r\n                                                                ? \"bg-yellow-500/15\"\r\n                                                                : \"bg-purple-500/15\")\r\n                                                            }`}>\r\n                                                            <ClipboardList size={16} className={completedItems[item.id]\r\n                                                                ? \"text-green-500\"\r\n                                                                : completedQuestionIds[item.id] &&\r\n                                                                    Object.keys(completedQuestionIds[item.id]).some(qId => completedQuestionIds[item.id][qId] === true)\r\n                                                                    ? \"text-yellow-500\"\r\n                                                                    : \"text-white\"\r\n                                                            } />\r\n                                                        </div>\r\n                                                    )}\r\n\r\n                                                    {/* Add a small generating indicator if the item is still being generated */}\r\n                                                    {item.isGenerating && (\r\n                                                        <div className=\"ml-2 animate-pulse\">\r\n                                                            <Loader2 size={12} className=\"animate-spin text-gray-400\" />\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div className=\"flex-1\">\r\n                                                    <div className={`text-base font-light ${completedItems[item.id]\r\n                                                        ? \"line-through text-white\"\r\n                                                        : (item.type === 'quiz') &&\r\n                                                            completedQuestionIds[item.id] &&\r\n                                                            Object.keys(completedQuestionIds[item.id]).some(qId => completedQuestionIds[item.id][qId] === true)\r\n                                                            ? \"text-yellow-500\"\r\n                                                            : \"text-white\"\r\n                                                        } outline-none empty:before:content-[attr(data-placeholder)] empty:before:text-gray-400 empty:before:pointer-events-none mr-2`}>\r\n                                                        {item.title}\r\n\r\n                                                        {/* Always display question count for quizzes (except drafts) */}\r\n                                                        {item.type === 'quiz' && item.status !== 'draft' && (\r\n                                                            <span className={`inline-block ml-2 text-sm font-normal ${!completedItems[item.id] &&\r\n                                                                completedQuestionIds[item.id] &&\r\n                                                                Object.keys(completedQuestionIds[item.id]).some(qId => completedQuestionIds[item.id][qId] === true)\r\n                                                                ? \"text-yellow-500\"\r\n                                                                : \"text-gray-400\"\r\n                                                                }`}>\r\n                                                                ({completedQuestionIds[item.id]\r\n                                                                    ? mode === 'view' && !completedItems[item.id] && Object.keys(completedQuestionIds[item.id]).some(qId => completedQuestionIds[item.id][qId] === true)\r\n                                                                        ? `${Object.values(completedQuestionIds[item.id]).filter(Boolean).length} / ${(item as Quiz).numQuestions}`\r\n                                                                        : `${Object.keys(completedQuestionIds[item.id]).length} question${Object.keys(completedQuestionIds[item.id]).length === 1 ? \"\" : \"s\"}`\r\n                                                                    : `${(item as Quiz).numQuestions} question${(item as Quiz).numQuestions === 1 ? \"\" : \"s\"}`})\r\n                                                            </span>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {/* Item action buttons - only in edit mode */}\r\n                                                {mode === 'edit' && (\r\n                                                    <div className=\"flex items-center space-x-2\" onClick={(e) => e.stopPropagation()}>\r\n                                                        {item.status === 'draft' && (\r\n                                                            <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium bg-red-500 text-white\">\r\n                                                                DRAFT\r\n                                                            </span>\r\n                                                        )}\r\n                                                        {item.status === 'published' && item.scheduled_publish_at && (\r\n                                                            <Tooltip content={`Scheduled for ${formatScheduleDate(new Date(item.scheduled_publish_at))}`} position=\"top\">\r\n                                                                <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium bg-yellow-900 text-white\">\r\n                                                                    SCHEDULED\r\n                                                                </span>\r\n                                                            </Tooltip>\r\n                                                        )}\r\n                                                        <Tooltip content=\"Duplicate as draft\" position=\"top\">\r\n                                                            <button\r\n                                                                onClick={(e) => {\r\n                                                                    e.stopPropagation();\r\n                                                                    handleDuplicateTask(module.id, item.id);\r\n                                                                }}\r\n                                                                disabled={duplicatingTaskId === item.id}\r\n                                                                className=\"p-1 text-gray-400 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors cursor-pointer\"\r\n                                                                aria-label=\"Duplicate task as draft\"\r\n                                                            >\r\n                                                                {duplicatingTaskId === item.id ? (\r\n                                                                    <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                                ) : (\r\n                                                                    <Copy size={16} />\r\n                                                                )}\r\n                                                            </button>\r\n                                                        </Tooltip>\r\n                                                        <button\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation();\r\n                                                                handleMoveTaskUp(module.id, item.id);\r\n                                                            }}\r\n                                                            disabled={itemIndex === 0 || swappingTaskUpId === item.id}\r\n                                                            className=\"p-1 text-gray-400 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors cursor-pointer\"\r\n                                                            aria-label=\"Move item up\"\r\n                                                        >\r\n                                                            {swappingTaskUpId === item.id ? (\r\n                                                                <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                            ) : (\r\n                                                                <ChevronUp size={16} />\r\n                                                            )}\r\n                                                        </button>\r\n                                                        <button\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation();\r\n                                                                handleMoveTaskDown(module.id, item.id);\r\n                                                            }}\r\n                                                            disabled={itemIndex === module.items.length - 1 || swappingTaskDownId === item.id}\r\n                                                            className=\"p-1 text-gray-400 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors cursor-pointer\"\r\n                                                            aria-label=\"Move item down\"\r\n                                                        >\r\n                                                            {swappingTaskDownId === item.id ? (\r\n                                                                <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                            ) : (\r\n                                                                <ChevronDown size={16} />\r\n                                                            )}\r\n                                                        </button>\r\n                                                        <button\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation();\r\n                                                                if (onDeleteItem) {\r\n                                                                    setTaskToDelete({\r\n                                                                        moduleId: module.id,\r\n                                                                        itemId: item.id,\r\n                                                                        itemType: item.type\r\n                                                                    });\r\n                                                                }\r\n                                                            }}\r\n                                                            className=\"p-1 text-gray-400 hover:text-white transition-colors cursor-pointer\"\r\n                                                            aria-label=\"Delete item\"\r\n                                                            disabled={deletingTaskId === item.id}\r\n                                                        >\r\n                                                            {deletingTaskId === item.id ? (\r\n                                                                <div className=\"animate-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\r\n                                                            ) : (\r\n                                                                <Trash size={16} />\r\n                                                            )}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                )}\r\n\r\n                                                {/* Completion checkbox - only in view mode */}\r\n                                                {mode === 'view' && (\r\n                                                    <div className=\"flex items-center\" onClick={(e) => e.stopPropagation()}>\r\n                                                        <button\r\n                                                            className={`w-5 h-5 rounded-full flex items-center justify-center transition-colors cursor-pointer ${completedItems[item.id]\r\n                                                                ? \"bg-green-500 border-0\"\r\n                                                                : \"border border-gray-500 hover:border-white\"\r\n                                                                }`}\r\n                                                            aria-label={completedItems[item.id] ? \"Mark as incomplete\" : \"Mark as completed\"}\r\n                                                        >\r\n                                                            {completedItems[item.id] ? (\r\n                                                                <Check size={12} className=\"text-white\" />\r\n                                                            ) : null}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n\r\n                                        {/* Add item buttons - only in edit mode */}\r\n                                        {mode === 'edit' && (\r\n                                            <div className=\"flex space-x-2 mt-4\">\r\n                                                <Tooltip content=\"Add learning material to teach a topic in the module\" position=\"top\">\r\n                                                    <button\r\n                                                        onClick={async () => {\r\n                                                            if (onAddLearningMaterial) {\r\n                                                                try {\r\n                                                                    await onAddLearningMaterial(module.id);\r\n                                                                } catch (error) {\r\n                                                                    console.error(\"Failed to add learning material:\", error);\r\n                                                                }\r\n                                                            }\r\n                                                        }}\r\n                                                        className=\"flex items-center px-3 py-1.5 text-sm text-gray-300 hover:text-white border border-gray-400 rounded-full transition-colors cursor-pointer\"\r\n                                                    >\r\n                                                        <Plus size={14} className=\"mr-1\" />\r\n                                                        Learning material\r\n                                                    </button>\r\n                                                </Tooltip>\r\n                                                <Tooltip content=\"Create a quiz for practice or assessment\" position=\"top\">\r\n                                                    <button\r\n                                                        onClick={async () => {\r\n                                                            if (onAddQuiz) {\r\n                                                                try {\r\n                                                                    await onAddQuiz(module.id);\r\n                                                                } catch (error) {\r\n                                                                    console.error(\"Failed to add quiz:\", error);\r\n                                                                }\r\n                                                            }\r\n                                                        }}\r\n                                                        className=\"flex items-center px-3 py-1.5 text-sm text-gray-300 hover:text-white border border-gray-400 rounded-full transition-colors cursor-pointer\"\r\n                                                    >\r\n                                                        <Plus size={14} className=\"mr-1\" />\r\n                                                        Quiz\r\n                                                    </button>\r\n                                                </Tooltip>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    );\r\n\r\n                    return module.unlockAt ? (\r\n                        <Tooltip key={module.id} content={`Unlocks on ${formatUnlockDate(module.unlockAt)}`} className=\"w-full block\" position=\"top\">\r\n                            {moduleContent}\r\n                        </Tooltip>\r\n                    ) : (\r\n                        moduleContent\r\n                    );\r\n                })}\r\n            </div>\r\n\r\n            {/* Add CourseItemDialog inside the CourseModuleList component */}\r\n            < CourseItemDialog\r\n                isOpen={isDialogOpen}\r\n                activeItem={activeItem}\r\n                activeModuleId={activeModuleId}\r\n                isEditMode={isEditMode}\r\n                isPreviewMode={isPreviewMode}\r\n                showPublishConfirmation={showPublishConfirmation}\r\n                dialogTitleRef={dialogTitleRef}\r\n                dialogContentRef={dialogContentRef}\r\n                onClose={closeDialog}\r\n                onPublishConfirm={handleConfirmPublish}\r\n                onPublishCancel={handleCancelPublish}\r\n                onSetShowPublishConfirmation={setShowPublishConfirmation}\r\n                onSaveItem={saveItem}\r\n                onCancelEditMode={cancelEditMode}\r\n                onEnableEditMode={enableEditMode}\r\n                onQuizContentChange={handleQuizContentChange}\r\n                focusEditor={focusEditor}\r\n                schoolId={schoolId}\r\n                courseId={courseId}\r\n            />\r\n\r\n            {/* Module deletion confirmation dialog */}\r\n            < ConfirmationDialog\r\n                open={moduleToDelete !== null\r\n                }\r\n                title=\"Are you sure you want to delete this module?\"\r\n                message=\"All tasks within this module will be permanently removed. This action cannot be undone.\"\r\n                confirmButtonText=\"Delete\"\r\n                onConfirm={handleConfirmModuleDelete}\r\n                onCancel={handleCancelModuleDelete}\r\n                type=\"delete\"\r\n                data-testid=\"module-delete-dialog\"\r\n            />\r\n\r\n            {/* Task deletion confirmation dialog */}\r\n            {\r\n                taskToDelete && (\r\n                    <ConfirmationDialog\r\n                        open={taskToDelete !== null}\r\n                        title={`Are you sure you want to delete this ${getItemTypeName(taskToDelete.itemType)}?`}\r\n                        message={`This ${getItemTypeName(taskToDelete.itemType)} will be permanently removed. This action cannot be undone.`}\r\n                        confirmButtonText={`Delete`}\r\n                        onConfirm={handleConfirmTaskDelete}\r\n                        onCancel={handleCancelTaskDelete}\r\n                        type=\"delete\"\r\n                        data-testid=\"task-delete-dialog\"\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4649, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/SuccessSound.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\ninterface SuccessSoundProps {\r\n    play: boolean;\r\n}\r\n\r\nexport default function SuccessSound({ play }: SuccessSoundProps) {\r\n    const audioRef = useRef<HTMLAudioElement | null>(null);\r\n\r\n    // Create a short success sound using AudioContext\r\n    // This avoids the need for an external sound file\r\n    const createSuccessSound = () => {\r\n        try {\r\n            const audioContext = new AudioContext();\r\n\r\n            // Create an oscillator node for the sound\r\n            const oscillator = audioContext.createOscillator();\r\n            oscillator.type = 'sine';\r\n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime); // Start at 800Hz\r\n            oscillator.frequency.exponentialRampToValueAtTime(1300, audioContext.currentTime + 0.1); // Ramp up to 1300Hz\r\n            oscillator.frequency.exponentialRampToValueAtTime(500, audioContext.currentTime + 0.3); // Then down to 500Hz\r\n\r\n            // Create a gain node to control volume\r\n            const gainNode = audioContext.createGain();\r\n            gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n            gainNode.gain.linearRampToValueAtTime(0.4, audioContext.currentTime + 0.05); // Fade in\r\n            gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.3); // Fade out\r\n\r\n            // Connect nodes\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(audioContext.destination);\r\n\r\n            // Start and stop the oscillator\r\n            oscillator.start();\r\n            oscillator.stop(audioContext.currentTime + 0.3);\r\n        } catch (error) {\r\n            console.error(\"Error creating success sound:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Play the sound when the play prop is true\r\n        if (play) {\r\n            createSuccessSound();\r\n        }\r\n    }, [play]);\r\n\r\n    // No visual element to render\r\n    return null;\r\n} "],"names":[],"mappings":";;;AAEA;;AAFA;;AAQe,SAAS,aAAa,KAA2B;QAA3B,EAAE,IAAI,EAAqB,GAA3B;;IACjC,MAAM,WAAW,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAA2B;IAEjD,kDAAkD;IAClD,kDAAkD;IAClD,MAAM,qBAAqB;QACvB,IAAI;YACA,MAAM,eAAe,IAAI;YAEzB,0CAA0C;YAC1C,MAAM,aAAa,aAAa,gBAAgB;YAChD,WAAW,IAAI,GAAG;YAClB,WAAW,SAAS,CAAC,cAAc,CAAC,KAAK,aAAa,WAAW,GAAG,iBAAiB;YACrF,WAAW,SAAS,CAAC,4BAA4B,CAAC,MAAM,aAAa,WAAW,GAAG,MAAM,oBAAoB;YAC7G,WAAW,SAAS,CAAC,4BAA4B,CAAC,KAAK,aAAa,WAAW,GAAG,MAAM,qBAAqB;YAE7G,uCAAuC;YACvC,MAAM,WAAW,aAAa,UAAU;YACxC,SAAS,IAAI,CAAC,cAAc,CAAC,GAAG,aAAa,WAAW;YACxD,SAAS,IAAI,CAAC,uBAAuB,CAAC,KAAK,aAAa,WAAW,GAAG,OAAO,UAAU;YACvF,SAAS,IAAI,CAAC,uBAAuB,CAAC,GAAG,aAAa,WAAW,GAAG,MAAM,WAAW;YAErF,gBAAgB;YAChB,WAAW,OAAO,CAAC;YACnB,SAAS,OAAO,CAAC,aAAa,WAAW;YAEzC,gCAAgC;YAChC,WAAW,KAAK;YAChB,WAAW,IAAI,CAAC,aAAa,WAAW,GAAG;QAC/C,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,iCAAiC;QACnD;IACJ;IAEA,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;kCAAE;YACN,4CAA4C;YAC5C,IAAI,MAAM;gBACN;YACJ;QACJ;iCAAG;QAAC;KAAK;IAET,8BAA8B;IAC9B,OAAO;AACX;GA3CwB;KAAA","debugId":null}},
    {"offset": {"line": 4712, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/ModuleCompletionSound.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\ninterface ModuleCompletionSoundProps {\r\n    play: boolean;\r\n}\r\n\r\nexport default function ModuleCompletionSound({ play }: ModuleCompletionSoundProps) {\r\n    // Create a more impressive victory sound using AudioContext\r\n    const createVictorySound = () => {\r\n        try {\r\n            const audioContext = new AudioContext();\r\n\r\n            // Function to create our oscillators\r\n            const createOscillator = (type: OscillatorType, frequency: number, delay: number, duration: number, gainValue: number) => {\r\n                const oscillator = audioContext.createOscillator();\r\n                oscillator.type = type;\r\n                oscillator.frequency.value = frequency;\r\n\r\n                const gainNode = audioContext.createGain();\r\n                gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n                gainNode.gain.linearRampToValueAtTime(gainValue, audioContext.currentTime + delay + 0.05);\r\n                gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + delay + duration);\r\n\r\n                oscillator.connect(gainNode);\r\n                gainNode.connect(audioContext.destination);\r\n\r\n                oscillator.start(audioContext.currentTime + delay);\r\n                oscillator.stop(audioContext.currentTime + delay + duration);\r\n            };\r\n\r\n            // First thumping bass sound\r\n            createOscillator('sine', 150, 0, 0.3, 0.8);\r\n\r\n            // Second thumping bass sound (slightly higher pitch)\r\n            createOscillator('sine', 180, 0.2, 0.3, 0.8);\r\n\r\n            // Victory melody notes\r\n            createOscillator('sine', 400, 0.4, 0.2, 0.5);\r\n            createOscillator('sine', 600, 0.6, 0.2, 0.5);\r\n            createOscillator('sine', 800, 0.8, 0.4, 0.5);\r\n\r\n            // Add a final triumphant chord\r\n            createOscillator('sine', 400, 1.2, 0.5, 0.4); // Base note\r\n            createOscillator('sine', 500, 1.2, 0.5, 0.3); // Middle note\r\n            createOscillator('sine', 600, 1.2, 0.5, 0.3); // Top note\r\n\r\n        } catch (error) {\r\n            console.error(\"Error creating module completion sound:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Play the sound when the play prop is true\r\n        if (play) {\r\n            createVictorySound();\r\n        }\r\n    }, [play]);\r\n\r\n    // No visual element to render\r\n    return null;\r\n} "],"names":[],"mappings":";;;AAEA;;AAFA;;AAQe,SAAS,sBAAsB,KAAoC;QAApC,EAAE,IAAI,EAA8B,GAApC;;IAC1C,4DAA4D;IAC5D,MAAM,qBAAqB;QACvB,IAAI;YACA,MAAM,eAAe,IAAI;YAEzB,qCAAqC;YACrC,MAAM,mBAAmB,CAAC,MAAsB,WAAmB,OAAe,UAAkB;gBAChG,MAAM,aAAa,aAAa,gBAAgB;gBAChD,WAAW,IAAI,GAAG;gBAClB,WAAW,SAAS,CAAC,KAAK,GAAG;gBAE7B,MAAM,WAAW,aAAa,UAAU;gBACxC,SAAS,IAAI,CAAC,cAAc,CAAC,GAAG,aAAa,WAAW;gBACxD,SAAS,IAAI,CAAC,uBAAuB,CAAC,WAAW,aAAa,WAAW,GAAG,QAAQ;gBACpF,SAAS,IAAI,CAAC,uBAAuB,CAAC,GAAG,aAAa,WAAW,GAAG,QAAQ;gBAE5E,WAAW,OAAO,CAAC;gBACnB,SAAS,OAAO,CAAC,aAAa,WAAW;gBAEzC,WAAW,KAAK,CAAC,aAAa,WAAW,GAAG;gBAC5C,WAAW,IAAI,CAAC,aAAa,WAAW,GAAG,QAAQ;YACvD;YAEA,4BAA4B;YAC5B,iBAAiB,QAAQ,KAAK,GAAG,KAAK;YAEtC,qDAAqD;YACrD,iBAAiB,QAAQ,KAAK,KAAK,KAAK;YAExC,uBAAuB;YACvB,iBAAiB,QAAQ,KAAK,KAAK,KAAK;YACxC,iBAAiB,QAAQ,KAAK,KAAK,KAAK;YACxC,iBAAiB,QAAQ,KAAK,KAAK,KAAK;YAExC,+BAA+B;YAC/B,iBAAiB,QAAQ,KAAK,KAAK,KAAK,MAAM,YAAY;YAC1D,iBAAiB,QAAQ,KAAK,KAAK,KAAK,MAAM,cAAc;YAC5D,iBAAiB,QAAQ,KAAK,KAAK,KAAK,MAAM,WAAW;QAE7D,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,2CAA2C;QAC7D;IACJ;IAEA,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;2CAAE;YACN,4CAA4C;YAC5C,IAAI,MAAM;gBACN;YACJ;QACJ;0CAAG;QAAC;KAAK;IAET,8BAA8B;IAC9B,OAAO;AACX;GAtDwB;KAAA","debugId":null}},
    {"offset": {"line": 4782, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/LearnerCourseView.tsx"],"sourcesContent":["import { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { ModuleItem, Module } from \"@/types/course\";\r\nimport CourseModuleList from \"./CourseModuleList\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { X, CheckCircle, BookOpen, HelpCircle, Clipboard, ChevronLeft, ChevronRight, Menu, FileText, Brain, ClipboardList, Loader2 } from \"lucide-react\";\r\nimport { useAuth } from \"@/lib/auth\";\r\nimport confetti from \"canvas-confetti\";\r\nimport SuccessSound from \"./SuccessSound\";\r\nimport ModuleCompletionSound from \"./ModuleCompletionSound\";\r\nimport ConfirmationDialog from \"./ConfirmationDialog\";\r\n\r\n// Dynamically import viewer components to avoid SSR issues\r\nconst DynamicLearningMaterialViewer = dynamic(\r\n    () => import(\"./LearningMaterialViewer\"),\r\n    { ssr: false }\r\n);\r\n\r\n// Dynamic import for LearnerQuizView\r\nconst DynamicLearnerQuizView = dynamic(\r\n    () => import(\"./LearnerQuizView\"),\r\n    { ssr: false }\r\n);\r\n\r\ninterface LearnerCourseViewProps {\r\n    modules: Module[];\r\n    completedTaskIds?: Record<string, boolean>;\r\n    completedQuestionIds?: Record<string, Record<string, boolean>>;\r\n    onTaskComplete?: (taskId: string, isComplete: boolean) => void;\r\n    onQuestionComplete?: (taskId: string, questionId: string, isComplete: boolean) => void;\r\n    onDialogClose?: () => void;\r\n    viewOnly?: boolean;\r\n    learnerId?: string;\r\n    isTestMode?: boolean;\r\n    isAdminView?: boolean;\r\n}\r\n\r\nexport default function LearnerCourseView({\r\n    modules,\r\n    completedTaskIds = {},\r\n    completedQuestionIds = {},\r\n    onTaskComplete,\r\n    onQuestionComplete,\r\n    onDialogClose,\r\n    isTestMode = false,\r\n    viewOnly = false,\r\n    learnerId = '',\r\n    isAdminView = false,\r\n}: LearnerCourseViewProps) {\r\n    // Get user from auth context\r\n    const { user } = useAuth();\r\n    const userId = viewOnly ? learnerId : user?.id || '';\r\n\r\n    const [expandedModules, setExpandedModules] = useState<Record<string, boolean>>({});\r\n    const [activeItem, setActiveItem] = useState<any>(null);\r\n    const [activeModuleId, setActiveModuleId] = useState<string | null>(null);\r\n    const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null);\r\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    // Track completed tasks - initialize with props\r\n    const [completedTasks, setCompletedTasks] = useState<Record<string, boolean>>(completedTaskIds);\r\n    // Track completed questions within quizzes - initialize with structure that will be populated\r\n    const [completedQuestions, setCompletedQuestions] = useState<Record<string, boolean>>({});\r\n    // Add state to track when task is being marked as complete\r\n    const [isMarkingComplete, setIsMarkingComplete] = useState(false);\r\n    // Add state for completedQuestionIds to manage the nested structure\r\n    const [localCompletedQuestionIds, setLocalCompletedQuestionIds] = useState<Record<string, Record<string, boolean>>>(completedQuestionIds);\r\n    const dialogTitleRef = useRef<HTMLHeadingElement>(null);\r\n    const dialogContentRef = useRef<HTMLDivElement>(null);\r\n    // Add a ref to track if we've added a history entry\r\n    const hasAddedHistoryEntryRef = useRef(false);\r\n\r\n    // Add state for success message\r\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    // Add state for sound\r\n    const [playSuccessSound, setPlaySuccessSound] = useState(false);\r\n    // Add state for module completion sound\r\n    const [playModuleCompletionSound, setPlayModuleCompletionSound] = useState(false);\r\n\r\n    // Add state for AI responding status and confirmation dialog\r\n    const [isAiResponding, setIsAiResponding] = useState(false);\r\n    const [showNavigationConfirmation, setShowNavigationConfirmation] = useState(false);\r\n    const [pendingNavigation, setPendingNavigation] = useState<{ action: string; params?: any }>({ action: '' });\r\n\r\n    // Add state for mobile sidebar visibility\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n    // List of encouragement messages\r\n    const encouragementMessages = [\r\n        \"Great job! 🎯\",\r\n        \"You're crushing it! 💪\",\r\n        \"Keep it up! 🚀\",\r\n        \"Excellent work! ⭐\",\r\n        \"Knowledge gained! 📚\",\r\n        \"You're making progress! 🌱\",\r\n        \"Achievement unlocked! 🏆\",\r\n        \"Learning mastered! 🧠\",\r\n        \"Skill acquired! ✨\"\r\n    ];\r\n\r\n    // Function to select a random encouragement message\r\n    const getRandomMessage = () => {\r\n        const randomIndex = Math.floor(Math.random() * encouragementMessages.length);\r\n        return encouragementMessages[randomIndex];\r\n    };\r\n\r\n    // Update completedTasks when completedTaskIds prop changes\r\n    useEffect(() => {\r\n        setCompletedTasks(completedTaskIds);\r\n    }, [completedTaskIds]);\r\n\r\n    // Update localCompletedQuestionIds when completedQuestionIds prop changes\r\n    useEffect(() => {\r\n        setLocalCompletedQuestionIds(completedQuestionIds);\r\n    }, [completedQuestionIds]);\r\n\r\n    // Process completedQuestionIds into the format expected by this component\r\n    useEffect(() => {\r\n        // Convert the nested structure to a flat structure with keys like \"questionId\"\r\n        const flatQuestionCompletions: Record<string, boolean> = {};\r\n\r\n        Object.entries(localCompletedQuestionIds).forEach(([taskId, questions]) => {\r\n            Object.entries(questions).forEach(([questionId, isComplete]) => {\r\n                flatQuestionCompletions[questionId] = isComplete;\r\n            });\r\n        });\r\n\r\n        setCompletedQuestions(flatQuestionCompletions);\r\n    }, [localCompletedQuestionIds]);\r\n\r\n    // Filter out draft items from modules in both preview and learner view\r\n    const modulesWithFilteredItems = modules.map(module => ({\r\n        ...module,\r\n        items: module.items.filter(item => item.status !== 'draft')\r\n    })) as Module[];\r\n\r\n    // Filter out empty modules (those with no items after filtering)\r\n    const filteredModules = modulesWithFilteredItems.filter(module => module.items.length > 0);\r\n\r\n    // Calculate progress for each module based on completed tasks\r\n    const modulesWithProgress = filteredModules.map(module => {\r\n        // Get the total number of items in the module\r\n        const totalItems = module.items.length;\r\n\r\n        // If there are no items, progress is 0\r\n        if (totalItems === 0) {\r\n            return { ...module, progress: 0 };\r\n        }\r\n\r\n        // Count completed items in this module\r\n        const completedItemsCount = module.items.filter(item =>\r\n            completedTasks[item.id] === true\r\n        ).length;\r\n\r\n        // Calculate progress percentage\r\n        const progress = Math.round((completedItemsCount / totalItems) * 100);\r\n\r\n        return { ...module, progress };\r\n    });\r\n\r\n    const toggleModule = (moduleId: string) => {\r\n        setExpandedModules(prev => ({\r\n            ...prev,\r\n            [moduleId]: !prev[moduleId]\r\n        }));\r\n    };\r\n\r\n    // Handle browser history for dialog\r\n    useEffect(() => {\r\n        // Handler for back button\r\n        const handlePopState = (event: PopStateEvent) => {\r\n            // If dialog is open, close it\r\n            if (isDialogOpen) {\r\n                event.preventDefault();\r\n                closeDialog();\r\n            }\r\n        };\r\n\r\n        // If dialog is opened, add history entry\r\n        if (isDialogOpen && !hasAddedHistoryEntryRef.current) {\r\n            window.history.pushState({ dialog: true }, \"\");\r\n            hasAddedHistoryEntryRef.current = true;\r\n            window.addEventListener(\"popstate\", handlePopState);\r\n        }\r\n\r\n        // Cleanup\r\n        return () => {\r\n            window.removeEventListener(\"popstate\", handlePopState);\r\n        };\r\n    }, [isDialogOpen]);\r\n\r\n    // Function to close the dialog\r\n    const closeDialog = () => {\r\n        // If AI is responding, show confirmation dialog\r\n        if (isAiResponding) {\r\n            setPendingNavigation({ action: 'close' });\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        // Proceed with closing\r\n        setIsDialogOpen(false);\r\n        setActiveItem(null);\r\n        setActiveModuleId(null);\r\n        setActiveQuestionId(null);\r\n        // Reset sidebar state\r\n        setIsSidebarOpen(false);\r\n\r\n        // Reset history entry flag when dialog is closed\r\n        hasAddedHistoryEntryRef.current = false;\r\n\r\n        // Call the onDialogClose callback if provided\r\n        if (onDialogClose) {\r\n            onDialogClose();\r\n        }\r\n    };\r\n\r\n    // Function to handle navigation confirmation\r\n    const handleNavigationConfirm = () => {\r\n        setShowNavigationConfirmation(false);\r\n\r\n        // Execute the pending navigation action\r\n        switch (pendingNavigation.action) {\r\n            case 'close':\r\n                setIsDialogOpen(false);\r\n                setActiveItem(null);\r\n                setActiveModuleId(null);\r\n                setActiveQuestionId(null);\r\n                hasAddedHistoryEntryRef.current = false;\r\n                if (onDialogClose) {\r\n                    onDialogClose();\r\n                }\r\n                break;\r\n            case 'nextTask':\r\n                executeGoToNextTask();\r\n                break;\r\n            case 'prevTask':\r\n                executeGoToPreviousTask();\r\n                break;\r\n            case 'activateQuestion':\r\n                if (pendingNavigation.params?.questionId) {\r\n                    executeActivateQuestion(pendingNavigation.params.questionId);\r\n                }\r\n                break;\r\n            case 'openTaskItem':\r\n                if (pendingNavigation.params?.moduleId && pendingNavigation.params?.itemId) {\r\n                    executeOpenTaskItem(\r\n                        pendingNavigation.params.moduleId,\r\n                        pendingNavigation.params.itemId,\r\n                        pendingNavigation.params?.questionId\r\n                    );\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    // Function to cancel navigation\r\n    const handleNavigationCancel = () => {\r\n        setShowNavigationConfirmation(false);\r\n        setPendingNavigation({ action: '' });\r\n    };\r\n\r\n    // Function to activate a specific question in a quiz or exam\r\n    const activateQuestion = (questionId: string) => {\r\n        if (isAiResponding && questionId !== activeQuestionId) {\r\n            setPendingNavigation({\r\n                action: 'activateQuestion',\r\n                params: { questionId }\r\n            });\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        executeActivateQuestion(questionId);\r\n    };\r\n\r\n    // Execute question activation (without checks)\r\n    const executeActivateQuestion = (questionId: string) => {\r\n        setActiveQuestionId(questionId);\r\n    };\r\n\r\n    // Function to open a task item and fetch its details\r\n    const openTaskItem = async (moduleId: string, itemId: string, questionId?: string) => {\r\n        // Check if AI is responding and we're trying to open a different item\r\n        if (isAiResponding && (moduleId !== activeModuleId || itemId !== activeItem?.id || questionId !== activeQuestionId)) {\r\n            setPendingNavigation({\r\n                action: 'openTaskItem',\r\n                params: { moduleId, itemId, questionId }\r\n            });\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        executeOpenTaskItem(moduleId, itemId, questionId);\r\n    };\r\n\r\n    // Execute open task item (without checks)\r\n    const executeOpenTaskItem = async (moduleId: string, itemId: string, questionId?: string) => {\r\n        // Reset sidebar state when opening a new task\r\n        setIsSidebarOpen(false);\r\n        setIsLoading(true);\r\n        try {\r\n            // Find the item in the modules\r\n            const module = filteredModules.find(m => m.id === moduleId);\r\n            if (!module) return;\r\n\r\n            const item = module.items.find(i => i.id === itemId);\r\n            if (!item) return;\r\n\r\n            // Fetch item details from API\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/${itemId}`);\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch task: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // Create an updated item with the fetched data\r\n            let updatedItem;\r\n            if (item.type === 'material') {\r\n                updatedItem = {\r\n                    ...item,\r\n                    content: data.blocks || []\r\n                };\r\n            } else if (item.type === 'quiz') {\r\n                // Ensure questions have the right format for the QuizEditor component\r\n                const formattedQuestions = (data.questions || []).map((q: any) => {\r\n                    // Create a properly formatted question object\r\n                    return {\r\n                        id: q.id || `question-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                        blocks: q.blocks || [], // Keep the original blocks property\r\n                        content: q.blocks || [], // Also add as content for compatibility\r\n                        config: {\r\n                            inputType: q.input_type,\r\n                            responseType: q.response_type,\r\n                            correctAnswer: q.answer,\r\n                            questionType: q.type,\r\n                            codingLanguages: q.coding_languages || [],\r\n                            title: q.title,\r\n                            scorecardData: {\r\n                                id: q.scorecard_id,\r\n                            }\r\n                        }\r\n                    };\r\n                });\r\n\r\n                updatedItem = {\r\n                    ...item,\r\n                    questions: formattedQuestions\r\n                };\r\n\r\n                // Set active question ID if provided, otherwise set to first question\r\n                if (questionId) {\r\n                    setActiveQuestionId(questionId);\r\n                } else if (formattedQuestions.length > 0) {\r\n                    setActiveQuestionId(formattedQuestions[0].id);\r\n                }\r\n            } else {\r\n                updatedItem = item;\r\n            }\r\n\r\n            setActiveItem(updatedItem);\r\n            setActiveModuleId(moduleId);\r\n            setIsDialogOpen(true);\r\n        } catch (error) {\r\n            console.error(\"Error fetching task:\", error);\r\n            // Still open dialog with existing item data if fetch fails\r\n            const module = filteredModules.find(m => m.id === moduleId);\r\n            if (!module) return;\r\n\r\n            const item = module.items.find(i => i.id === itemId);\r\n            if (item) {\r\n                setActiveItem(item);\r\n                setActiveModuleId(moduleId);\r\n                setIsDialogOpen(true);\r\n\r\n                // Set first question as active if it's a quiz\r\n                if ((item.type === 'quiz') &&\r\n                    item.questions && item.questions.length > 0) {\r\n                    setActiveQuestionId(questionId || item.questions[0].id);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Function to navigate to the next task\r\n    const goToNextTask = () => {\r\n        if (!activeItem || !activeModuleId) return;\r\n\r\n        // If AI is responding, show confirmation dialog\r\n        if (isAiResponding) {\r\n            setPendingNavigation({ action: 'nextTask' });\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        executeGoToNextTask();\r\n    };\r\n\r\n    // Execute go to next task (without checks)\r\n    const executeGoToNextTask = () => {\r\n        if (!activeItem || !activeModuleId) return;\r\n\r\n        // If this is a quiz with questions and not on the last question, go to next question\r\n        if ((activeItem.type === 'quiz') &&\r\n            activeItem.questions &&\r\n            activeItem.questions.length > 1 &&\r\n            activeQuestionId) {\r\n\r\n            const currentIndex = activeItem.questions.findIndex((q: any) => q.id === activeQuestionId);\r\n            if (currentIndex < activeItem.questions.length - 1) {\r\n                // Go to next question\r\n                const nextQuestion = activeItem.questions[currentIndex + 1];\r\n                executeActivateQuestion(nextQuestion.id);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Otherwise, go to next task in module\r\n        const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n        if (!currentModule) return;\r\n\r\n        // Find the index of the current task in the module\r\n        const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n        if (currentTaskIndex === -1) return;\r\n\r\n        // Check if there's a next task in this module\r\n        if (currentTaskIndex < currentModule.items.length - 1) {\r\n            // Navigate to the next task in the same module\r\n            const nextTask = currentModule.items[currentTaskIndex + 1];\r\n            executeOpenTaskItem(activeModuleId, nextTask.id);\r\n        }\r\n    };\r\n\r\n    // Function to navigate to the previous task\r\n    const goToPreviousTask = () => {\r\n        if (!activeItem || !activeModuleId) return;\r\n\r\n        // If AI is responding, show confirmation dialog\r\n        if (isAiResponding) {\r\n            setPendingNavigation({ action: 'prevTask' });\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        executeGoToPreviousTask();\r\n    };\r\n\r\n    // Execute go to previous task (without checks)\r\n    const executeGoToPreviousTask = () => {\r\n        if (!activeItem || !activeModuleId) return;\r\n\r\n        // If this is a quiz with questions and not on the first question, go to previous question\r\n        if ((activeItem.type === 'quiz') &&\r\n            activeItem.questions &&\r\n            activeItem.questions.length > 1 &&\r\n            activeQuestionId) {\r\n\r\n            const currentIndex = activeItem.questions.findIndex((q: any) => q.id === activeQuestionId);\r\n            if (currentIndex > 0) {\r\n                // Go to previous question\r\n                const prevQuestion = activeItem.questions[currentIndex - 1];\r\n                executeActivateQuestion(prevQuestion.id);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Otherwise, go to previous task in module\r\n        const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n        if (!currentModule) return;\r\n\r\n        // Find the index of the current task in the module\r\n        const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n        if (currentTaskIndex === -1) return;\r\n\r\n        // Check if there's a previous task in this module\r\n        if (currentTaskIndex > 0) {\r\n            // Navigate to the previous task in the same module\r\n            const previousTask = currentModule.items[currentTaskIndex - 1];\r\n            executeOpenTaskItem(activeModuleId, previousTask.id);\r\n        }\r\n    };\r\n\r\n    // Function to check if a module is now fully completed\r\n    const checkModuleCompletion = (moduleId: string, newCompletedTasks: Record<string, boolean>) => {\r\n        const module = filteredModules.find(m => m.id === moduleId);\r\n        if (!module) return false;\r\n\r\n        // Check if all items in the module are now completed\r\n        const allTasksCompleted = module.items.every(item => newCompletedTasks[item.id] === true);\r\n\r\n        // If all tasks are completed and there's at least one task, this is a module completion\r\n        return allTasksCompleted && module.items.length > 0;\r\n    };\r\n\r\n    // Function to handle quiz answer submission\r\n    const handleQuizAnswerSubmit = useCallback((questionId: string, answer: string) => {\r\n        // Mark the question as completed\r\n        setCompletedQuestions(prev => ({\r\n            ...prev,\r\n            [questionId]: true\r\n        }));\r\n\r\n        // Check if all questions in the current quiz are now completed\r\n        if (activeItem?.type === 'quiz') {\r\n            const allQuestions = activeItem.questions || [];\r\n\r\n            // Also update the nested completedQuestionIds structure to match our UI display\r\n            setLocalCompletedQuestionIds(prev => {\r\n                const updatedQuestionIds = { ...prev };\r\n\r\n                // Initialize the object for this task if it doesn't exist\r\n                if (!updatedQuestionIds[activeItem.id]) {\r\n                    updatedQuestionIds[activeItem.id] = {};\r\n                }\r\n\r\n                // Mark this question as complete\r\n                updatedQuestionIds[activeItem.id] = {\r\n                    ...updatedQuestionIds[activeItem.id],\r\n                    [questionId]: true\r\n                };\r\n\r\n                return updatedQuestionIds;\r\n            });\r\n\r\n            // Notify parent component about question completion\r\n            if (onQuestionComplete) {\r\n                onQuestionComplete(activeItem.id, questionId, true);\r\n            }\r\n\r\n            // If this is a single question quiz, mark the entire task as complete\r\n            if (allQuestions.length <= 1) {\r\n                const newCompletedTasks = {\r\n                    ...completedTasks,\r\n                    [activeItem.id]: true\r\n                };\r\n\r\n                setCompletedTasks(newCompletedTasks);\r\n\r\n                // Notify parent component about task completion\r\n                if (onTaskComplete) {\r\n                    onTaskComplete(activeItem.id, true);\r\n                }\r\n\r\n                // Check if this task completion has completed the entire module\r\n                if (activeModuleId && checkModuleCompletion(activeModuleId, newCompletedTasks)) {\r\n                    // This completes the module - trigger the enhanced celebration\r\n                    triggerModuleCompletionCelebration();\r\n                } else {\r\n                    // Standard celebration for task completion\r\n                    triggerConfetti(true); // Full celebration for single question quiz completion\r\n                }\r\n            } else {\r\n                // For multi-question quiz, check if all questions are now completed\r\n                const areAllQuestionsCompleted = allQuestions.every(\r\n                    (q: any) => completedQuestions[q.id] || q.id === questionId\r\n                );\r\n\r\n                if (areAllQuestionsCompleted) {\r\n                    const newCompletedTasks = {\r\n                        ...completedTasks,\r\n                        [activeItem.id]: true\r\n                    };\r\n\r\n                    setCompletedTasks(newCompletedTasks);\r\n\r\n                    // Notify parent component about task completion\r\n                    if (onTaskComplete) {\r\n                        onTaskComplete(activeItem.id, true);\r\n                    }\r\n\r\n                    // Check if this task completion has completed the entire module\r\n                    if (activeModuleId && checkModuleCompletion(activeModuleId, newCompletedTasks)) {\r\n                        // This completes the module - trigger the enhanced celebration\r\n                        triggerModuleCompletionCelebration();\r\n                    } else {\r\n                        // Standard celebration for task completion\r\n                        triggerConfetti(true); // Full celebration for completing entire quiz\r\n                    }\r\n                } else {\r\n                    // Trigger light confetti for individual question completion\r\n                    triggerConfetti(false); // Light celebration for single question completion\r\n                }\r\n            }\r\n        }\r\n    }, [activeItem, activeModuleId, completedTasks, completedQuestions, onTaskComplete, onQuestionComplete]);\r\n\r\n    // Function to mark task as completed\r\n    const markTaskComplete = async () => {\r\n        if (viewOnly || !activeItem || !activeModuleId || !userId) return;\r\n\r\n        // Set loading state to true to show spinner\r\n        setIsMarkingComplete(true);\r\n\r\n        try {\r\n            // Store chat message for learning material completion\r\n            // This is similar to the chat message storage in LearnerQuizView\r\n            // but we only send a user message, not an AI response\r\n            try {\r\n                const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/tasks/${activeItem.id}/complete`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ user_id: parseInt(userId) })\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to store learning material completion');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error storing learning material completion:', error);\r\n                // Continue execution even if this fails - don't block the UI update\r\n            }\r\n\r\n            // Create updated completed tasks state\r\n            const newCompletedTasks = {\r\n                ...completedTasks,\r\n                [activeItem.id]: true\r\n            };\r\n\r\n            // Mark the task as completed in our local state\r\n            setCompletedTasks(newCompletedTasks);\r\n\r\n            // Call the onTaskComplete callback to notify parent component\r\n            if (onTaskComplete) {\r\n                onTaskComplete(activeItem.id, true);\r\n            }\r\n\r\n            // Check if this task completion has completed the entire module\r\n            if (checkModuleCompletion(activeModuleId, newCompletedTasks)) {\r\n                // This completes the module - trigger the enhanced celebration\r\n                triggerModuleCompletionCelebration();\r\n            } else {\r\n                // Regular completion celebration\r\n                triggerConfetti(true);\r\n            }\r\n\r\n            // Find the current module\r\n            const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n            if (!currentModule) return;\r\n\r\n            // Find the index of the current task in the module\r\n            const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n            if (currentTaskIndex === -1) return;\r\n\r\n            // Check if there's a next task in this module\r\n            if (currentTaskIndex < currentModule.items.length - 1) {\r\n                // Navigate to the next task in the same module\r\n                const nextTask = currentModule.items[currentTaskIndex + 1];\r\n                openTaskItem(activeModuleId, nextTask.id);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error marking task as complete:\", error);\r\n        } finally {\r\n            // Reset loading state\r\n            setIsMarkingComplete(false);\r\n        }\r\n    };\r\n\r\n    // Function to check if we're at the first task in the module\r\n    const isFirstTask = () => {\r\n        if (!activeItem || !activeModuleId) return false;\r\n\r\n        // If this is a quiz with questions, check if we're on the first question\r\n        if ((activeItem.type === 'quiz') &&\r\n            activeItem.questions &&\r\n            activeItem.questions.length > 1 &&\r\n            activeQuestionId) {\r\n\r\n            const currentIndex = activeItem.questions.findIndex((q: any) => q.id === activeQuestionId);\r\n            if (currentIndex > 0) {\r\n                // Not the first question, so return false\r\n                return false;\r\n            }\r\n        }\r\n\r\n        const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n        if (!currentModule) return false;\r\n\r\n        const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n        return currentTaskIndex === 0;\r\n    };\r\n\r\n    // Function to check if we're at the last task in the module\r\n    const isLastTask = () => {\r\n        if (!activeItem || !activeModuleId) return false;\r\n\r\n        // If this is a quiz with questions, check if we're on the last question\r\n        if ((activeItem.type === 'quiz') &&\r\n            activeItem.questions &&\r\n            activeItem.questions.length > 1 &&\r\n            activeQuestionId) {\r\n\r\n            const currentIndex = activeItem.questions.findIndex((q: any) => q.id === activeQuestionId);\r\n            if (currentIndex < activeItem.questions.length - 1) {\r\n                // Not the last question, so return false\r\n                return false;\r\n            }\r\n        }\r\n\r\n        const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n        if (!currentModule) return false;\r\n\r\n        const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n        return currentTaskIndex === currentModule.items.length - 1;\r\n    };\r\n\r\n    // Handle Escape key to close dialog\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLHeadingElement>) => {\r\n        if (e.key === 'Escape') {\r\n            closeDialog();\r\n        }\r\n    };\r\n\r\n    // Handle click outside dialog to close it\r\n    const handleDialogBackdropClick = (e: React.MouseEvent) => {\r\n        // Only close if clicking directly on the backdrop, not on the dialog content\r\n        if (dialogContentRef.current && !dialogContentRef.current.contains(e.target as Node)) {\r\n            closeDialog();\r\n        }\r\n    };\r\n\r\n    // Function to get previous task info\r\n    const getPreviousTaskInfo = () => {\r\n        if (!activeItem || !activeModuleId) return null;\r\n\r\n        // If this is a quiz with questions and not on the first question, get previous question info\r\n        if ((activeItem.type === 'quiz') &&\r\n            activeItem.questions &&\r\n            activeItem.questions.length > 1 &&\r\n            activeQuestionId) {\r\n\r\n            const currentIndex = activeItem.questions.findIndex((q: any) => q.id === activeQuestionId);\r\n            if (currentIndex > 0) {\r\n                // Return previous question info\r\n                return {\r\n                    type: 'question',\r\n                    title: `Question ${currentIndex}`\r\n                };\r\n            }\r\n        }\r\n\r\n        // Get previous task in module\r\n        const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n        if (!currentModule) return null;\r\n\r\n        // Find the index of the current task in the module\r\n        const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n        if (currentTaskIndex <= 0) return null;\r\n\r\n        // Return previous task info\r\n        const previousTask = currentModule.items[currentTaskIndex - 1];\r\n        return {\r\n            type: 'task',\r\n            title: previousTask.title\r\n        };\r\n    };\r\n\r\n    // Function to get next task info\r\n    const getNextTaskInfo = () => {\r\n        if (!activeItem || !activeModuleId) return null;\r\n\r\n        // If this is a quiz with questions and not on the last question, get next question info\r\n        if ((activeItem.type === 'quiz') &&\r\n            activeItem.questions &&\r\n            activeItem.questions.length > 1 &&\r\n            activeQuestionId) {\r\n\r\n            const currentIndex = activeItem.questions.findIndex((q: any) => q.id === activeQuestionId);\r\n            if (currentIndex < activeItem.questions.length - 1) {\r\n                // Return next question info\r\n                return {\r\n                    type: 'question',\r\n                    title: `Question ${currentIndex + 2}`\r\n                };\r\n            }\r\n        }\r\n\r\n        // Get next task in module\r\n        const currentModule = filteredModules.find(m => m.id === activeModuleId);\r\n        if (!currentModule) return null;\r\n\r\n        // Find the index of the current task in the module\r\n        const currentTaskIndex = currentModule.items.findIndex(item => item.id === activeItem.id);\r\n        if (currentTaskIndex === -1 || currentTaskIndex >= currentModule.items.length - 1) return null;\r\n\r\n        // Return next task info\r\n        const nextTask = currentModule.items[currentTaskIndex + 1];\r\n        return {\r\n            type: 'task',\r\n            title: nextTask.title\r\n        };\r\n    };\r\n\r\n    // Handle AI responding state change from quiz view\r\n    const handleAiRespondingChange = useCallback((isResponding: boolean) => {\r\n        setIsAiResponding(isResponding);\r\n    }, []);\r\n\r\n    // Function to trigger confetti animation\r\n    const triggerConfetti = (isFullCompletion = true) => {\r\n        // Trigger confetti effect with different intensity based on completion type\r\n        confetti({\r\n            particleCount: isFullCompletion ? 100 : 50,\r\n            spread: isFullCompletion ? 70 : 40,\r\n            origin: { y: 0.6 },\r\n            colors: ['#f94144', '#f3722c', '#f8961e', '#f9c74f', '#90be6d', '#43aa8b', '#577590'],\r\n            zIndex: 9999\r\n        });\r\n\r\n        // Play success sound\r\n        setPlaySuccessSound(true);\r\n\r\n        // Reset sound trigger after a short delay\r\n        setTimeout(() => {\r\n            setPlaySuccessSound(false);\r\n        }, 300);\r\n    };\r\n\r\n    // Function to trigger a more extravagant confetti celebration for module completion\r\n    const triggerModuleCompletionCelebration = () => {\r\n        // Get random confetti origin points for a more dynamic effect\r\n        const generateRandomOrigin = () => ({\r\n            x: 0.2 + Math.random() * 0.6, // Random x value between 0.2 and 0.8\r\n            y: 0.2 + Math.random() * 0.4  // Random y value between 0.2 and 0.6\r\n        });\r\n\r\n        // First wave - center burst (larger particles)\r\n        confetti({\r\n            particleCount: 150,\r\n            spread: 90,\r\n            origin: { y: 0.6 },\r\n            colors: ['#f94144', '#f3722c', '#f8961e', '#f9c74f', '#90be6d', '#43aa8b', '#577590'],\r\n            zIndex: 9999,\r\n            scalar: 1.5 // Larger particles\r\n        });\r\n\r\n        // Second wave - left side burst (with gravity)\r\n        setTimeout(() => {\r\n            confetti({\r\n                particleCount: 80,\r\n                angle: 60,\r\n                spread: 70,\r\n                origin: { x: 0, y: 0.5 },\r\n                colors: ['#f94144', '#f3722c', '#f8961e', '#f9c74f', '#90be6d', '#43aa8b', '#577590'],\r\n                zIndex: 9999,\r\n                gravity: 1.2,\r\n                drift: 2\r\n            });\r\n        }, 200);\r\n\r\n        // Third wave - right side burst (with gravity)\r\n        setTimeout(() => {\r\n            confetti({\r\n                particleCount: 80,\r\n                angle: 120,\r\n                spread: 70,\r\n                origin: { x: 1, y: 0.5 },\r\n                colors: ['#f94144', '#f3722c', '#f8961e', '#f9c74f', '#90be6d', '#43aa8b', '#577590'],\r\n                zIndex: 9999,\r\n                gravity: 1.2,\r\n                drift: -2\r\n            });\r\n        }, 400);\r\n\r\n        // Fourth wave - random bursts for 2 seconds\r\n        let burstCount = 0;\r\n        const maxBursts = 5;\r\n        const burstInterval = setInterval(() => {\r\n            if (burstCount >= maxBursts) {\r\n                clearInterval(burstInterval);\r\n                return;\r\n            }\r\n\r\n            confetti({\r\n                particleCount: 30,\r\n                spread: 80,\r\n                origin: generateRandomOrigin(),\r\n                colors: ['#f94144', '#f3722c', '#f8961e', '#f9c74f', '#90be6d', '#43aa8b', '#577590'],\r\n                zIndex: 9999\r\n            });\r\n\r\n            burstCount++;\r\n        }, 300);\r\n\r\n        // Play the more impressive module completion sound\r\n        setPlayModuleCompletionSound(true);\r\n\r\n        // Reset sound trigger after the sound duration\r\n        setTimeout(() => {\r\n            setPlayModuleCompletionSound(false);\r\n        }, 2000); // Longer timeout for the longer sound\r\n    };\r\n\r\n    // Initialize expandedModules from the isExpanded property of modules\r\n    useEffect(() => {\r\n        if (modules && modules.length > 0) {\r\n            const initialExpandedState: Record<string, boolean> = {};\r\n            modules.forEach(module => {\r\n                if (module.isExpanded && !module.unlockAt) {\r\n                    initialExpandedState[module.id] = true;\r\n                }\r\n            });\r\n\r\n            // Only set if there are any expanded modules to avoid unnecessary state updates\r\n            if (Object.keys(initialExpandedState).length > 0) {\r\n                setExpandedModules(initialExpandedState);\r\n            }\r\n        }\r\n    }, [modules]);\r\n\r\n    // Toggle sidebar visibility for mobile\r\n    const toggleSidebar = () => {\r\n        setIsSidebarOpen(prev => !prev);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-black\">\r\n            {filteredModules.length > 0 ? (\r\n                <CourseModuleList\r\n                    modules={modulesWithProgress}\r\n                    mode=\"view\"\r\n                    expandedModules={expandedModules}\r\n                    onToggleModule={toggleModule}\r\n                    onOpenItem={openTaskItem}\r\n                    completedTaskIds={completedTasks}\r\n                    completedQuestionIds={localCompletedQuestionIds}\r\n                />\r\n            ) : (\r\n                <div className=\"flex flex-col items-center justify-center py-16 text-center\">\r\n                    <div>\r\n                        <h2 className=\"text-4xl font-light mb-4 text-white\">\r\n                            Your learning adventure awaits!\r\n                        </h2>\r\n                        <p className=\"text-gray-400 mb-8\">\r\n                            This course is still being crafted with care. Check back soon to begin your journey.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Success Sound */}\r\n            <SuccessSound play={playSuccessSound} />\r\n\r\n            {/* Module Completion Sound */}\r\n            <ModuleCompletionSound play={playModuleCompletionSound} />\r\n\r\n            {/* Navigation Confirmation Dialog */}\r\n            <ConfirmationDialog\r\n                open={showNavigationConfirmation}\r\n                title=\"AI is still responding\"\r\n                message=\"The AI is still generating a response. If you navigate away now, you will not see the complete response. Are you sure you want to leave?\"\r\n                confirmButtonText=\"Leave anyway\"\r\n                cancelButtonText=\"Stay\"\r\n                onConfirm={handleNavigationConfirm}\r\n                onCancel={handleNavigationCancel}\r\n                type=\"custom\"\r\n            />\r\n\r\n            {/* Task Viewer Dialog - Using the same pattern as the editor view */}\r\n            {isDialogOpen && activeItem && (\r\n                <div\r\n                    className=\"fixed inset-0 bg-black z-50 overflow-hidden\"\r\n                    onClick={handleDialogBackdropClick}\r\n                >\r\n                    <div\r\n                        ref={dialogContentRef}\r\n                        className=\"w-full h-full flex flex-row\"\r\n                        onClick={(e) => e.stopPropagation()}\r\n                    >\r\n                        {/* Mobile overlay - only shown when sidebar is open on mobile */}\r\n                        {isSidebarOpen && (\r\n                            <div\r\n                                className=\"fixed inset-0 z-10\"\r\n                                onClick={toggleSidebar}\r\n                                style={{ backgroundColor: 'rgba(0, 0, 0, 0.8)' }}\r\n                                aria-label=\"Close sidebar overlay\"\r\n                            ></div>\r\n                        )}\r\n\r\n                        {/* Sidebar with module tasks - hidden on mobile by default */}\r\n                        <div className={`${isSidebarOpen ? 'absolute inset-0' : 'hidden'} lg:relative lg:block w-64 h-full bg-[#121212] border-r border-gray-800 flex flex-col overflow-hidden z-10`}>\r\n                            {/* Sidebar Header */}\r\n                            <div className=\"p-4 border-b border-gray-800 bg-[#0A0A0A] flex items-center justify-between\">\r\n                                <h3 className=\"text-lg font-light text-white truncate\">\r\n                                    {filteredModules.find(m => m.id === activeModuleId)?.title || \"Module\"}\r\n                                </h3>\r\n                                {/* Close button for mobile sidebar */}\r\n                                <button\r\n                                    onClick={toggleSidebar}\r\n                                    className={`lg:hidden mr-3 flex-shrink-0 mt-1 ${completedTasks[activeItem?.id]\r\n                                        ? \"text-white\"\r\n                                        : \"text-gray-400 hover:text-white\"\r\n                                        }`}\r\n                                    aria-label=\"Close sidebar\"\r\n                                >\r\n                                    <ChevronLeft size={20} />\r\n                                </button>\r\n                            </div>\r\n\r\n                            {/* Task List */}\r\n                            <div className=\"overflow-y-auto\">\r\n                                {activeModuleId && filteredModules.find(m => m.id === activeModuleId)?.items.map((item) => (\r\n                                    <div key={item.id}>\r\n                                        <div\r\n                                            className={`px-4 py-2 cursor-pointer flex items-center ${item.id === activeItem.id &&\r\n                                                (\r\n                                                    (item.type !== 'quiz') ||\r\n                                                    !activeItem?.questions ||\r\n                                                    activeItem.questions.length <= 1\r\n                                                )\r\n                                                ? \"bg-[#222222] border-l-2 border-green-500\"\r\n                                                : completedTasks[item.id]\r\n                                                    ? \"border-l-2 border-green-500 text-green-500\"\r\n                                                    : (item.type === 'quiz') &&\r\n                                                        // Check if there are any completed questions for this quiz\r\n                                                        localCompletedQuestionIds[item.id] &&\r\n                                                        Object.keys(localCompletedQuestionIds[item.id]).some(qId => localCompletedQuestionIds[item.id][qId] === true)\r\n                                                        ? \"border-l-2 border-yellow-500\"\r\n                                                        : \"hover:bg-[#1A1A1A] border-l-2 border-transparent\"\r\n                                                }`}\r\n                                            onClick={() => openTaskItem(activeModuleId, item.id)}\r\n                                        >\r\n                                            <div className={`flex items-center mr-2}`}>\r\n                                                {completedTasks[item.id] ? (\r\n                                                    <div className=\"w-7 h-7 rounded-md flex items-center justify-center\">\r\n                                                        <CheckCircle size={16} className=\"text-green-500\" />\r\n                                                    </div>\r\n                                                ) : item.type === 'material' ? (\r\n                                                    <div className=\"w-7 h-7 rounded-md flex items-center justify-center\">\r\n                                                        <BookOpen size={16} className=\"text-blue-400\" />\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div className={`w-7 h-7 rounded-md flex items-center justify-center`}>\r\n                                                        <ClipboardList size={16} className={\r\n                                                            localCompletedQuestionIds[item.id] &&\r\n                                                                Object.keys(localCompletedQuestionIds[item.id]).some(qId => localCompletedQuestionIds[item.id][qId] === true)\r\n                                                                ? \"text-yellow-500\"\r\n                                                                : \"text-purple-500\"\r\n                                                        } />\r\n                                                    </div>\r\n                                                )}\r\n\r\n                                                {/* Add a small generating indicator if the item is still being generated */}\r\n                                                {item.isGenerating && (\r\n                                                    <div className=\"ml-2 animate-pulse\">\r\n                                                        <Loader2 size={12} className=\"animate-spin text-gray-400\" />\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            <div className={`flex-1 text-sm ${completedTasks[item.id]\r\n                                                ? \"text-green-500\"\r\n                                                : (item.type === 'quiz') &&\r\n                                                    // Match the same condition for the text color\r\n                                                    localCompletedQuestionIds[item.id] &&\r\n                                                    Object.keys(localCompletedQuestionIds[item.id]).some(qId => localCompletedQuestionIds[item.id][qId] === true)\r\n                                                    ? \"text-yellow-500\"\r\n                                                    : \"text-gray-200\"\r\n                                                } truncate`}>\r\n                                                {item.title}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* Show questions as expanded items for active quiz */}\r\n                                        {(item.type === 'quiz') &&\r\n                                            item.id === activeItem?.id &&\r\n                                            activeItem?.questions &&\r\n                                            activeItem.questions.length > 1 && (\r\n                                                <div className=\"pl-8 border-l border-gray-800\">\r\n                                                    {activeItem.questions.map((question: any, index: number) => (\r\n                                                        <div\r\n                                                            key={question.id}\r\n                                                            className={`px-4 py-2 cursor-pointer flex items-center ${question.id === activeQuestionId\r\n                                                                ? \"bg-[#222222] border-l-2 border-green-500\"\r\n                                                                : completedQuestions[question.id]\r\n                                                                    ? \"border-l-2 border-green-500 text-green-500\"\r\n                                                                    : \"hover:bg-[#1A1A1A] border-l-2 border-transparent\"\r\n                                                                }`}\r\n                                                            onClick={() => activateQuestion(question.id)}\r\n                                                        >\r\n                                                            <div className={`flex items-center mr-2 ${completedQuestions[question.id] ? \"text-green-500\" : \"text-gray-400\"}`}>\r\n                                                                {completedQuestions[question.id]\r\n                                                                    && <CheckCircle size={14} />\r\n                                                                }\r\n                                                            </div>\r\n                                                            <div className={`flex-1 text-sm ${completedQuestions[question.id] ? \"text-green-500\" : \"text-gray-300\"} break-words whitespace-normal min-w-0`}>\r\n                                                                {question.config.title}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n\r\n                            {/* Back to Course Button - hidden on mobile, fixed at bottom for laptop */}\r\n                            <div className=\"hidden lg:block p-3 border-t border-gray-800 bg-[#121212] absolute bottom-0 left-0 right-0\">\r\n                                <button\r\n                                    onClick={closeDialog}\r\n                                    className=\"w-full flex items-center justify-center px-3 py-2 text-sm text-gray-300 hover:text-white bg-[#1A1A1A] hover:bg-[#222222] rounded transition-colors cursor-pointer\"\r\n                                >\r\n                                    Back to course\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Main Content */}\r\n                        <div className=\"flex-1 h-full flex flex-col bg-[#1A1A1A]\">\r\n                            {/* Dialog Header */}\r\n                            <div\r\n                                className={`flex items-start justify-between p-4 border-b border-gray-800 ${\r\n                                    // Add background color for completed tasks on mobile\r\n                                    (completedTasks[activeItem?.id])\r\n                                        ? \"lg:bg-[#111111] bg-green-700\"\r\n                                        : \"bg-[#111111]\"\r\n                                    }`}\r\n                            >\r\n                                <div className=\"flex items-start\">\r\n                                    {/* Hamburger menu for mobile */}\r\n                                    <button\r\n                                        onClick={toggleSidebar}\r\n                                        className={`lg:hidden mr-3 flex-shrink-0 mt-1 ${completedTasks[activeItem?.id]\r\n                                            ? \"text-white\"\r\n                                            : \"text-gray-400 hover:text-white\"\r\n                                            }`}\r\n                                        aria-label=\"Toggle sidebar\"\r\n                                    >\r\n                                        <Menu size={20} />\r\n                                    </button>\r\n                                    <div className=\"flex flex-col min-w-0 pr-2\">\r\n                                        <div className=\"flex items-center mb-1\">\r\n                                            <h2\r\n                                                ref={dialogTitleRef}\r\n                                                contentEditable={false}\r\n                                                suppressContentEditableWarning\r\n                                                onKeyDown={handleKeyDown}\r\n                                                className=\"text-xl sm:text-2xl lg:text-2xl font-light text-white outline-none break-words hyphens-auto\"\r\n                                            >\r\n                                                {activeItem?.title}\r\n                                            </h2>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"flex items-center space-x-3 flex-shrink-0 ml-2\">\r\n                                    {/* Show completed status for learning material/quiz that has been completed */}\r\n                                    {completedTasks[activeItem.id] && (\r\n                                        <button\r\n                                            className=\"hidden lg:flex items-center px-4 py-2 text-sm text-white bg-green-700 rounded-full transition-colors cursor-default\"\r\n                                            disabled\r\n                                        >\r\n                                            <CheckCircle size={16} className=\"mr-2\" />\r\n                                            Completed\r\n                                        </button>\r\n                                    )}\r\n\r\n                                    {/* Mark Complete button for desktop */}\r\n                                    {activeItem?.type === 'material' && !completedTasks[activeItem?.id] && !viewOnly && (\r\n                                        <button\r\n                                            onClick={markTaskComplete}\r\n                                            className={`hidden lg:flex items-center px-4 py-2 text-sm text-white bg-transparent border !border-green-500 hover:bg-[#222222] focus:border-green-500 active:border-green-500 rounded-full transition-colors ${isMarkingComplete ? 'opacity-70 cursor-not-allowed' : 'cursor-pointer'}`}\r\n                                            aria-label=\"Mark complete\"\r\n                                            disabled={isMarkingComplete}\r\n                                        >\r\n                                            {isMarkingComplete ? (\r\n                                                <>\r\n                                                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <CheckCircle size={16} className=\"mr-2\" />\r\n                                                    Mark Complete\r\n                                                </>\r\n                                            )}\r\n                                        </button>\r\n                                    )}\r\n                                    <button\r\n                                        onClick={closeDialog}\r\n                                        className={`transition-colors focus:outline-none cursor-pointer p-1 lg:hidden ${completedTasks[activeItem?.id]\r\n                                            ? \"text-white\"\r\n                                            : \"text-gray-400 hover:text-white\"\r\n                                            }`}\r\n                                    >\r\n                                        <X size={20} />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Dialog Content */}\r\n                            <div\r\n                                className=\"flex-1 overflow-y-auto p-0 dialog-content-editor relative lg:pb-0 pb-[60px]\"\r\n                                style={{ height: 'calc(100vh - 140px)' }}\r\n                            >\r\n                                {isLoading ? (\r\n                                    <div className=\"flex items-center justify-center h-full\">\r\n                                        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white\"></div>\r\n                                    </div>\r\n                                ) : (\r\n                                    <>\r\n                                        {activeItem?.type === 'material' && (\r\n                                            <DynamicLearningMaterialViewer\r\n                                                taskId={activeItem.id}\r\n                                                userId={userId}\r\n                                                readOnly={true}\r\n                                                isDarkMode={true}\r\n                                                onMarkComplete={!completedTasks[activeItem?.id] && !viewOnly ? markTaskComplete : undefined}\r\n                                                viewOnly={viewOnly}\r\n                                            />\r\n                                        )}\r\n                                        {(activeItem?.type === 'quiz') && (\r\n                                            <>\r\n                                                <DynamicLearnerQuizView\r\n                                                    questions={activeItem.questions || []}\r\n                                                    readOnly={true}\r\n                                                    viewOnly={viewOnly}\r\n                                                    currentQuestionId={activeQuestionId || undefined}\r\n                                                    onQuestionChange={activateQuestion}\r\n                                                    onSubmitAnswer={handleQuizAnswerSubmit}\r\n                                                    userId={userId}\r\n                                                    isTestMode={isTestMode}\r\n                                                    taskId={activeItem.id}\r\n                                                    completedQuestionIds={completedQuestions}\r\n                                                    isDarkMode={true}\r\n                                                    onAiRespondingChange={handleAiRespondingChange}\r\n                                                    className={`${isSidebarOpen ? 'sidebar-visible' : ''}`}\r\n                                                    isAdminView={isAdminView}\r\n                                                />\r\n                                            </>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n\r\n                            {/* Navigation Footer - Hidden on mobile */}\r\n                            <div className=\"hidden lg:flex items-center justify-between p-4 border-t border-gray-800 bg-[#111111]\">\r\n                                {!isFirstTask() && getPreviousTaskInfo() && (\r\n                                    <button\r\n                                        onClick={goToPreviousTask}\r\n                                        className=\"flex items-center px-4 py-2 text-sm rounded-md transition-colors text-white hover:bg-gray-800 cursor-pointer\"\r\n                                    >\r\n                                        <ChevronLeft size={16} className=\"mr-1\" />\r\n                                        {getPreviousTaskInfo()?.title}\r\n                                    </button>\r\n                                )}\r\n                                {isFirstTask() && <div></div>}\r\n\r\n                                {!isLastTask() && getNextTaskInfo() && (\r\n                                    <button\r\n                                        onClick={goToNextTask}\r\n                                        className=\"flex items-center px-4 py-2 text-sm rounded-md transition-colors text-white hover:bg-gray-800 cursor-pointer\"\r\n                                    >\r\n                                        {getNextTaskInfo()?.title}\r\n                                        <ChevronRight size={16} className=\"ml-1\" />\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Mobile Navigation Footer - Only visible on mobile */}\r\n            {isDialogOpen && activeItem && (\r\n                <div className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-[#111111] border-t border-gray-800 z-50 px-4 py-3 flex justify-between items-center max-h-[60px]\">\r\n                    {!isFirstTask() && getPreviousTaskInfo() ? (\r\n                        <button\r\n                            onClick={goToPreviousTask}\r\n                            className=\"flex items-center px-4 py-2 text-sm rounded-md transition-colors text-white bg-[#222222] cursor-pointer\"\r\n                            aria-label=\"Previous task\"\r\n                        >\r\n                            <ChevronLeft size={16} className=\"mr-1\" />\r\n                            <span className=\"max-w-[100px] truncate\">{getPreviousTaskInfo()?.title}</span>\r\n                        </button>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n\r\n                    {!isLastTask() && getNextTaskInfo() ? (\r\n                        <button\r\n                            onClick={goToNextTask}\r\n                            className=\"flex items-center px-4 py-2 text-sm rounded-md transition-colors text-white bg-[#222222] cursor-pointer\"\r\n                            aria-label=\"Next task\"\r\n                        >\r\n                            <span className=\"max-w-[100px] truncate\">{getNextTaskInfo()?.title}</span>\r\n                            <ChevronRight size={16} className=\"ml-1\" />\r\n                        </button>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* Navigation Confirmation Dialog - Moved to end and z-index increased */}\r\n            <ConfirmationDialog\r\n                key=\"navigationConfirmationDialog\"\r\n                open={showNavigationConfirmation}\r\n                title=\"What's the rush?\"\r\n                message=\"Our AI is still reviewing your answer and will be ready with a response soon. If you navigate away now, you will not see the complete response. Are you sure you want to leave?\"\r\n                confirmButtonText=\"Leave anyway\"\r\n                cancelButtonText=\"Stay\"\r\n                onConfirm={handleNavigationConfirm}\r\n                onCancel={handleNavigationCancel}\r\n                type=\"custom\"\r\n            />\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":";;;AAyT4C;;AAzT5C;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAEA,2DAA2D;AAC3D,MAAM,gCAAgC,CAAA,GAAA,iRAAA,CAAA,UAAO,AAAD,EACxC;;;;;;IACE,KAAK;;KAFL;AAKN,qCAAqC;AACrC,MAAM,yBAAyB,CAAA,GAAA,iRAAA,CAAA,UAAO,AAAD,EACjC;;;;;;IACE,KAAK;;MAFL;AAkBS,SAAS,kBAAkB,KAWjB;QAXiB,EACtC,OAAO,EACP,mBAAmB,CAAC,CAAC,EACrB,uBAAuB,CAAC,CAAC,EACzB,cAAc,EACd,kBAAkB,EAClB,aAAa,EACb,aAAa,KAAK,EAClB,WAAW,KAAK,EAChB,YAAY,EAAE,EACd,cAAc,KAAK,EACE,GAXiB;QA07BL,uBAiBc,wBA+OV,sBAUA,kBAoB6B,uBAYA;;IAxtClE,6BAA6B;IAC7B,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,UAAO,AAAD;IACvB,MAAM,SAAS,WAAW,YAAY,CAAA,iBAAA,2BAAA,KAAM,EAAE,KAAI;IAElD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAA2B,CAAC;IACjF,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAO;IAClD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAiB;IACpE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAiB;IACxE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,gDAAgD;IAChD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAA2B;IAC9E,8FAA8F;IAC9F,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAA2B,CAAC;IACvF,2DAA2D;IAC3D,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,oEAAoE;IACpE,MAAM,CAAC,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAA2C;IACpH,MAAM,iBAAiB,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAsB;IAClD,MAAM,mBAAmB,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAkB;IAChD,oDAAoD;IACpD,MAAM,0BAA0B,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAE;IAEvC,gCAAgC;IAChC,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,sBAAsB;IACtB,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,wCAAwC;IACxC,MAAM,CAAC,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAE3E,6DAA6D;IAC7D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,4BAA4B,8BAA8B,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC7E,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAoC;QAAE,QAAQ;IAAG;IAE1G,0CAA0C;IAC1C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,iCAAiC;IACjC,MAAM,wBAAwB;QAC1B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACH;IAED,oDAAoD;IACpD,MAAM,mBAAmB;QACrB,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,sBAAsB,MAAM;QAC3E,OAAO,qBAAqB,CAAC,YAAY;IAC7C;IAEA,2DAA2D;IAC3D,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;uCAAE;YACN,kBAAkB;QACtB;sCAAG;QAAC;KAAiB;IAErB,0EAA0E;IAC1E,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;uCAAE;YACN,6BAA6B;QACjC;sCAAG;QAAC;KAAqB;IAEzB,0EAA0E;IAC1E,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;uCAAE;YACN,+EAA+E;YAC/E,MAAM,0BAAmD,CAAC;YAE1D,OAAO,OAAO,CAAC,2BAA2B,OAAO;+CAAC;wBAAC,CAAC,QAAQ,UAAU;oBAClE,OAAO,OAAO,CAAC,WAAW,OAAO;uDAAC;gCAAC,CAAC,YAAY,WAAW;4BACvD,uBAAuB,CAAC,WAAW,GAAG;wBAC1C;;gBACJ;;YAEA,sBAAsB;QAC1B;sCAAG;QAAC;KAA0B;IAE9B,uEAAuE;IACvE,MAAM,2BAA2B,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;YACpD,GAAG,MAAM;YACT,OAAO,OAAO,KAAK,CAAC,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;QACvD,CAAC;IAED,iEAAiE;IACjE,MAAM,kBAAkB,yBAAyB,MAAM,CAAC,CAAA,SAAU,OAAO,KAAK,CAAC,MAAM,GAAG;IAExF,8DAA8D;IAC9D,MAAM,sBAAsB,gBAAgB,GAAG,CAAC,CAAA;QAC5C,8CAA8C;QAC9C,MAAM,aAAa,OAAO,KAAK,CAAC,MAAM;QAEtC,uCAAuC;QACvC,IAAI,eAAe,GAAG;YAClB,OAAO;gBAAE,GAAG,MAAM;gBAAE,UAAU;YAAE;QACpC;QAEA,uCAAuC;QACvC,MAAM,sBAAsB,OAAO,KAAK,CAAC,MAAM,CAAC,CAAA,OAC5C,cAAc,CAAC,KAAK,EAAE,CAAC,KAAK,MAC9B,MAAM;QAER,gCAAgC;QAChC,MAAM,WAAW,KAAK,KAAK,CAAC,AAAC,sBAAsB,aAAc;QAEjE,OAAO;YAAE,GAAG,MAAM;YAAE;QAAS;IACjC;IAEA,MAAM,eAAe,CAAC;QAClB,mBAAmB,CAAA,OAAQ,CAAC;gBACxB,GAAG,IAAI;gBACP,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS;YAC/B,CAAC;IACL;IAEA,oCAAoC;IACpC,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;uCAAE;YACN,0BAA0B;YAC1B,MAAM;8DAAiB,CAAC;oBACpB,8BAA8B;oBAC9B,IAAI,cAAc;wBACd,MAAM,cAAc;wBACpB;oBACJ;gBACJ;;YAEA,yCAAyC;YACzC,IAAI,gBAAgB,CAAC,wBAAwB,OAAO,EAAE;gBAClD,OAAO,OAAO,CAAC,SAAS,CAAC;oBAAE,QAAQ;gBAAK,GAAG;gBAC3C,wBAAwB,OAAO,GAAG;gBAClC,OAAO,gBAAgB,CAAC,YAAY;YACxC;YAEA,UAAU;YACV;+CAAO;oBACH,OAAO,mBAAmB,CAAC,YAAY;gBAC3C;;QACJ;sCAAG;QAAC;KAAa;IAEjB,+BAA+B;IAC/B,MAAM,cAAc;QAChB,gDAAgD;QAChD,IAAI,gBAAgB;YAChB,qBAAqB;gBAAE,QAAQ;YAAQ;YACvC,8BAA8B;YAC9B;QACJ;QAEA,uBAAuB;QACvB,gBAAgB;QAChB,cAAc;QACd,kBAAkB;QAClB,oBAAoB;QACpB,sBAAsB;QACtB,iBAAiB;QAEjB,iDAAiD;QACjD,wBAAwB,OAAO,GAAG;QAElC,8CAA8C;QAC9C,IAAI,eAAe;YACf;QACJ;IACJ;IAEA,6CAA6C;IAC7C,MAAM,0BAA0B;QAC5B,8BAA8B;QAE9B,wCAAwC;QACxC,OAAQ,kBAAkB,MAAM;YAC5B,KAAK;gBACD,gBAAgB;gBAChB,cAAc;gBACd,kBAAkB;gBAClB,oBAAoB;gBACpB,wBAAwB,OAAO,GAAG;gBAClC,IAAI,eAAe;oBACf;gBACJ;gBACA;YACJ,KAAK;gBACD;gBACA;YACJ,KAAK;gBACD;gBACA;YACJ,KAAK;oBACG;gBAAJ,KAAI,4BAAA,kBAAkB,MAAM,cAAxB,gDAAA,0BAA0B,UAAU,EAAE;oBACtC,wBAAwB,kBAAkB,MAAM,CAAC,UAAU;gBAC/D;gBACA;YACJ,KAAK;oBACG,4BAAsC;gBAA1C,IAAI,EAAA,6BAAA,kBAAkB,MAAM,cAAxB,iDAAA,2BAA0B,QAAQ,OAAI,6BAAA,kBAAkB,MAAM,cAAxB,iDAAA,2BAA0B,MAAM,GAAE;wBAIpE;oBAHJ,oBACI,kBAAkB,MAAM,CAAC,QAAQ,EACjC,kBAAkB,MAAM,CAAC,MAAM,GAC/B,6BAAA,kBAAkB,MAAM,cAAxB,iDAAA,2BAA0B,UAAU;gBAE5C;gBACA;YACJ;gBACI;QACR;IACJ;IAEA,gCAAgC;IAChC,MAAM,yBAAyB;QAC3B,8BAA8B;QAC9B,qBAAqB;YAAE,QAAQ;QAAG;IACtC;IAEA,6DAA6D;IAC7D,MAAM,mBAAmB,CAAC;QACtB,IAAI,kBAAkB,eAAe,kBAAkB;YACnD,qBAAqB;gBACjB,QAAQ;gBACR,QAAQ;oBAAE;gBAAW;YACzB;YACA,8BAA8B;YAC9B;QACJ;QAEA,wBAAwB;IAC5B;IAEA,+CAA+C;IAC/C,MAAM,0BAA0B,CAAC;QAC7B,oBAAoB;IACxB;IAEA,qDAAqD;IACrD,MAAM,eAAe,OAAO,UAAkB,QAAgB;QAC1D,sEAAsE;QACtE,IAAI,kBAAkB,CAAC,aAAa,kBAAkB,YAAW,uBAAA,iCAAA,WAAY,EAAE,KAAI,eAAe,gBAAgB,GAAG;YACjH,qBAAqB;gBACjB,QAAQ;gBACR,QAAQ;oBAAE;oBAAU;oBAAQ;gBAAW;YAC3C;YACA,8BAA8B;YAC9B;QACJ;QAEA,oBAAoB,UAAU,QAAQ;IAC1C;IAEA,0CAA0C;IAC1C,MAAM,sBAAsB,OAAO,UAAkB,QAAgB;QACjE,8CAA8C;QAC9C,iBAAiB;QACjB,aAAa;QACb,IAAI;YACA,+BAA+B;YAC/B,MAAM,SAAS,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YAClD,IAAI,CAAC,QAAQ;YAEb,MAAM,OAAO,OAAO,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YAC7C,IAAI,CAAC,MAAM;YAEX,8BAA8B;YAC9B,MAAM,WAAW,MAAM,MAAM,AAAC,GAA+C,kEAAT,WAAgB,OAAP;YAC7E,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,AAAC,yBAAwC,OAAhB,SAAS,MAAM;YAC5D;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,+CAA+C;YAC/C,IAAI;YACJ,IAAI,KAAK,IAAI,KAAK,YAAY;gBAC1B,cAAc;oBACV,GAAG,IAAI;oBACP,SAAS,KAAK,MAAM,IAAI,EAAE;gBAC9B;YACJ,OAAO,IAAI,KAAK,IAAI,KAAK,QAAQ;gBAC7B,sEAAsE;gBACtE,MAAM,qBAAqB,CAAC,KAAK,SAAS,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;oBACnD,8CAA8C;oBAC9C,OAAO;wBACH,IAAI,EAAE,EAAE,IAAI,AAAC,YAAyB,OAAd,KAAK,GAAG,IAAG,KAA2C,OAAxC,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG;wBAC3E,QAAQ,EAAE,MAAM,IAAI,EAAE;wBACtB,SAAS,EAAE,MAAM,IAAI,EAAE;wBACvB,QAAQ;4BACJ,WAAW,EAAE,UAAU;4BACvB,cAAc,EAAE,aAAa;4BAC7B,eAAe,EAAE,MAAM;4BACvB,cAAc,EAAE,IAAI;4BACpB,iBAAiB,EAAE,gBAAgB,IAAI,EAAE;4BACzC,OAAO,EAAE,KAAK;4BACd,eAAe;gCACX,IAAI,EAAE,YAAY;4BACtB;wBACJ;oBACJ;gBACJ;gBAEA,cAAc;oBACV,GAAG,IAAI;oBACP,WAAW;gBACf;gBAEA,sEAAsE;gBACtE,IAAI,YAAY;oBACZ,oBAAoB;gBACxB,OAAO,IAAI,mBAAmB,MAAM,GAAG,GAAG;oBACtC,oBAAoB,kBAAkB,CAAC,EAAE,CAAC,EAAE;gBAChD;YACJ,OAAO;gBACH,cAAc;YAClB;YAEA,cAAc;YACd,kBAAkB;YAClB,gBAAgB;QACpB,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,wBAAwB;YACtC,2DAA2D;YAC3D,MAAM,SAAS,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YAClD,IAAI,CAAC,QAAQ;YAEb,MAAM,OAAO,OAAO,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YAC7C,IAAI,MAAM;gBACN,cAAc;gBACd,kBAAkB;gBAClB,gBAAgB;gBAEhB,8CAA8C;gBAC9C,IAAI,AAAC,KAAK,IAAI,KAAK,UACf,KAAK,SAAS,IAAI,KAAK,SAAS,CAAC,MAAM,GAAG,GAAG;oBAC7C,oBAAoB,cAAc,KAAK,SAAS,CAAC,EAAE,CAAC,EAAE;gBAC1D;YACJ;QACJ,SAAU;YACN,aAAa;QACjB;IACJ;IAEA,wCAAwC;IACxC,MAAM,eAAe;QACjB,IAAI,CAAC,cAAc,CAAC,gBAAgB;QAEpC,gDAAgD;QAChD,IAAI,gBAAgB;YAChB,qBAAqB;gBAAE,QAAQ;YAAW;YAC1C,8BAA8B;YAC9B;QACJ;QAEA;IACJ;IAEA,2CAA2C;IAC3C,MAAM,sBAAsB;QACxB,IAAI,CAAC,cAAc,CAAC,gBAAgB;QAEpC,qFAAqF;QACrF,IAAI,AAAC,WAAW,IAAI,KAAK,UACrB,WAAW,SAAS,IACpB,WAAW,SAAS,CAAC,MAAM,GAAG,KAC9B,kBAAkB;YAElB,MAAM,eAAe,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;YACzE,IAAI,eAAe,WAAW,SAAS,CAAC,MAAM,GAAG,GAAG;gBAChD,sBAAsB;gBACtB,MAAM,eAAe,WAAW,SAAS,CAAC,eAAe,EAAE;gBAC3D,wBAAwB,aAAa,EAAE;gBACvC;YACJ;QACJ;QAEA,uCAAuC;QACvC,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACzD,IAAI,CAAC,eAAe;QAEpB,mDAAmD;QACnD,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;QACxF,IAAI,qBAAqB,CAAC,GAAG;QAE7B,8CAA8C;QAC9C,IAAI,mBAAmB,cAAc,KAAK,CAAC,MAAM,GAAG,GAAG;YACnD,+CAA+C;YAC/C,MAAM,WAAW,cAAc,KAAK,CAAC,mBAAmB,EAAE;YAC1D,oBAAoB,gBAAgB,SAAS,EAAE;QACnD;IACJ;IAEA,4CAA4C;IAC5C,MAAM,mBAAmB;QACrB,IAAI,CAAC,cAAc,CAAC,gBAAgB;QAEpC,gDAAgD;QAChD,IAAI,gBAAgB;YAChB,qBAAqB;gBAAE,QAAQ;YAAW;YAC1C,8BAA8B;YAC9B;QACJ;QAEA;IACJ;IAEA,+CAA+C;IAC/C,MAAM,0BAA0B;QAC5B,IAAI,CAAC,cAAc,CAAC,gBAAgB;QAEpC,0FAA0F;QAC1F,IAAI,AAAC,WAAW,IAAI,KAAK,UACrB,WAAW,SAAS,IACpB,WAAW,SAAS,CAAC,MAAM,GAAG,KAC9B,kBAAkB;YAElB,MAAM,eAAe,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;YACzE,IAAI,eAAe,GAAG;gBAClB,0BAA0B;gBAC1B,MAAM,eAAe,WAAW,SAAS,CAAC,eAAe,EAAE;gBAC3D,wBAAwB,aAAa,EAAE;gBACvC;YACJ;QACJ;QAEA,2CAA2C;QAC3C,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACzD,IAAI,CAAC,eAAe;QAEpB,mDAAmD;QACnD,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;QACxF,IAAI,qBAAqB,CAAC,GAAG;QAE7B,kDAAkD;QAClD,IAAI,mBAAmB,GAAG;YACtB,mDAAmD;YACnD,MAAM,eAAe,cAAc,KAAK,CAAC,mBAAmB,EAAE;YAC9D,oBAAoB,gBAAgB,aAAa,EAAE;QACvD;IACJ;IAEA,uDAAuD;IACvD,MAAM,wBAAwB,CAAC,UAAkB;QAC7C,MAAM,SAAS,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QAClD,IAAI,CAAC,QAAQ,OAAO;QAEpB,qDAAqD;QACrD,MAAM,oBAAoB,OAAO,KAAK,CAAC,KAAK,CAAC,CAAA,OAAQ,iBAAiB,CAAC,KAAK,EAAE,CAAC,KAAK;QAEpF,wFAAwF;QACxF,OAAO,qBAAqB,OAAO,KAAK,CAAC,MAAM,GAAG;IACtD;IAEA,4CAA4C;IAC5C,MAAM,yBAAyB,CAAA,GAAA,4QAAA,CAAA,cAAW,AAAD;iEAAE,CAAC,YAAoB;YAC5D,iCAAiC;YACjC;yEAAsB,CAAA,OAAQ,CAAC;wBAC3B,GAAG,IAAI;wBACP,CAAC,WAAW,EAAE;oBAClB,CAAC;;YAED,+DAA+D;YAC/D,IAAI,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,QAAQ;gBAC7B,MAAM,eAAe,WAAW,SAAS,IAAI,EAAE;gBAE/C,gFAAgF;gBAChF;6EAA6B,CAAA;wBACzB,MAAM,qBAAqB;4BAAE,GAAG,IAAI;wBAAC;wBAErC,0DAA0D;wBAC1D,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC,EAAE;4BACpC,kBAAkB,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC;wBACzC;wBAEA,iCAAiC;wBACjC,kBAAkB,CAAC,WAAW,EAAE,CAAC,GAAG;4BAChC,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;4BACpC,CAAC,WAAW,EAAE;wBAClB;wBAEA,OAAO;oBACX;;gBAEA,oDAAoD;gBACpD,IAAI,oBAAoB;oBACpB,mBAAmB,WAAW,EAAE,EAAE,YAAY;gBAClD;gBAEA,sEAAsE;gBACtE,IAAI,aAAa,MAAM,IAAI,GAAG;oBAC1B,MAAM,oBAAoB;wBACtB,GAAG,cAAc;wBACjB,CAAC,WAAW,EAAE,CAAC,EAAE;oBACrB;oBAEA,kBAAkB;oBAElB,gDAAgD;oBAChD,IAAI,gBAAgB;wBAChB,eAAe,WAAW,EAAE,EAAE;oBAClC;oBAEA,gEAAgE;oBAChE,IAAI,kBAAkB,sBAAsB,gBAAgB,oBAAoB;wBAC5E,+DAA+D;wBAC/D;oBACJ,OAAO;wBACH,2CAA2C;wBAC3C,gBAAgB,OAAO,uDAAuD;oBAClF;gBACJ,OAAO;oBACH,oEAAoE;oBACpE,MAAM,2BAA2B,aAAa,KAAK;0GAC/C,CAAC,IAAW,kBAAkB,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,KAAK;;oBAGrD,IAAI,0BAA0B;wBAC1B,MAAM,oBAAoB;4BACtB,GAAG,cAAc;4BACjB,CAAC,WAAW,EAAE,CAAC,EAAE;wBACrB;wBAEA,kBAAkB;wBAElB,gDAAgD;wBAChD,IAAI,gBAAgB;4BAChB,eAAe,WAAW,EAAE,EAAE;wBAClC;wBAEA,gEAAgE;wBAChE,IAAI,kBAAkB,sBAAsB,gBAAgB,oBAAoB;4BAC5E,+DAA+D;4BAC/D;wBACJ,OAAO;4BACH,2CAA2C;4BAC3C,gBAAgB,OAAO,8CAA8C;wBACzE;oBACJ,OAAO;wBACH,4DAA4D;wBAC5D,gBAAgB,QAAQ,mDAAmD;oBAC/E;gBACJ;YACJ;QACJ;gEAAG;QAAC;QAAY;QAAgB;QAAgB;QAAoB;QAAgB;KAAmB;IAEvG,qCAAqC;IACrC,MAAM,mBAAmB;QACrB,IAAI,YAAY,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ;QAE3D,4CAA4C;QAC5C,qBAAqB;QAErB,IAAI;YACA,sDAAsD;YACtD,iEAAiE;YACjE,sDAAsD;YACtD,IAAI;gBACA,MAAM,WAAW,MAAM,MAAM,AAAC,GAA+C,kEAAT,WAAuB,OAAd,WAAW,EAAE,EAAC,cAAY;oBACnG,QAAQ;oBACR,SAAS;wBACL,gBAAgB;oBACpB;oBACA,MAAM,KAAK,SAAS,CAAC;wBAAE,SAAS,SAAS;oBAAQ;gBACrD;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBACd,MAAM,IAAI,MAAM;gBACpB;YACJ,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC,+CAA+C;YAC7D,oEAAoE;YACxE;YAEA,uCAAuC;YACvC,MAAM,oBAAoB;gBACtB,GAAG,cAAc;gBACjB,CAAC,WAAW,EAAE,CAAC,EAAE;YACrB;YAEA,gDAAgD;YAChD,kBAAkB;YAElB,8DAA8D;YAC9D,IAAI,gBAAgB;gBAChB,eAAe,WAAW,EAAE,EAAE;YAClC;YAEA,gEAAgE;YAChE,IAAI,sBAAsB,gBAAgB,oBAAoB;gBAC1D,+DAA+D;gBAC/D;YACJ,OAAO;gBACH,iCAAiC;gBACjC,gBAAgB;YACpB;YAEA,0BAA0B;YAC1B,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YACzD,IAAI,CAAC,eAAe;YAEpB,mDAAmD;YACnD,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;YACxF,IAAI,qBAAqB,CAAC,GAAG;YAE7B,8CAA8C;YAC9C,IAAI,mBAAmB,cAAc,KAAK,CAAC,MAAM,GAAG,GAAG;gBACnD,+CAA+C;gBAC/C,MAAM,WAAW,cAAc,KAAK,CAAC,mBAAmB,EAAE;gBAC1D,aAAa,gBAAgB,SAAS,EAAE;YAC5C;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,mCAAmC;QACrD,SAAU;YACN,sBAAsB;YACtB,qBAAqB;QACzB;IACJ;IAEA,6DAA6D;IAC7D,MAAM,cAAc;QAChB,IAAI,CAAC,cAAc,CAAC,gBAAgB,OAAO;QAE3C,yEAAyE;QACzE,IAAI,AAAC,WAAW,IAAI,KAAK,UACrB,WAAW,SAAS,IACpB,WAAW,SAAS,CAAC,MAAM,GAAG,KAC9B,kBAAkB;YAElB,MAAM,eAAe,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;YACzE,IAAI,eAAe,GAAG;gBAClB,0CAA0C;gBAC1C,OAAO;YACX;QACJ;QAEA,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACzD,IAAI,CAAC,eAAe,OAAO;QAE3B,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;QACxF,OAAO,qBAAqB;IAChC;IAEA,4DAA4D;IAC5D,MAAM,aAAa;QACf,IAAI,CAAC,cAAc,CAAC,gBAAgB,OAAO;QAE3C,wEAAwE;QACxE,IAAI,AAAC,WAAW,IAAI,KAAK,UACrB,WAAW,SAAS,IACpB,WAAW,SAAS,CAAC,MAAM,GAAG,KAC9B,kBAAkB;YAElB,MAAM,eAAe,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;YACzE,IAAI,eAAe,WAAW,SAAS,CAAC,MAAM,GAAG,GAAG;gBAChD,yCAAyC;gBACzC,OAAO;YACX;QACJ;QAEA,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACzD,IAAI,CAAC,eAAe,OAAO;QAE3B,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;QACxF,OAAO,qBAAqB,cAAc,KAAK,CAAC,MAAM,GAAG;IAC7D;IAEA,oCAAoC;IACpC,MAAM,gBAAgB,CAAC;QACnB,IAAI,EAAE,GAAG,KAAK,UAAU;YACpB;QACJ;IACJ;IAEA,0CAA0C;IAC1C,MAAM,4BAA4B,CAAC;QAC/B,6EAA6E;QAC7E,IAAI,iBAAiB,OAAO,IAAI,CAAC,iBAAiB,OAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAW;YAClF;QACJ;IACJ;IAEA,qCAAqC;IACrC,MAAM,sBAAsB;QACxB,IAAI,CAAC,cAAc,CAAC,gBAAgB,OAAO;QAE3C,6FAA6F;QAC7F,IAAI,AAAC,WAAW,IAAI,KAAK,UACrB,WAAW,SAAS,IACpB,WAAW,SAAS,CAAC,MAAM,GAAG,KAC9B,kBAAkB;YAElB,MAAM,eAAe,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;YACzE,IAAI,eAAe,GAAG;gBAClB,gCAAgC;gBAChC,OAAO;oBACH,MAAM;oBACN,OAAO,AAAC,YAAwB,OAAb;gBACvB;YACJ;QACJ;QAEA,8BAA8B;QAC9B,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACzD,IAAI,CAAC,eAAe,OAAO;QAE3B,mDAAmD;QACnD,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;QACxF,IAAI,oBAAoB,GAAG,OAAO;QAElC,4BAA4B;QAC5B,MAAM,eAAe,cAAc,KAAK,CAAC,mBAAmB,EAAE;QAC9D,OAAO;YACH,MAAM;YACN,OAAO,aAAa,KAAK;QAC7B;IACJ;IAEA,iCAAiC;IACjC,MAAM,kBAAkB;QACpB,IAAI,CAAC,cAAc,CAAC,gBAAgB,OAAO;QAE3C,wFAAwF;QACxF,IAAI,AAAC,WAAW,IAAI,KAAK,UACrB,WAAW,SAAS,IACpB,WAAW,SAAS,CAAC,MAAM,GAAG,KAC9B,kBAAkB;YAElB,MAAM,eAAe,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;YACzE,IAAI,eAAe,WAAW,SAAS,CAAC,MAAM,GAAG,GAAG;gBAChD,4BAA4B;gBAC5B,OAAO;oBACH,MAAM;oBACN,OAAO,AAAC,YAA4B,OAAjB,eAAe;gBACtC;YACJ;QACJ;QAEA,0BAA0B;QAC1B,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;QACzD,IAAI,CAAC,eAAe,OAAO;QAE3B,mDAAmD;QACnD,MAAM,mBAAmB,cAAc,KAAK,CAAC,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW,EAAE;QACxF,IAAI,qBAAqB,CAAC,KAAK,oBAAoB,cAAc,KAAK,CAAC,MAAM,GAAG,GAAG,OAAO;QAE1F,wBAAwB;QACxB,MAAM,WAAW,cAAc,KAAK,CAAC,mBAAmB,EAAE;QAC1D,OAAO;YACH,MAAM;YACN,OAAO,SAAS,KAAK;QACzB;IACJ;IAEA,mDAAmD;IACnD,MAAM,2BAA2B,CAAA,GAAA,4QAAA,CAAA,cAAW,AAAD;mEAAE,CAAC;YAC1C,kBAAkB;QACtB;kEAAG,EAAE;IAEL,yCAAyC;IACzC,MAAM,kBAAkB;YAAC,oFAAmB;QACxC,4EAA4E;QAC5E,CAAA,GAAA,mOAAA,CAAA,UAAQ,AAAD,EAAE;YACL,eAAe,mBAAmB,MAAM;YACxC,QAAQ,mBAAmB,KAAK;YAChC,QAAQ;gBAAE,GAAG;YAAI;YACjB,QAAQ;gBAAC;gBAAW;gBAAW;gBAAW;gBAAW;gBAAW;gBAAW;aAAU;YACrF,QAAQ;QACZ;QAEA,qBAAqB;QACrB,oBAAoB;QAEpB,0CAA0C;QAC1C,WAAW;YACP,oBAAoB;QACxB,GAAG;IACP;IAEA,oFAAoF;IACpF,MAAM,qCAAqC;QACvC,8DAA8D;QAC9D,MAAM,uBAAuB,IAAM,CAAC;gBAChC,GAAG,MAAM,KAAK,MAAM,KAAK;gBACzB,GAAG,MAAM,KAAK,MAAM,KAAK,IAAK,qCAAqC;YACvE,CAAC;QAED,+CAA+C;QAC/C,CAAA,GAAA,mOAAA,CAAA,UAAQ,AAAD,EAAE;YACL,eAAe;YACf,QAAQ;YACR,QAAQ;gBAAE,GAAG;YAAI;YACjB,QAAQ;gBAAC;gBAAW;gBAAW;gBAAW;gBAAW;gBAAW;gBAAW;aAAU;YACrF,QAAQ;YACR,QAAQ,IAAI,mBAAmB;QACnC;QAEA,+CAA+C;QAC/C,WAAW;YACP,CAAA,GAAA,mOAAA,CAAA,UAAQ,AAAD,EAAE;gBACL,eAAe;gBACf,OAAO;gBACP,QAAQ;gBACR,QAAQ;oBAAE,GAAG;oBAAG,GAAG;gBAAI;gBACvB,QAAQ;oBAAC;oBAAW;oBAAW;oBAAW;oBAAW;oBAAW;oBAAW;iBAAU;gBACrF,QAAQ;gBACR,SAAS;gBACT,OAAO;YACX;QACJ,GAAG;QAEH,+CAA+C;QAC/C,WAAW;YACP,CAAA,GAAA,mOAAA,CAAA,UAAQ,AAAD,EAAE;gBACL,eAAe;gBACf,OAAO;gBACP,QAAQ;gBACR,QAAQ;oBAAE,GAAG;oBAAG,GAAG;gBAAI;gBACvB,QAAQ;oBAAC;oBAAW;oBAAW;oBAAW;oBAAW;oBAAW;oBAAW;iBAAU;gBACrF,QAAQ;gBACR,SAAS;gBACT,OAAO,CAAC;YACZ;QACJ,GAAG;QAEH,4CAA4C;QAC5C,IAAI,aAAa;QACjB,MAAM,YAAY;QAClB,MAAM,gBAAgB,YAAY;YAC9B,IAAI,cAAc,WAAW;gBACzB,cAAc;gBACd;YACJ;YAEA,CAAA,GAAA,mOAAA,CAAA,UAAQ,AAAD,EAAE;gBACL,eAAe;gBACf,QAAQ;gBACR,QAAQ;gBACR,QAAQ;oBAAC;oBAAW;oBAAW;oBAAW;oBAAW;oBAAW;oBAAW;iBAAU;gBACrF,QAAQ;YACZ;YAEA;QACJ,GAAG;QAEH,mDAAmD;QACnD,6BAA6B;QAE7B,+CAA+C;QAC/C,WAAW;YACP,6BAA6B;QACjC,GAAG,OAAO,sCAAsC;IACpD;IAEA,qEAAqE;IACrE,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;uCAAE;YACN,IAAI,WAAW,QAAQ,MAAM,GAAG,GAAG;gBAC/B,MAAM,uBAAgD,CAAC;gBACvD,QAAQ,OAAO;mDAAC,CAAA;wBACZ,IAAI,OAAO,UAAU,IAAI,CAAC,OAAO,QAAQ,EAAE;4BACvC,oBAAoB,CAAC,OAAO,EAAE,CAAC,GAAG;wBACtC;oBACJ;;gBAEA,gFAAgF;gBAChF,IAAI,OAAO,IAAI,CAAC,sBAAsB,MAAM,GAAG,GAAG;oBAC9C,mBAAmB;gBACvB;YACJ;QACJ;sCAAG;QAAC;KAAQ;IAEZ,uCAAuC;IACvC,MAAM,gBAAgB;QAClB,iBAAiB,CAAA,OAAQ,CAAC;IAC9B;IAEA,qBACI,4SAAC;QAAI,WAAU;;YACV,gBAAgB,MAAM,GAAG,kBACtB,4SAAC,yIAAA,CAAA,UAAgB;gBACb,SAAS;gBACT,MAAK;gBACL,iBAAiB;gBACjB,gBAAgB;gBAChB,YAAY;gBACZ,kBAAkB;gBAClB,sBAAsB;;;;;qCAG1B,4SAAC;gBAAI,WAAU;0BACX,cAAA,4SAAC;;sCACG,4SAAC;4BAAG,WAAU;sCAAsC;;;;;;sCAGpD,4SAAC;4BAAE,WAAU;sCAAqB;;;;;;;;;;;;;;;;;0BAQ9C,4SAAC,qIAAA,CAAA,UAAY;gBAAC,MAAM;;;;;;0BAGpB,4SAAC,8IAAA,CAAA,UAAqB;gBAAC,MAAM;;;;;;0BAG7B,4SAAC,2IAAA,CAAA,UAAkB;gBACf,MAAM;gBACN,OAAM;gBACN,SAAQ;gBACR,mBAAkB;gBAClB,kBAAiB;gBACjB,WAAW;gBACX,UAAU;gBACV,MAAK;;;;;;YAIR,gBAAgB,4BACb,4SAAC;gBACG,WAAU;gBACV,SAAS;0BAET,cAAA,4SAAC;oBACG,KAAK;oBACL,WAAU;oBACV,SAAS,CAAC,IAAM,EAAE,eAAe;;wBAGhC,+BACG,4SAAC;4BACG,WAAU;4BACV,SAAS;4BACT,OAAO;gCAAE,iBAAiB;4BAAqB;4BAC/C,cAAW;;;;;;sCAKnB,4SAAC;4BAAI,WAAW,AAAC,GAAgD,OAA9C,gBAAgB,qBAAqB,UAAS;;8CAE7D,4SAAC;oCAAI,WAAU;;sDACX,4SAAC;4CAAG,WAAU;sDACT,EAAA,wBAAA,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,6BAAnC,4CAAA,sBAAoD,KAAK,KAAI;;;;;;sDAGlE,4SAAC;4CACG,SAAS;4CACT,WAAW,AAAC,qCAGP,OAH2C,cAAc,CAAC,uBAAA,iCAAA,WAAY,EAAE,CAAC,GACxE,eACA;4CAEN,cAAW;sDAEX,cAAA,4SAAC,2SAAA,CAAA,cAAW;gDAAC,MAAM;;;;;;;;;;;;;;;;;8CAK3B,4SAAC;oCAAI,WAAU;8CACV,oBAAkB,yBAAA,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,6BAAnC,6CAAA,uBAAoD,KAAK,CAAC,GAAG,CAAC,CAAC,qBAC9E,4SAAC;;8DACG,4SAAC;oDACG,WAAW,AAAC,8CAeP,OAfoD,KAAK,EAAE,KAAK,WAAW,EAAE,IAC9E,CACI,AAAC,KAAK,IAAI,KAAK,UACf,EAAC,uBAAA,iCAAA,WAAY,SAAS,KACtB,WAAW,SAAS,CAAC,MAAM,IAAI,CACnC,IACE,6CACA,cAAc,CAAC,KAAK,EAAE,CAAC,GACnB,+CACA,AAAC,KAAK,IAAI,KAAK,UACb,2DAA2D;oDAC3D,yBAAyB,CAAC,KAAK,EAAE,CAAC,IAClC,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,MAAO,yBAAyB,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,KAAK,QACtG,iCACA;oDAEd,SAAS,IAAM,aAAa,gBAAgB,KAAK,EAAE;;sEAEnD,4SAAC;4DAAI,WAAY;;gEACZ,cAAc,CAAC,KAAK,EAAE,CAAC,iBACpB,4SAAC;oEAAI,WAAU;8EACX,cAAA,4SAAC,kTAAA,CAAA,cAAW;wEAAC,MAAM;wEAAI,WAAU;;;;;;;;;;2EAErC,KAAK,IAAI,KAAK,2BACd,4SAAC;oEAAI,WAAU;8EACX,cAAA,4SAAC,qSAAA,CAAA,WAAQ;wEAAC,MAAM;wEAAI,WAAU;;;;;;;;;;yFAGlC,4SAAC;oEAAI,WAAY;8EACb,cAAA,4SAAC,+SAAA,CAAA,gBAAa;wEAAC,MAAM;wEAAI,WACrB,yBAAyB,CAAC,KAAK,EAAE,CAAC,IAC9B,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,MAAO,yBAAyB,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,KAAK,QACtG,oBACA;;;;;;;;;;;gEAMjB,KAAK,YAAY,kBACd,4SAAC;oEAAI,WAAU;8EACX,cAAA,4SAAC,wSAAA,CAAA,UAAO;wEAAC,MAAM;wEAAI,WAAU;;;;;;;;;;;;;;;;;sEAIzC,4SAAC;4DAAI,WAAW,AAAC,kBAQZ,OAR6B,cAAc,CAAC,KAAK,EAAE,CAAC,GACnD,mBACA,AAAC,KAAK,IAAI,KAAK,UACb,8CAA8C;4DAC9C,yBAAyB,CAAC,KAAK,EAAE,CAAC,IAClC,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,MAAO,yBAAyB,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,KAAK,QACtG,oBACA,iBACL;sEACA,KAAK,KAAK;;;;;;;;;;;;gDAKjB,KAAK,IAAI,KAAK,UACZ,KAAK,EAAE,MAAK,uBAAA,iCAAA,WAAY,EAAE,MAC1B,uBAAA,iCAAA,WAAY,SAAS,KACrB,WAAW,SAAS,CAAC,MAAM,GAAG,mBAC1B,4SAAC;oDAAI,WAAU;8DACV,WAAW,SAAS,CAAC,GAAG,CAAC,CAAC,UAAe,sBACtC,4SAAC;4DAEG,WAAW,AAAC,8CAKP,OALoD,SAAS,EAAE,KAAK,mBACnE,6CACA,kBAAkB,CAAC,SAAS,EAAE,CAAC,GAC3B,+CACA;4DAEV,SAAS,IAAM,iBAAiB,SAAS,EAAE;;8EAE3C,4SAAC;oEAAI,WAAW,AAAC,0BAA8F,OAArE,kBAAkB,CAAC,SAAS,EAAE,CAAC,GAAG,mBAAmB;8EAC1F,kBAAkB,CAAC,SAAS,EAAE,CAAC,kBACzB,4SAAC,kTAAA,CAAA,cAAW;wEAAC,MAAM;;;;;;;;;;;8EAG9B,4SAAC;oEAAI,WAAW,AAAC,kBAAsF,OAArE,kBAAkB,CAAC,SAAS,EAAE,CAAC,GAAG,mBAAmB,iBAAgB;8EAClG,SAAS,MAAM,CAAC,KAAK;;;;;;;2DAfrB,SAAS,EAAE;;;;;;;;;;;2CApE9B,KAAK,EAAE;;;;;;;;;;8CA8FzB,4SAAC;oCAAI,WAAU;8CACX,cAAA,4SAAC;wCACG,SAAS;wCACT,WAAU;kDACb;;;;;;;;;;;;;;;;;sCAOT,4SAAC;4BAAI,WAAU;;8CAEX,4SAAC;oCACG,WAAW,AAAC,iEAKP,OAJD,qDAAqD;oCACpD,cAAc,CAAC,uBAAA,iCAAA,WAAY,EAAE,CAAC,GACzB,iCACA;;sDAGV,4SAAC;4CAAI,WAAU;;8DAEX,4SAAC;oDACG,SAAS;oDACT,WAAW,AAAC,qCAGP,OAH2C,cAAc,CAAC,uBAAA,iCAAA,WAAY,EAAE,CAAC,GACxE,eACA;oDAEN,cAAW;8DAEX,cAAA,4SAAC,yRAAA,CAAA,OAAI;wDAAC,MAAM;;;;;;;;;;;8DAEhB,4SAAC;oDAAI,WAAU;8DACX,cAAA,4SAAC;wDAAI,WAAU;kEACX,cAAA,4SAAC;4DACG,KAAK;4DACL,iBAAiB;4DACjB,8BAA8B;4DAC9B,WAAW;4DACX,WAAU;sEAET,uBAAA,iCAAA,WAAY,KAAK;;;;;;;;;;;;;;;;;;;;;;sDAKlC,4SAAC;4CAAI,WAAU;;gDAEV,cAAc,CAAC,WAAW,EAAE,CAAC,kBAC1B,4SAAC;oDACG,WAAU;oDACV,QAAQ;;sEAER,4SAAC,kTAAA,CAAA,cAAW;4DAAC,MAAM;4DAAI,WAAU;;;;;;wDAAS;;;;;;;gDAMjD,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,cAAc,CAAC,cAAc,CAAC,uBAAA,iCAAA,WAAY,EAAE,CAAC,IAAI,CAAC,0BACpE,4SAAC;oDACG,SAAS;oDACT,WAAW,AAAC,qMAA2Q,OAAvE,oBAAoB,kCAAkC;oDACtQ,cAAW;oDACX,UAAU;8DAET,kCACG;kEACI,cAAA,4SAAC;4DAAI,WAAU;;;;;;sFAGnB;;0EACI,4SAAC,kTAAA,CAAA,cAAW;gEAAC,MAAM;gEAAI,WAAU;;;;;;4DAAS;;;;;;;;8DAM1D,4SAAC;oDACG,SAAS;oDACT,WAAW,AAAC,qEAGP,OAH2E,cAAc,CAAC,uBAAA,iCAAA,WAAY,EAAE,CAAC,GACxG,eACA;8DAGN,cAAA,4SAAC,mRAAA,CAAA,IAAC;wDAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;8CAMrB,4SAAC;oCACG,WAAU;oCACV,OAAO;wCAAE,QAAQ;oCAAsB;8CAEtC,0BACG,4SAAC;wCAAI,WAAU;kDACX,cAAA,4SAAC;4CAAI,WAAU;;;;;;;;;;6DAGnB;;4CACK,CAAA,uBAAA,iCAAA,WAAY,IAAI,MAAK,4BAClB,4SAAC;gDACG,QAAQ,WAAW,EAAE;gDACrB,QAAQ;gDACR,UAAU;gDACV,YAAY;gDACZ,gBAAgB,CAAC,cAAc,CAAC,uBAAA,iCAAA,WAAY,EAAE,CAAC,IAAI,CAAC,WAAW,mBAAmB;gDAClF,UAAU;;;;;;4CAGjB,CAAC,uBAAA,iCAAA,WAAY,IAAI,MAAK,wBACnB;0DACI,cAAA,4SAAC;oDACG,WAAW,WAAW,SAAS,IAAI,EAAE;oDACrC,UAAU;oDACV,UAAU;oDACV,mBAAmB,oBAAoB;oDACvC,kBAAkB;oDAClB,gBAAgB;oDAChB,QAAQ;oDACR,YAAY;oDACZ,QAAQ,WAAW,EAAE;oDACrB,sBAAsB;oDACtB,YAAY;oDACZ,sBAAsB;oDACtB,WAAW,AAAC,GAAyC,OAAvC,gBAAgB,oBAAoB;oDAClD,aAAa;;;;;;;;;;;;;;8CASrC,4SAAC;oCAAI,WAAU;;wCACV,CAAC,iBAAiB,uCACf,4SAAC;4CACG,SAAS;4CACT,WAAU;;8DAEV,4SAAC,2SAAA,CAAA,cAAW;oDAAC,MAAM;oDAAI,WAAU;;;;;;iDAChC,uBAAA,mCAAA,2CAAA,qBAAuB,KAAK;;;;;;;wCAGpC,+BAAiB,4SAAC;;;;;wCAElB,CAAC,gBAAgB,mCACd,4SAAC;4CACG,SAAS;4CACT,WAAU;;iDAET,mBAAA,+BAAA,uCAAA,iBAAmB,KAAK;8DACzB,4SAAC,6SAAA,CAAA,eAAY;oDAAC,MAAM;oDAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAU7D,gBAAgB,4BACb,4SAAC;gBAAI,WAAU;;oBACV,CAAC,iBAAiB,sCACf,4SAAC;wBACG,SAAS;wBACT,WAAU;wBACV,cAAW;;0CAEX,4SAAC,2SAAA,CAAA,cAAW;gCAAC,MAAM;gCAAI,WAAU;;;;;;0CACjC,4SAAC;gCAAK,WAAU;2CAA0B,wBAAA,mCAAA,4CAAA,sBAAuB,KAAK;;;;;;;;;;;6CAG1E,4SAAC;;;;;oBAGJ,CAAC,gBAAgB,kCACd,4SAAC;wBACG,SAAS;wBACT,WAAU;wBACV,cAAW;;0CAEX,4SAAC;gCAAK,WAAU;2CAA0B,oBAAA,+BAAA,wCAAA,kBAAmB,KAAK;;;;;;0CAClE,4SAAC,6SAAA,CAAA,eAAY;gCAAC,MAAM;gCAAI,WAAU;;;;;;;;;;;6CAGtC,4SAAC;;;;;;;;;;;0BAMb,4SAAC,2IAAA,CAAA,UAAkB;gBAEf,MAAM;gBACN,OAAM;gBACN,SAAQ;gBACR,mBAAkB;gBAClB,kBAAiB;gBACjB,WAAW;gBACX,UAAU;gBACV,MAAK;eARD;;;;;;;;;;;AAYpB;GA3vCwB;;QAaH,qHAAA,CAAA,UAAO;;;MAbJ","debugId":null}},
    {"offset": {"line": 6357, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/LearningStreak.tsx"],"sourcesContent":["import React, { useMemo } from \"react\";\r\n\r\ninterface LearningStreakProps {\r\n    streakDays: number;\r\n    activeDays: string[]; // Days that are active in the streak (e.g., ['M', 'T', 'S_0', 'S_6'])\r\n}\r\n\r\nexport default function LearningStreak({ streakDays, activeDays }: LearningStreakProps) {\r\n    // Get current day in IST\r\n    const getCurrentDayInIST = useMemo(() => {\r\n        // Create a date in IST (UTC+5:30)\r\n        const now = new Date();\r\n        const istOffset = 5.5 * 60 * 60 * 1000; // 5.5 hours in milliseconds\r\n        const istDate = new Date(now.getTime() + istOffset + now.getTimezoneOffset() * 60 * 1000);\r\n        return istDate.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\r\n    }, []);\r\n\r\n    // All days of week for reference\r\n    const allDaysOfWeek = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\r\n    const allDayIdentifiers = [\"S_0\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S_6\"];\r\n\r\n    // Reorder days to put current day in the middle (4th position)\r\n    const { daysOfWeek, dayToIdentifierMap } = useMemo(() => {\r\n        const currentDayIndex = getCurrentDayInIST;\r\n\r\n        // Calculate days before and after to create a balanced view with current day in center\r\n        let reorderedDays = [];\r\n        let reorderedIdentifiers = [];\r\n\r\n        // Add 3 days before the current day\r\n        for (let i = 3; i > 0; i--) {\r\n            const index = (currentDayIndex - i + 7) % 7;\r\n            reorderedDays.push(allDaysOfWeek[index]);\r\n            reorderedIdentifiers.push(allDayIdentifiers[index]);\r\n        }\r\n\r\n        // Add current day\r\n        reorderedDays.push(allDaysOfWeek[currentDayIndex]);\r\n        reorderedIdentifiers.push(allDayIdentifiers[currentDayIndex]);\r\n\r\n        // Add 3 days after the current day\r\n        for (let i = 1; i <= 3; i++) {\r\n            const index = (currentDayIndex + i) % 7;\r\n            reorderedDays.push(allDaysOfWeek[index]);\r\n            reorderedIdentifiers.push(allDayIdentifiers[index]);\r\n        }\r\n\r\n        return {\r\n            daysOfWeek: reorderedDays,\r\n            dayToIdentifierMap: reorderedIdentifiers\r\n        };\r\n    }, [getCurrentDayInIST]);\r\n\r\n    // List of energizing emojis\r\n    const energizing_emojis = [\r\n        \"🚀\", \"💪\", \"🔥\", \"⚡\", \"🌟\", \"🏆\", \"💯\", \"🎉\", \"👏\", \"🌈\", \"💥\", \"🎯\", \"🏅\", \"✨\"\r\n    ];\r\n\r\n    // Generate a random emoji from the list if streak is at least 1 day\r\n    const randomEmoji = useMemo(() => {\r\n        if (streakDays >= 1) {\r\n            const randomIndex = Math.floor(Math.random() * energizing_emojis.length);\r\n            return energizing_emojis[randomIndex];\r\n        }\r\n        return null;\r\n    }, [streakDays]);\r\n\r\n    // Function to check if a day is active based on index\r\n    const isDayActive = (index: number): boolean => {\r\n        // If the day is in the future (after the current day at index 3), it should never be active\r\n        if (index > 3) {\r\n            return false;\r\n        }\r\n\r\n        // Get the identifier for this position\r\n        const identifier = dayToIdentifierMap[index];\r\n        return activeDays.includes(identifier);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-[#121212] rounded-lg border border-gray-800 overflow-hidden\">\r\n            <div className=\"bg-[#2A2000] px-4 py-3 border-b border-gray-800\">\r\n                <h3 className=\"text-lg font-light text-white\">Learning Streak</h3>\r\n            </div>\r\n\r\n            <div className=\"p-4\">\r\n                <div className=\"text-3xl font-light mb-4 text-white flex items-center\">\r\n                    {streakDays} Day{streakDays === 1 ? \"\" : \"s\"}\r\n                    {randomEmoji && <span className=\"ml-2\" role=\"img\" aria-label=\"Energizing emoji\">{randomEmoji}</span>}\r\n                </div>\r\n\r\n                <div className=\"flex justify-between w-full\">\r\n                    {daysOfWeek.map((day, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`\r\n                                flex-1 h-8 flex items-center justify-center rounded mx-1.5\r\n                                ${isDayActive(index)\r\n                                    ? \"bg-[#F9B84E] text-black font-light\"\r\n                                    : \"bg-gray-800 text-gray-400 font-light\"}\r\n                                ${index === 3 ? \"border-2 border-[#F9B84E] bg-opacity-80\" : \"\"}\r\n                            `}\r\n                        >\r\n                            {day}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6550, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/TopPerformers.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport Image from \"next/image\";\r\nimport { User, ChevronRight, ArrowRight, RefreshCcw } from \"lucide-react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useAuth } from \"@/lib/auth\";\r\n\r\nexport interface Performer {\r\n    name: string;\r\n    streakDays: number;\r\n    tasksSolved: number;\r\n    position: number;\r\n    userId?: number; // Optional user ID to identify the current user\r\n}\r\n\r\ninterface TopPerformersProps {\r\n    schoolId?: string; // School ID for navigation\r\n    cohortId?: string; // Cohort ID for navigation\r\n    view: 'learner' | 'admin';\r\n    onEmptyData?: (isEmpty: boolean) => void; // Callback when data availability changes\r\n}\r\n\r\nexport default function TopPerformers({\r\n    schoolId,\r\n    cohortId,\r\n    view,\r\n    onEmptyData\r\n}: TopPerformersProps) {\r\n    const router = useRouter();\r\n    const { user } = useAuth();\r\n    const [isRefreshing, setIsRefreshing] = useState(false);\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n    const [tooltipPosition, setTooltipPosition] = useState({ top: 0, left: 0 });\r\n    const refreshButtonRef = useRef<HTMLButtonElement>(null);\r\n\r\n    // State for data that will be fetched\r\n    const [loading, setLoading] = useState(false);\r\n    const [performers, setPerformers] = useState<Performer[]>([]);\r\n    const [currentUser, setCurrentUser] = useState<Performer | null>(null);\r\n\r\n    // Function to fetch performers data\r\n    const fetchPerformers = useCallback(async () => {\r\n        if (!cohortId || !user?.id) return;\r\n\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/cohorts/${cohortId}/leaderboard`);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch performers: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // Set the performers data\r\n            const validPerformers: Performer[] = (data.stats || []).map((stat: any, index: number) => {\r\n                const userName = [stat.user.first_name, stat.user.last_name].filter(Boolean).join(' ');\r\n                return {\r\n                    name: userName,\r\n                    streakDays: stat.streak_count,\r\n                    tasksSolved: stat.tasks_completed,\r\n                    position: index + 1, // Position based on array order\r\n                    userId: stat.user.id // Keep track of user ID for identifying current user\r\n                };\r\n            });\r\n\r\n            console.log(validPerformers);\r\n\r\n            // const validPerformers = performersData.filter(performer => performer.streakDays > 0 || performer.tasksSolved > 0);\r\n\r\n            // Get top performers but filter out those with 0 streak days\r\n            let topPerformers = validPerformers.slice(0, 3); // Take top 3 of those\r\n\r\n            let currentUser = undefined;\r\n\r\n            if (view === 'learner') {\r\n                // Find current user in the FULL performers list (which will always include them)\r\n                currentUser = validPerformers.find(performer => performer.userId === parseInt(user.id));\r\n                if (currentUser) {\r\n                    setCurrentUser(currentUser);\r\n                }\r\n            }\r\n\r\n            setPerformers(topPerformers);\r\n\r\n            if (topPerformers.length === 0 && currentUser === undefined && onEmptyData) {\r\n                onEmptyData(true);\r\n            } else if ((topPerformers.length > 0 || currentUser !== undefined) && onEmptyData) {\r\n                onEmptyData(false);\r\n            }\r\n\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error(\"Error fetching top performers:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [cohortId, user?.id]);\r\n\r\n    // Fetch data on mount and when cohortId changes\r\n    useEffect(() => {\r\n        if (cohortId && user?.id) {\r\n            fetchPerformers();\r\n        }\r\n    }, [cohortId, user?.id]);\r\n\r\n    // Update tooltip position based on button position\r\n    useEffect(() => {\r\n        if (showTooltip && refreshButtonRef.current) {\r\n            const rect = refreshButtonRef.current.getBoundingClientRect();\r\n            setTooltipPosition({\r\n                top: rect.top - 10, // Position above the button with some spacing\r\n                left: rect.left + rect.width / 2, // Center horizontally\r\n            });\r\n        }\r\n    }, [showTooltip]);\r\n\r\n    // Function to get the appropriate badge SVG based on position\r\n    const getPositionBadge = (position: number) => {\r\n        if (position === 1) {\r\n            return \"/images/leaderboard_1.svg\";\r\n        } else if (position === 2) {\r\n            return \"/images/leaderboard_2.svg\";\r\n        } else if (position === 3) {\r\n            return \"/images/leaderboard_3.svg\";\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // Check if current user is already in top performers\r\n    const isCurrentUserInTopPerformers = currentUser && currentUser.userId\r\n        ? performers.some(performer => performer.userId === currentUser.userId)\r\n        : false;\r\n\r\n    // Function to navigate to the full leaderboard\r\n    const navigateToLeaderboard = () => {\r\n        if (schoolId && cohortId) {\r\n            router.push(`/school/${schoolId}/cohort/${cohortId}/leaderboard`);\r\n        } else {\r\n            console.warn(\"Cannot navigate to leaderboard: missing schoolId or cohortId\");\r\n        }\r\n    };\r\n\r\n    // Function to handle refresh click with visual feedback\r\n    const handleRefresh = async (e: React.MouseEvent) => {\r\n        e.stopPropagation(); // Prevent click from bubbling to parent elements\r\n\r\n        if (isRefreshing) return;\r\n\r\n        setIsRefreshing(true);\r\n\r\n        try {\r\n            console.log(\"Refreshing leaderboard data...\");\r\n            await fetchPerformers();\r\n            console.log(\"Leaderboard refresh complete!\");\r\n        } catch (error) {\r\n            console.error(\"Error refreshing leaderboard:\", error);\r\n        } finally {\r\n            // Reset refreshing state after a short delay to show animation\r\n            setTimeout(() => {\r\n                setIsRefreshing(false);\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    // Create tooltip portal\r\n    const renderTooltipPortal = () => {\r\n        if (!showTooltip || typeof document === 'undefined') return null;\r\n\r\n        return createPortal(\r\n            <div\r\n                className=\"fixed px-2 py-1 bg-gray-800 text-white text-xs rounded shadow-lg whitespace-nowrap\"\r\n                style={{\r\n                    top: `${tooltipPosition.top}px`,\r\n                    left: `${tooltipPosition.left}px`,\r\n                    transform: 'translate(-50%, -100%)',\r\n                    zIndex: 9999\r\n                }}\r\n            >\r\n                Refresh\r\n                <div\r\n                    className=\"absolute w-2 h-2 bg-gray-800 rotate-45\"\r\n                    style={{\r\n                        top: '100%',\r\n                        left: '50%',\r\n                        marginTop: '-4px',\r\n                        marginLeft: '-4px'\r\n                    }}\r\n                ></div>\r\n            </div>,\r\n            document.body\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-[#121212] rounded-lg border border-gray-800 overflow-hidden\">\r\n            <div className=\"px-4 py-3 border-b border-gray-800 bg-[#2A2000] flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-light text-white\">Top Performers</h3>\r\n                <div className=\"flex items-center space-x-2\">\r\n                    <div className=\"relative\">\r\n                        <button\r\n                            ref={refreshButtonRef}\r\n                            onClick={handleRefresh}\r\n                            onMouseEnter={() => setShowTooltip(true)}\r\n                            onMouseLeave={() => setShowTooltip(false)}\r\n                            onFocus={() => setShowTooltip(true)}\r\n                            onBlur={() => setShowTooltip(false)}\r\n                            className=\"group p-1.5 rounded-md transition-all duration-200 \r\n                            bg-white/10 hover:bg-white/15 text-gray-200 cursor-pointer\"\r\n                            aria-label=\"Refresh leaderboard\"\r\n                            disabled={isRefreshing}\r\n                        >\r\n                            <RefreshCcw\r\n                                size={16}\r\n                                className={`transition-all duration-200 ${isRefreshing ? 'animate-spin' : 'group-hover:rotate-90'}`}\r\n                            />\r\n                        </button>\r\n\r\n                        {/* Render tooltip via portal */}\r\n                        {renderTooltipPortal()}\r\n                    </div>\r\n                    <button\r\n                        onClick={navigateToLeaderboard}\r\n                        className=\"group px-2.5 py-1 text-sm font-light rounded-md transition-all duration-200 flex items-center \r\n                        bg-white/10 hover:bg-white/15 text-gray-200 cursor-pointer\"\r\n                        aria-label=\"See all performers\"\r\n                    >\r\n                        <span>See All</span>\r\n                        <ChevronRight size={16} className=\"ml-1 transition-transform duration-200 group-hover:translate-x-0.5\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"divide-y divide-gray-800\">\r\n                {performers.length > 0 ? (\r\n                    // Show top performers if list is not empty\r\n                    performers.map((performer) => {\r\n                        // Check if this performer is the current user\r\n                        const isCurrentUser = currentUser && performer.userId === currentUser.userId;\r\n\r\n                        return (\r\n                            <div\r\n                                key={performer.position}\r\n                                className={`p-4 flex items-center ${isCurrentUser ? 'bg-blue-900/20' : ''\r\n                                    }`}\r\n                            >\r\n                                {performer.position <= 3 ? (\r\n                                    <div className=\"w-12 h-12 mr-4 flex items-center justify-center\">\r\n                                        <Image\r\n                                            src={getPositionBadge(performer.position)!}\r\n                                            alt={`Position ${performer.position}`}\r\n                                            width={40}\r\n                                            height={40}\r\n                                        />\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className=\"w-12 h-12 rounded-full flex items-center justify-center mr-4 bg-gray-100\">\r\n                                        <div className=\"w-10 h-10 rounded-full flex items-center justify-center font-light text-xl border-2 text-gray-400 border-gray-400\">\r\n                                            {performer.position}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <div className=\"flex-1\">\r\n                                    <div className=\"text-base font-medium text-white flex items-center\">\r\n                                        {performer.name}\r\n                                        {isCurrentUser && (\r\n                                            <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-900/30 text-blue-400\">\r\n                                                You\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"text-sm text-gray-400\">\r\n                                        Streak: {performer.streakDays} Day{performer.streakDays === 1 ? \"\" : \"s\"}\r\n                                    </div>\r\n                                    <div className=\"text-sm text-gray-400\">\r\n                                        Solved: {performer.tasksSolved} Task{performer.tasksSolved === 1 ? \"\" : \"s\"}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : currentUser ? (\r\n                    // Show only current user with top performer styling when performers list is empty\r\n                    <div className=\"p-4 flex items-center bg-blue-900/20\">\r\n                        <div className=\"w-12 h-12 rounded-full flex items-center justify-center mr-4 bg-blue-900/20\">\r\n                            <div className=\"w-10 h-10 rounded-full flex items-center justify-center font-light text-base border-2 text-blue-500 border-blue-500\">\r\n                                {currentUser.position}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex-1\">\r\n                            <div className=\"text-base font-medium text-white flex items-center\">\r\n                                {currentUser.name}\r\n                                <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-900/30 text-blue-400\">\r\n                                    You\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-400\">\r\n                                Streak: {currentUser.streakDays} Day{currentUser.streakDays === 1 ? \"\" : \"s\"}\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-400\">\r\n                                Solved: {currentUser.tasksSolved} Task{currentUser.tasksSolved === 1 ? \"\" : \"s\"}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    // No performers and no current user - show empty state\r\n                    <div className=\"py-12 px-8 text-center\">\r\n                        <div className=\"flex justify-center mb-6\">\r\n                            <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-gray-800/40 to-gray-900/60 flex items-center justify-center border border-gray-700/30\">\r\n                                <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.5\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                        <h4 className=\"text-lg font-light text-white mb-2\">No learners in the cohort yet</h4>\r\n                        <p className=\"text-gray-400 text-sm\">Top performers will appear once learners are added</p>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Show current user if they're not in top performers and performers list is not empty */}\r\n                {currentUser && !isCurrentUserInTopPerformers && performers.length > 0 && (\r\n                    <>\r\n                        <div className=\"px-4 bg-gray-900 text-center text-xs text-gray-400\">\r\n                        </div>\r\n                        <div className=\"p-4 flex items-center bg-gray-900/20\">\r\n                            <div className=\"w-12 h-12 rounded-full flex items-center justify-center mr-4 bg-blue-900/20\">\r\n                                <div className=\"w-10 h-10 rounded-full flex items-center justify-center font-light text-base border-2 text-blue-500 border-blue-500\">\r\n                                    {currentUser.position}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex-1\">\r\n                                <div className=\"text-base font-medium text-white flex items-center\">\r\n                                    {currentUser.name}\r\n                                    <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-900/30 text-blue-400\">\r\n                                        You\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"text-sm text-gray-400\">\r\n                                    Streak: {currentUser.streakDays} Day{currentUser.streakDays === 1 ? \"\" : \"s\"}\r\n                                </div>\r\n                                <div className=\"text-sm text-gray-400\">\r\n                                    Solved: {currentUser.tasksSolved} Task{currentUser.tasksSolved === 1 ? \"\" : \"s\"}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/MobileDropdown.tsx"],"sourcesContent":["import React, { useEffect, useRef, ReactNode } from 'react';\r\nimport { X } from 'lucide-react';\r\n\r\nexport interface DropdownOption<T = any> {\r\n    id: string | number;\r\n    label: ReactNode;\r\n    value: T;\r\n}\r\n\r\ninterface MobileDropdownProps<T = any> {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    title: string;\r\n    options: DropdownOption<T>[];\r\n    selectedId?: string | number;\r\n    onSelect: (option: DropdownOption<T>) => void;\r\n    className?: string;\r\n    contentClassName?: string;\r\n    titleClassName?: string;\r\n    closeButtonClassName?: string;\r\n    optionClassName?: string;\r\n    selectedOptionClassName?: string;\r\n    renderOption?: (option: DropdownOption<T>, isSelected: boolean) => ReactNode;\r\n}\r\n\r\nfunction MobileDropdown<T = any>({\r\n    isOpen,\r\n    onClose,\r\n    title,\r\n    options,\r\n    selectedId,\r\n    onSelect,\r\n    className = '',\r\n    contentClassName = '',\r\n    titleClassName = '',\r\n    closeButtonClassName = '',\r\n    optionClassName = '',\r\n    selectedOptionClassName = '',\r\n    renderOption\r\n}: MobileDropdownProps<T>) {\r\n    const dropdownRef = useRef<HTMLDivElement>(null);\r\n    const [animateIn, setAnimateIn] = React.useState(false);\r\n\r\n    // Handle animation when opening and closing\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n\r\n        if (isOpen) {\r\n            // Trigger animation after a small delay to ensure render\r\n            timeoutId = setTimeout(() => setAnimateIn(true), 10);\r\n\r\n            // Lock body scroll when dropdown is open\r\n            if (typeof document !== 'undefined') {\r\n                document.body.style.overflow = 'hidden';\r\n            }\r\n        } else {\r\n            setAnimateIn(false);\r\n        }\r\n\r\n        // Cleanup\r\n        return () => {\r\n            if (timeoutId) clearTimeout(timeoutId);\r\n            if (typeof document !== 'undefined') {\r\n                document.body.style.overflow = '';\r\n            }\r\n        };\r\n    }, [isOpen]);\r\n\r\n    // Return null if not open\r\n    if (!isOpen) return null;\r\n\r\n    // Handle backdrop click\r\n    const handleBackdropClick = (e: React.MouseEvent) => {\r\n        if (dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    // Handle option selection\r\n    const handleOptionSelect = (option: DropdownOption<T>) => {\r\n        onSelect(option);\r\n        onClose();\r\n    };\r\n\r\n    // Check if an option is selected\r\n    const isOptionSelected = (option: DropdownOption<T>) => {\r\n        return selectedId !== undefined && option.id === selectedId;\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={`fixed inset-0 bg-black bg-opacity-70 z-50 flex flex-col justify-end transition-opacity duration-300 ease-in-out ${animateIn ? 'opacity-100' : 'opacity-0'} ${className}`}\r\n            onClick={handleBackdropClick}\r\n            role=\"dialog\"\r\n            aria-modal=\"true\"\r\n        >\r\n            <div\r\n                ref={dropdownRef}\r\n                className={`w-full bg-gradient-to-b from-slate-800 via-zinc-900 \r\n             to-stone-900 border-t border-slate-700 rounded-t-xl p-4 transition-transform duration-300 ease-in-out max-h-[80vh] overflow-auto ${animateIn ? 'translate-y-0' : 'translate-y-full'} ${contentClassName}`}\r\n                onClick={(e) => e.stopPropagation()}\r\n            >\r\n                <div className=\"flex justify-between items-center mb-6\">\r\n                    <h3 className={`text-white font-light text-lg ${titleClassName}`}>{title}</h3>\r\n                    <button\r\n                        onClick={onClose}\r\n                        className={`text-slate-300 hover:text-white transition-colors cursor-pointer ${closeButtonClassName}`}\r\n                        aria-label=\"Close\"\r\n                    >\r\n                        <X className=\"h-5 w-5\" />\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"overflow-y-auto p-1 max-h-[calc(80vh-60px)]\">\r\n                    {options.map(option => (\r\n                        <button\r\n                            key={option.id}\r\n                            className={`flex w-full items-center p-4 text-left rounded-lg my-1 transition-colors cursor-pointer ${isOptionSelected(option)\r\n                                ? `bg-gradient-to-r from-slate-800 to-zinc-800 bg-opacity-90`\r\n                                : `hover:bg-slate-800 hover:bg-opacity-50`\r\n                                }`}\r\n                            onClick={() => handleOptionSelect(option)}\r\n                        >\r\n                            {renderOption ? renderOption(option, isOptionSelected(option)) : option.label}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Spacer for bottom safety area */}\r\n                <div className=\"h-6\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MobileDropdown; "],"names":[],"mappings":";;;;AAAA;AACA;;;;;AAwBA,SAAS,eAAwB,KAcR;QAdQ,EAC7B,MAAM,EACN,OAAO,EACP,KAAK,EACL,OAAO,EACP,UAAU,EACV,QAAQ,EACR,YAAY,EAAE,EACd,mBAAmB,EAAE,EACrB,iBAAiB,EAAE,EACnB,uBAAuB,EAAE,EACzB,kBAAkB,EAAE,EACpB,0BAA0B,EAAE,EAC5B,YAAY,EACS,GAdQ;;IAe7B,MAAM,cAAc,CAAA,GAAA,4QAAA,CAAA,SAAM,AAAD,EAAkB;IAC3C,MAAM,CAAC,WAAW,aAAa,GAAG,4QAAA,CAAA,UAAK,CAAC,QAAQ,CAAC;IAEjD,4CAA4C;IAC5C,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;oCAAE;YACN,IAAI;YAEJ,IAAI,QAAQ;gBACR,yDAAyD;gBACzD,YAAY;gDAAW,IAAM,aAAa;+CAAO;gBAEjD,yCAAyC;gBACzC,IAAI,OAAO,aAAa,aAAa;oBACjC,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG;gBACnC;YACJ,OAAO;gBACH,aAAa;YACjB;YAEA,UAAU;YACV;4CAAO;oBACH,IAAI,WAAW,aAAa;oBAC5B,IAAI,OAAO,aAAa,aAAa;wBACjC,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG;oBACnC;gBACJ;;QACJ;mCAAG;QAAC;KAAO;IAEX,0BAA0B;IAC1B,IAAI,CAAC,QAAQ,OAAO;IAEpB,wBAAwB;IACxB,MAAM,sBAAsB,CAAC;QACzB,IAAI,YAAY,OAAO,IAAI,CAAC,YAAY,OAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAW;YACxE;QACJ;IACJ;IAEA,0BAA0B;IAC1B,MAAM,qBAAqB,CAAC;QACxB,SAAS;QACT;IACJ;IAEA,iCAAiC;IACjC,MAAM,mBAAmB,CAAC;QACtB,OAAO,eAAe,aAAa,OAAO,EAAE,KAAK;IACrD;IAEA,qBACI,4SAAC;QACG,WAAW,AAAC,mHAA6J,OAA3C,YAAY,gBAAgB,aAAY,KAAa,OAAV;QACzK,SAAS;QACT,MAAK;QACL,cAAW;kBAEX,cAAA,4SAAC;YACG,KAAK;YACL,WAAW,AAAC,uMACwK,OAApD,YAAY,kBAAkB,oBAAmB,KAAoB,OAAjB;YACpL,SAAS,CAAC,IAAM,EAAE,eAAe;;8BAEjC,4SAAC;oBAAI,WAAU;;sCACX,4SAAC;4BAAG,WAAW,AAAC,iCAA+C,OAAf;sCAAmB;;;;;;sCACnE,4SAAC;4BACG,SAAS;4BACT,WAAW,AAAC,oEAAwF,OAArB;4BAC/E,cAAW;sCAEX,cAAA,4SAAC,mRAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;;;;;;;;;;;;8BAIrB,4SAAC;oBAAI,WAAU;8BACV,QAAQ,GAAG,CAAC,CAAA,uBACT,4SAAC;4BAEG,WAAW,AAAC,2FAGP,OAHiG,iBAAiB,UAChH,8DACA;4BAEP,SAAS,IAAM,mBAAmB;sCAEjC,eAAe,aAAa,QAAQ,iBAAiB,WAAW,OAAO,KAAK;2BAPxE,OAAO,EAAE;;;;;;;;;;8BAa1B,4SAAC;oBAAI,WAAU;;;;;;;;;;;;;;;;;AAI/B;GA5GS;KAAA;uCA8GM","debugId":null}},
    {"offset": {"line": 7339, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/LearnerCohortView.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport LearnerCourseView from \"./LearnerCourseView\";\r\nimport LearningStreak from \"./LearningStreak\";\r\nimport TopPerformers from \"./TopPerformers\";\r\nimport { Module } from \"@/types/course\";\r\nimport { useAuth } from \"@/lib/auth\";\r\nimport { Course, Cohort } from \"@/types\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport MobileDropdown, { DropdownOption } from \"./MobileDropdown\";\r\n\r\n// Constants for localStorage keys\r\nconst LAST_INCREMENT_DATE_KEY = 'streak_last_increment_date';\r\nconst LAST_STREAK_COUNT_KEY = 'streak_last_count';\r\n\r\n// Mobile tab options\r\nenum MobileTab {\r\n    Course = 'course',\r\n    Progress = 'progress'\r\n}\r\n\r\ninterface LearnerCohortViewProps {\r\n    courseTitle: string;\r\n    modules: Module[];\r\n    schoolId?: string;\r\n    cohortId?: string;\r\n    streakDays?: number;\r\n    activeDays?: string[];\r\n    completedTaskIds?: Record<string, boolean>;\r\n    completedQuestionIds?: Record<string, Record<string, boolean>>;\r\n    courses?: Course[];\r\n    onCourseSelect?: (index: number) => void;\r\n    activeCourseIndex?: number;\r\n}\r\n\r\ninterface StreakData {\r\n    streak_count: number;\r\n    active_days: string[]; // Format: YYYY-MM-DD\r\n}\r\n\r\nexport default function LearnerCohortView({\r\n    courseTitle,\r\n    modules,\r\n    schoolId,\r\n    cohortId,\r\n    streakDays = 0,\r\n    activeDays = [],\r\n    completedTaskIds = {},\r\n    completedQuestionIds = {},\r\n    courses = [],\r\n    onCourseSelect,\r\n    activeCourseIndex = 0,\r\n}: LearnerCohortViewProps) {\r\n    // Add state to manage completed tasks and questions\r\n    const [localCompletedTaskIds, setLocalCompletedTaskIds] = useState<Record<string, boolean>>(completedTaskIds);\r\n    const [localCompletedQuestionIds, setLocalCompletedQuestionIds] = useState<Record<string, Record<string, boolean>>>(completedQuestionIds);\r\n\r\n    // State to track whether to show the TopPerformers component\r\n    const [showTopPerformers, setShowTopPerformers] = useState<boolean>(true);\r\n\r\n    // State for mobile course dropdown\r\n    const [mobileDropdownOpen, setMobileDropdownOpen] = useState<boolean>(false);\r\n    const courseDropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n    // State for the active mobile tab\r\n    const [activeMobileTab, setActiveMobileTab] = useState<MobileTab>(MobileTab.Course);\r\n\r\n    // Add useEffect to update local state when props change\r\n    useEffect(() => {\r\n        setLocalCompletedTaskIds(completedTaskIds);\r\n    }, [completedTaskIds]);\r\n\r\n    useEffect(() => {\r\n        setLocalCompletedQuestionIds(completedQuestionIds);\r\n    }, [completedQuestionIds]);\r\n\r\n    // Add state for streak data\r\n    const [streakCount, setStreakCount] = useState<number>(streakDays);\r\n    const [activeWeekDays, setActiveWeekDays] = useState<string[]>(activeDays);\r\n    const [isLoadingStreak, setIsLoadingStreak] = useState<boolean>(false);\r\n\r\n    // Get user from auth context\r\n    const { user } = useAuth();\r\n    const userId = user?.id || '';\r\n\r\n    // Use refs for last increment tracking to avoid dependency cycles\r\n    const lastIncrementDateRef = useRef<string | null>(null);\r\n    const lastStreakCountRef = useRef<number>(streakDays);\r\n    const isInitialLoadRef = useRef(true);\r\n\r\n    // Load persisted values from localStorage when component mounts\r\n    useEffect(() => {\r\n        if (typeof window === 'undefined' || !userId || !cohortId) return;\r\n\r\n        const storageKeyDate = `${LAST_INCREMENT_DATE_KEY}_${userId}_${cohortId}`;\r\n        const storageKeyCount = `${LAST_STREAK_COUNT_KEY}_${userId}_${cohortId}`;\r\n\r\n        const storedDate = localStorage.getItem(storageKeyDate);\r\n        if (storedDate) {\r\n            lastIncrementDateRef.current = storedDate;\r\n        }\r\n\r\n        const storedCount = localStorage.getItem(storageKeyCount);\r\n        if (storedCount) {\r\n            lastStreakCountRef.current = parseInt(storedCount, 10);\r\n        }\r\n    }, [userId, cohortId]);\r\n\r\n    // Function to convert date to day of week abbreviation (S, M, T, W, T, F, S)\r\n    const convertDateToDayOfWeek = useCallback((dateString: string): string => {\r\n        const date = new Date(dateString);\r\n        const dayIndex = date.getDay(); // 0 is Sunday, 1 is Monday, etc.\r\n\r\n        // Return unique identifiers for each day, with position index to distinguish Sunday (0) and Saturday (6)\r\n        // This allows us to still show \"S\" for both Saturday and Sunday in the UI,\r\n        // but have a way to uniquely identify them internally\r\n        const dayIdentifiers = [\"S_0\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S_6\"];\r\n        return dayIdentifiers[dayIndex];\r\n    }, []);\r\n\r\n    // Get today's date in YYYY-MM-DD format\r\n    const getTodayDateString = useCallback((): string => {\r\n        const today = new Date();\r\n        return today.toISOString().split('T')[0];\r\n    }, []);\r\n\r\n    // Check if we already incremented streak today\r\n    const isStreakIncrementedToday = useCallback((): boolean => {\r\n        return lastIncrementDateRef.current === getTodayDateString();\r\n    }, [getTodayDateString]);\r\n\r\n    // Create a fetchStreakData function that can be reused\r\n    const fetchStreakData = useCallback(async () => {\r\n        // Only fetch if we have both user ID and cohort ID\r\n        if (!userId || !cohortId) return;\r\n\r\n        // Don't fetch if streak was already incremented today\r\n        if (isStreakIncrementedToday() && !isInitialLoadRef.current) {\r\n            return;\r\n        }\r\n\r\n        // Clear the initial load flag\r\n        isInitialLoadRef.current = false;\r\n\r\n        setIsLoadingStreak(true);\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/${userId}/streak?cohort_id=${cohortId}`);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch streak data: ${response.status}`);\r\n            }\r\n\r\n            const data: StreakData = await response.json();\r\n\r\n            // Check if streak count has increased since last fetch\r\n            const hasStreakIncremented = data.streak_count > lastStreakCountRef.current;\r\n\r\n            // If streak has increased, save today as the last increment date\r\n            if (hasStreakIncremented) {\r\n\r\n                const today = getTodayDateString();\r\n                lastIncrementDateRef.current = today;\r\n\r\n                // Save to localStorage\r\n                localStorage.setItem(\r\n                    `${LAST_INCREMENT_DATE_KEY}_${userId}_${cohortId}`,\r\n                    today\r\n                );\r\n\r\n                if (!showTopPerformers) {\r\n                    // If streak has been incremented today, show the TopPerformers component\r\n                    setShowTopPerformers(true);\r\n                }\r\n            }\r\n\r\n            // Update last streak count\r\n            lastStreakCountRef.current = data.streak_count;\r\n            localStorage.setItem(\r\n                `${LAST_STREAK_COUNT_KEY}_${userId}_${cohortId}`,\r\n                data.streak_count.toString()\r\n            );\r\n\r\n            // Set streak count and active days in state\r\n            setStreakCount(data.streak_count);\r\n            const dayAbbreviations = data.active_days.map(convertDateToDayOfWeek);\r\n            setActiveWeekDays(dayAbbreviations);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching streak data:\", error);\r\n            // Keep existing values on error\r\n        } finally {\r\n            setIsLoadingStreak(false);\r\n        }\r\n    }, [userId, cohortId, convertDateToDayOfWeek, getTodayDateString, isStreakIncrementedToday, showTopPerformers]);\r\n\r\n    // Fetch streak data when component mounts or when dependencies change\r\n    useEffect(() => {\r\n        if (userId && cohortId) {\r\n            fetchStreakData();\r\n        }\r\n    }, [userId, cohortId, fetchStreakData]);\r\n\r\n    // Handle dialog close event to refresh streak data\r\n    const handleDialogClose = useCallback(() => {\r\n        if (!isStreakIncrementedToday()) {\r\n            fetchStreakData();\r\n        }\r\n    }, [fetchStreakData, isStreakIncrementedToday]);\r\n\r\n    // Handler for task completion updates\r\n    const handleTaskComplete = useCallback((taskId: string, isComplete: boolean) => {\r\n        setLocalCompletedTaskIds(prev => ({\r\n            ...prev,\r\n            [taskId]: isComplete\r\n        }));\r\n\r\n        // If a task was completed, check for streak update after a small delay\r\n        if (isComplete && !isStreakIncrementedToday()) {\r\n            setTimeout(() => {\r\n                fetchStreakData();\r\n            }, 500);\r\n        }\r\n    }, [fetchStreakData, isStreakIncrementedToday]);\r\n\r\n    // Handler for question completion updates\r\n    const handleQuestionComplete = useCallback((taskId: string, questionId: string, isComplete: boolean) => {\r\n        setLocalCompletedQuestionIds(prev => {\r\n            const updatedQuestionIds = { ...prev };\r\n\r\n            // Initialize the object for this task if it doesn't exist\r\n            if (!updatedQuestionIds[taskId]) {\r\n                updatedQuestionIds[taskId] = {};\r\n            }\r\n\r\n            // Mark this question as complete\r\n            updatedQuestionIds[taskId] = {\r\n                ...updatedQuestionIds[taskId],\r\n                [questionId]: isComplete\r\n            };\r\n\r\n            return updatedQuestionIds;\r\n        });\r\n\r\n        // If a question was completed, check for streak update after a small delay\r\n        if (isComplete && !isStreakIncrementedToday()) {\r\n            setTimeout(() => {\r\n                fetchStreakData();\r\n            }, 500);\r\n        }\r\n    }, [fetchStreakData, isStreakIncrementedToday]);\r\n\r\n    // Determine if sidebar should be shown\r\n    const showSidebar = cohortId ? true : false;\r\n\r\n    // Convert courses to dropdown options\r\n    const courseOptions: DropdownOption<number>[] = courses.map((course, index) => ({\r\n        id: course.id,\r\n        label: course.name,\r\n        value: index\r\n    }));\r\n\r\n    // Handle course selection\r\n    const handleCourseSelect = (index: number) => {\r\n        if (onCourseSelect) {\r\n            onCourseSelect(index);\r\n        }\r\n    };\r\n\r\n    // Handle course selection from dropdown\r\n    const handleCourseDropdownSelect = (option: DropdownOption<number>) => {\r\n        if (onCourseSelect) {\r\n            onCourseSelect(option.value);\r\n        }\r\n    };\r\n\r\n    // Callback for when TopPerformers has no data\r\n    const handleEmptyPerformersData = useCallback((isEmpty: boolean) => {\r\n        setShowTopPerformers(!isEmpty);\r\n    }, []);\r\n\r\n    // Close dropdown when clicking outside\r\n    useEffect(() => {\r\n        function handleClickOutside(event: MouseEvent) {\r\n            if (courseDropdownRef.current && !courseDropdownRef.current.contains(event.target as Node)) {\r\n                setMobileDropdownOpen(false);\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    const getActiveCourse = () => {\r\n        return courses[activeCourseIndex] || null;\r\n    };\r\n\r\n    // Clean up event listeners when component unmounts\r\n    useEffect(() => {\r\n        return () => {\r\n            if (typeof document !== 'undefined') {\r\n                document.body.style.overflow = '';\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"bg-black min-h-screen pb-16 lg:pb-0\" role=\"main\">\r\n            {courseTitle && (\r\n                <h1 className=\"text-2xl md:text-3xl font-light text-white mb-4 md:mb-6 px-1 sm:px-0\">\r\n                    {courseTitle}\r\n                </h1>\r\n            )}\r\n\r\n            <div className=\"lg:flex lg:flex-row lg:justify-between\">\r\n                {/* Left Column: Course Tabs and Course Content */}\r\n                <div className={`lg:w-2/3 lg:pr-8 ${showSidebar && activeMobileTab === MobileTab.Progress ? 'hidden lg:block' : ''}`}>\r\n                    {/* Course Selector */}\r\n                    {courses.length > 1 && (\r\n                        <div className=\"mb-8 sm:mb-10\">\r\n                            {/* Desktop Tabs - Hidden on Mobile */}\r\n                            <div className=\"hidden sm:block w-full\">\r\n                                <div className=\"flex items-center border-b border-gray-900 overflow-x-auto scrollbar-hide\">\r\n                                    {courses.map((course, index) => (\r\n                                        <button\r\n                                            key={course.id}\r\n                                            className={`px-8 py-4 text-base md:text-lg tracking-wide whitespace-nowrap transition-all duration-200 cursor-pointer flex-shrink-0 relative group ${index === activeCourseIndex\r\n                                                ? 'text-white font-light'\r\n                                                : 'text-gray-500 hover:text-gray-300 font-light'\r\n                                                }`}\r\n                                            onClick={() => handleCourseSelect(index)}\r\n                                        >\r\n                                            <span className=\"relative z-10\">{course.name}</span>\r\n\r\n                                            {/* Active indicator - visible only for active tab */}\r\n                                            {index === activeCourseIndex && (\r\n                                                <div className=\"absolute bottom-0 left-0 right-0 h-[1px] bg-white\" />\r\n                                            )}\r\n\r\n                                            {/* Hover indicator - visible only on hover for inactive tabs */}\r\n                                            {index !== activeCourseIndex && (\r\n                                                <div className=\"absolute bottom-0 left-0 right-0 h-[1px] bg-gray-700 scale-x-0 group-hover:scale-x-100 transition-transform duration-200 origin-left\" />\r\n                                            )}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Mobile Course Selector - Visible only on small screens */}\r\n                            <div className=\"sm:hidden\">\r\n                                {/* Current course indicator */}\r\n                                <button\r\n                                    onClick={() => setMobileDropdownOpen(true)}\r\n                                    className=\"w-full text-left py-3 px-1 border-b border-gray-800 flex items-center justify-between cursor-pointer group transition-opacity\"\r\n                                    aria-haspopup=\"true\"\r\n                                >\r\n                                    <div>\r\n                                        <div className=\"text-xs text-gray-500 mb-1\">Current Course</div>\r\n                                        <div className=\"text-white font-light\">{getActiveCourse()?.name || \"Select Course\"}</div>\r\n                                    </div>\r\n                                    <div className=\"bg-gray-800 rounded-full p-2 opacity-70 group-hover:opacity-100 transition-opacity\">\r\n                                        <ChevronDown size={16} className=\"text-white transition-colors\" />\r\n                                    </div>\r\n                                </button>\r\n                            </div>\r\n\r\n                            {/* Mobile Dropdown using MobileDropdown component */}\r\n                            <MobileDropdown\r\n                                isOpen={mobileDropdownOpen}\r\n                                onClose={() => setMobileDropdownOpen(false)}\r\n                                title=\"Select Course\"\r\n                                options={courseOptions}\r\n                                selectedId={getActiveCourse()?.id}\r\n                                onSelect={handleCourseDropdownSelect}\r\n                                contentClassName=\"bg-[#0f0f0f]\"\r\n                                selectedOptionClassName=\"text-white\"\r\n                                optionClassName=\"text-gray-400 hover:text-white\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Course Content */}\r\n                    <div>\r\n                        <LearnerCourseView\r\n                            modules={modules}\r\n                            completedTaskIds={localCompletedTaskIds}\r\n                            completedQuestionIds={localCompletedQuestionIds}\r\n                            onTaskComplete={handleTaskComplete}\r\n                            onQuestionComplete={handleQuestionComplete}\r\n                            onDialogClose={handleDialogClose}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Right Column: Streak and Performers */}\r\n                {showSidebar && (\r\n                    <div className={`w-full lg:w-1/3 space-y-6 mt-6 lg:mt-0 ${activeMobileTab === MobileTab.Course ? 'hidden lg:block' : ''}`}>\r\n                        {/* Streak component when not loading and cohort ID exists */}\r\n                        {!isLoadingStreak && cohortId && (\r\n                            <LearningStreak\r\n                                streakDays={streakCount}\r\n                                activeDays={activeWeekDays}\r\n                            />\r\n                        )}\r\n\r\n                        {/* Only show TopPerformers if showTopPerformers is true */}\r\n                        {showTopPerformers && (\r\n                            <TopPerformers\r\n                                schoolId={schoolId}\r\n                                cohortId={cohortId}\r\n                                view='learner'\r\n                            // onEmptyData={handleEmptyPerformersData}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Mobile Bottom Tabs - Only visible on mobile */}\r\n            {showSidebar && (\r\n                <div className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-gradient-to-t from-black to-[rgba(0,0,0,0.9)] border-t border-gray-900 z-20\">\r\n                    <div className=\"flex h-16\">\r\n                        <button\r\n                            className={`flex-1 flex flex-col items-center justify-center transition-colors ${activeMobileTab === MobileTab.Course\r\n                                ? 'text-white'\r\n                                : 'text-gray-500'\r\n                                }`}\r\n                            onClick={() => setActiveMobileTab(MobileTab.Course)}\r\n                        >\r\n                            <svg className=\"w-6 h-6 mb-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.5\" d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\"></path>\r\n                            </svg>\r\n                            <span className=\"text-xs font-light\">Course</span>\r\n                        </button>\r\n                        <button\r\n                            className={`flex-1 flex flex-col items-center justify-center transition-colors ${activeMobileTab === MobileTab.Progress\r\n                                ? 'text-white'\r\n                                : 'text-gray-500'\r\n                                }`}\r\n                            onClick={() => setActiveMobileTab(MobileTab.Progress)}\r\n                        >\r\n                            <svg className=\"w-6 h-6 mb-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.5\" d=\"M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"></path>\r\n                            </svg>\r\n                            <span className=\"text-xs font-light\">Progress</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7970, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/app/school/%5Bid%5D/ClientSchoolLearnerView.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Header } from \"@/components/layout/header\";\r\nimport { Building, ChevronDown, ChevronLeft, Info } from \"lucide-react\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport CohortCard from \"@/components/CohortCard\";\r\nimport { useAuth } from \"@/lib/auth\";\r\nimport LearnerCohortView from \"@/components/LearnerCohortView\";\r\nimport { Module, ModuleItem } from \"@/types/course\";\r\nimport { getCompletionData, useSchools } from \"@/lib/api\";\r\nimport { Cohort, Task, Milestone } from \"@/types\";\r\nimport { transformCourseToModules } from \"@/lib/course\";\r\nimport MobileDropdown, { DropdownOption } from \"@/components/MobileDropdown\";\r\n\r\ninterface School {\r\n    id: number;\r\n    name: string;\r\n    slug: string;\r\n}\r\n\r\ninterface Course {\r\n    id: number;\r\n    name: string;\r\n    milestones?: Milestone[];\r\n    course_generation_status?: string | null;\r\n}\r\n\r\nexport default function ClientSchoolLearnerView({ slug }: { slug: string }) {\r\n    const router = useRouter();\r\n    const searchParams = useSearchParams();\r\n    // Get course_id and cohort_id from query parameters\r\n    const defaultCourseId = searchParams.get('course_id');\r\n    const defaultCohortId = searchParams.get('cohort_id');\r\n\r\n    const { user, isAuthenticated, isLoading: authLoading } = useAuth();\r\n    const { schools } = useSchools();\r\n    const [school, setSchool] = useState<School | null>(null);\r\n    const [cohorts, setCohorts] = useState<Cohort[]>([]);\r\n    const [activeCohort, setActiveCohort] = useState<Cohort | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [courses, setCourses] = useState<Course[]>([]);\r\n    const [activeCourseIndex, setActiveCourseIndex] = useState(0);\r\n    const [loadingCourses, setLoadingCourses] = useState(true);\r\n    const [courseError, setCourseError] = useState<string | null>(null);\r\n    const [courseModules, setCourseModules] = useState<Module[]>([]);\r\n    const [showCohortSelector, setShowCohortSelector] = useState<boolean>(false);\r\n    const [isAdminOrOwner, setIsAdminOrOwner] = useState<boolean>(false);\r\n\r\n    // Add state for completion data\r\n    const [completedTaskIds, setCompletedTaskIds] = useState<Record<string, boolean>>({});\r\n    const [completedQuestionIds, setCompletedQuestionIds] = useState<Record<string, Record<string, boolean>>>({});\r\n\r\n    // Fetch school data\r\n    useEffect(() => {\r\n        const fetchSchool = async () => {\r\n            // Don't fetch if auth is still loading or user is not authenticated\r\n            if (authLoading || !isAuthenticated || !user?.id) {\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n            try {\r\n                // Fetch basic school info using slug\r\n                const schoolResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/organizations/slug/${slug}`);\r\n                if (!schoolResponse.ok) {\r\n                    throw new Error(`API error: ${schoolResponse.status}`);\r\n                }\r\n                const schoolData = await schoolResponse.json();\r\n\r\n                // Transform the API response to match the School interface\r\n                const transformedSchool: School = {\r\n                    id: parseInt(schoolData.id),\r\n                    name: schoolData.name,\r\n                    slug: schoolData.slug\r\n                };\r\n\r\n                setSchool(transformedSchool);\r\n\r\n                // Check if user is admin or owner of this school\r\n                const isOwnerOrAdmin = schools?.some(s =>\r\n                    parseInt(s.id) === transformedSchool.id &&\r\n                    (s.role === 'owner' || s.role === 'admin')\r\n                );\r\n\r\n                setIsAdminOrOwner(Boolean(isOwnerOrAdmin));\r\n\r\n                let cohortsData: any[];\r\n\r\n                // If user is owner or admin, fetch all cohorts for the school\r\n                if (isOwnerOrAdmin) {\r\n                    const allCohortsResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/cohorts/?org_id=${transformedSchool.id}`);\r\n                    if (!allCohortsResponse.ok) {\r\n                        throw new Error(`API error: ${allCohortsResponse.status}`);\r\n                    }\r\n                    cohortsData = await allCohortsResponse.json();\r\n                } else {\r\n                    // Otherwise, fetch only the cohorts the user is a member of\r\n                    const userCohortsResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/${user.id}/org/${transformedSchool.id}/cohorts`);\r\n                    if (!userCohortsResponse.ok) {\r\n                        throw new Error(`API error: ${userCohortsResponse.status}`);\r\n                    }\r\n                    cohortsData = await userCohortsResponse.json();\r\n                }\r\n\r\n                // Transform cohorts data\r\n                const transformedCohorts: Cohort[] = cohortsData.map((cohort: any) => ({\r\n                    id: cohort.id,\r\n                    name: cohort.name,\r\n                    joined_at: cohort.joined_at\r\n                }));\r\n\r\n                setCohorts(transformedCohorts);\r\n\r\n                // Set the active cohort based on query parameters if available\r\n                if (transformedCohorts.length > 0) {\r\n                    if (defaultCohortId) {\r\n                        // Try to find the cohort that matches the cohort_id from query params\r\n                        const cohortFromQuery = transformedCohorts.find(\r\n                            cohort => cohort.id.toString() === defaultCohortId\r\n                        );\r\n\r\n                        if (cohortFromQuery) {\r\n                            setActiveCohort(cohortFromQuery);\r\n                        } else {\r\n                            // If we can't find the cohort, default to the first one\r\n                            setActiveCohort(transformedCohorts[0]);\r\n                        }\r\n                    } else {\r\n                        // Default behavior - use the first cohort\r\n                        setActiveCohort(transformedCohorts[0]);\r\n                    }\r\n                }\r\n\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchSchool();\r\n    }, [slug, router, user?.id, isAuthenticated, authLoading, schools, defaultCohortId]);\r\n\r\n    // Function to fetch cohort courses\r\n    const fetchCohortCourses = async (cohortId: number) => {\r\n        if (!cohortId) return;\r\n\r\n        setLoadingCourses(true);\r\n        setCourseError(null);\r\n\r\n        try {\r\n            const url = `${process.env.NEXT_PUBLIC_BACKEND_URL}/cohorts/${cohortId}/courses?include_tree=true`;\r\n\r\n            // Check if 'joined_at' exists, as older learners may not have this timestamp.\r\n            const cohortUrl = activeCohort?.joined_at ? `${url}&joined_at=${activeCohort.joined_at}` : url;\r\n            const response = await fetch(cohortUrl);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch courses: ${response.status}`);\r\n            }\r\n\r\n            const coursesData: Course[] = await response.json();\r\n            setCourses(coursesData);\r\n            // Reset active course index when cohort changes\r\n            setActiveCourseIndex(0);\r\n\r\n            // Transform the first course's milestones to modules if available\r\n            if (coursesData.length > 0) {\r\n                const modules = transformCourseToModules(coursesData[0]);\r\n                setCourseModules(modules);\r\n            } else {\r\n                setCourseModules([]);\r\n            }\r\n\r\n            setLoadingCourses(false);\r\n        } catch (error) {\r\n            console.error(\"Error fetching cohort courses:\", error);\r\n            setCourseError(\"Failed to load courses. Please try again.\");\r\n            setLoadingCourses(false);\r\n        }\r\n    };\r\n\r\n    // Function to fetch completion data\r\n    const fetchCompletionData = async (cohortId: number, userId: string) => {\r\n        if (!cohortId || !userId) return;\r\n\r\n        try {\r\n            const { taskCompletions, questionCompletions } = await getCompletionData(cohortId, userId);\r\n\r\n            // Update state with processed completion data\r\n            setCompletedTaskIds(taskCompletions);\r\n            setCompletedQuestionIds(questionCompletions);\r\n        } catch (error) {\r\n            console.error(\"Error fetching completion data:\", error);\r\n            // We don't set an error state as this is not critical functionality\r\n            // Just log the error and continue\r\n        }\r\n    };\r\n\r\n    // Fetch courses when active cohort changes\r\n    useEffect(() => {\r\n        if (activeCohort) {\r\n            fetchCohortCourses(activeCohort.id);\r\n\r\n            // Also fetch completion data when cohort changes\r\n            if (user?.id) {\r\n                fetchCompletionData(activeCohort.id, user.id.toString());\r\n            }\r\n        }\r\n    }, [activeCohort, user?.id]);\r\n\r\n    // Update to handle course selection from query params after courses are loaded\r\n    useEffect(() => {\r\n        if (courses.length > 0 && defaultCourseId) {\r\n            // Find the index of the course that matches the course_id from query params\r\n            const courseIndex = courses.findIndex(\r\n                course => course.id.toString() === defaultCourseId\r\n            );\r\n\r\n            if (courseIndex !== -1) {\r\n                // Set the active course to the one from query params\r\n                handleCourseSelect(courseIndex);\r\n            }\r\n        }\r\n    }, [courses, defaultCourseId]);\r\n\r\n    // Handle course tab selection\r\n    const handleCourseSelect = (index: number) => {\r\n        if (index == activeCourseIndex) {\r\n            return;\r\n        }\r\n        setActiveCourseIndex(index);\r\n        const modules = transformCourseToModules(courses[index], activeCohort?.joined_at);\r\n        setCourseModules(modules);\r\n\r\n        // Update URL with course ID\r\n        if (courses[index]) {\r\n            const courseId = courses[index].id.toString();\r\n            const params = new URLSearchParams(window.location.search);\r\n\r\n            params.set('course_id', courseId);\r\n\r\n            // Replace current URL to avoid adding to browser history stack\r\n            router.replace(`/school/${slug}?${params.toString()}`, { scroll: false });\r\n        }\r\n    };\r\n\r\n    // Helper function to update URL query params\r\n    const updateUrlWithCohortId = (cohortId: number) => {\r\n        // Create the new URL with updated query parameters\r\n        const params = new URLSearchParams();\r\n\r\n        if (cohortId.toString() == params.get('cohort_id')) {\r\n            return;\r\n        }\r\n\r\n        // Set cohort id in query params\r\n        params.set('cohort_id', cohortId.toString());\r\n\r\n        // will later set course id defaults in the query param after course cohorts have loaded\r\n        params.delete('course_id');\r\n\r\n        // Replace current URL to avoid adding to browser history stack\r\n        router.replace(`/school/${slug}?${params.toString()}`, { scroll: false });\r\n    };\r\n\r\n    // Keep the original handleCohortSelect function for the Header component\r\n    const handleCohortSelect = (cohort: Cohort) => {\r\n        setActiveCohort(cohort);\r\n        setShowCohortSelector(false);\r\n        // Update URL with cohort ID\r\n        updateUrlWithCohortId(cohort.id);\r\n    };\r\n\r\n    // Transform cohorts to dropdown options\r\n    const cohortOptions: DropdownOption<Cohort>[] = cohorts.map(cohort => ({\r\n        id: cohort.id,\r\n        label: <span className=\"text-white font-light\">{cohort.name}</span>,\r\n        value: cohort\r\n    }));\r\n\r\n    // Handle cohort selection from dropdown\r\n    const handleCohortOptionSelect = (option: DropdownOption<Cohort>) => {\r\n        setActiveCohort(option.value);\r\n        setShowCohortSelector(false);\r\n        // Update URL with cohort ID\r\n        updateUrlWithCohortId(option.value.id);\r\n    };\r\n\r\n    // Handle back button click\r\n    const handleBackClick = () => {\r\n        router.push('/');\r\n    };\r\n\r\n    // Show loading state while auth is loading\r\n    if (authLoading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-black text-white\">\r\n                <div className=\"hidden sm:block\">\r\n                    <Header showCreateCourseButton={false} />\r\n                </div>\r\n                <div className=\"flex justify-center items-center py-12\">\r\n                    <div className=\"w-12 h-12 border-t-2 border-b-2 border-white rounded-full animate-spin\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Redirect to login if not authenticated\r\n    if (!isAuthenticated && !authLoading) {\r\n        // Use client-side redirect\r\n        router.push('/login');\r\n        return null;\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-black text-white\">\r\n                <div className=\"hidden sm:block\">\r\n                    <Header showCreateCourseButton={false} />\r\n                </div>\r\n                <div className=\"flex justify-center items-center py-12\">\r\n                    <div className=\"w-12 h-12 border-t-2 border-b-2 border-white rounded-full animate-spin\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!school) {\r\n        return (\r\n            <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\r\n                <p>School not found</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Admin/Owner Banner */}\r\n            {isAdminOrOwner && (\r\n                <div className=\"bg-[#111111] border-b border-gray-800 text-white py-3 px-4 text-center shadow-sm\">\r\n                    <p className=\"font-light text-sm\">\r\n                        You are viewing all the cohorts in this school because you are an admin. Learners only see the cohorts they are enrolled in.\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"hidden sm:block\">\r\n                <Header\r\n                    showCreateCourseButton={false}\r\n                    cohorts={cohorts}\r\n                    activeCohort={activeCohort}\r\n                    onCohortSelect={handleCohortSelect}\r\n                />\r\n            </div>\r\n            <div className=\"min-h-screen bg-black text-white\">\r\n                <div className=\"container mx-auto\">\r\n                    <main>\r\n                        {cohorts.length === 0 && (\r\n                            <div className=\"pt-24 px-4\">\r\n                                <div className=\"flex flex-col items-center justify-center py-12 rounded-lg text-center\">\r\n                                    <h3 className=\"text-xl font-light mb-2\">No cohorts available</h3>\r\n                                    <p className=\"text-gray-400\">You are not enrolled in any cohorts for this school</p>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {cohorts.length > 0 && activeCohort && (\r\n                            <>\r\n                                {loadingCourses ? (\r\n                                    <div className=\"flex justify-center items-center py-12\">\r\n                                        <div className=\"w-12 h-12 border-t-2 border-b-2 border-white rounded-full animate-spin\"></div>\r\n                                    </div>\r\n                                ) : courseError ? (\r\n                                    <div className=\"mt-12 text-center px-4\">\r\n                                        <p className=\"text-red-400 mb-4\">{courseError}</p>\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                if (activeCohort) {\r\n                                                    fetchCohortCourses(activeCohort.id);\r\n                                                }\r\n                                            }}\r\n                                            className=\"px-4 py-2 bg-gray-800 hover:bg-gray-700 rounded-md transition-colors\"\r\n                                        >\r\n                                            Try Again\r\n                                        </button>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className=\"w-full\">\r\n                                        {/* Mobile Cohort Banner - Always show on mobile */}\r\n                                        {activeCohort && (\r\n                                            <div className=\"sm:hidden w-full bg-gradient-to-r from-teal-800 via-emerald-700 to-cyan-800 p-4 border-b border-emerald-600 shadow-md\">\r\n                                                <div className=\"flex justify-between items-center\">\r\n                                                    <div className=\"flex items-center\">\r\n                                                        <button\r\n                                                            onClick={handleBackClick}\r\n                                                            className=\"mr-2 text-white hover:text-gray-200 transition-colors\"\r\n                                                        >\r\n                                                            <ChevronLeft size={20} />\r\n                                                        </button>\r\n                                                        <h2 className=\"text-white font-light text-lg truncate mr-2\">\r\n                                                            {activeCohort.name}\r\n                                                        </h2>\r\n                                                    </div>\r\n                                                    {cohorts.length > 1 && (\r\n                                                        <button\r\n                                                            className=\"bg-teal-900 bg-opacity-80 text-white font-light text-sm border border-cyan-600 rounded-full px-3 py-1 hover:bg-emerald-700 hover:bg-opacity-70 transition-all cursor-pointer\"\r\n                                                            onClick={() => setShowCohortSelector(true)}\r\n                                                        >\r\n                                                            Switch\r\n                                                        </button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n\r\n                                        {/* Mobile Cohort Selector using MobileDropdown component */}\r\n                                        <MobileDropdown\r\n                                            isOpen={showCohortSelector}\r\n                                            onClose={() => setShowCohortSelector(false)}\r\n                                            title=\"Switch Cohort\"\r\n                                            options={cohortOptions}\r\n                                            selectedId={activeCohort?.id}\r\n                                            onSelect={handleCohortOptionSelect}\r\n                                        />\r\n\r\n                                        {courses.length === 0 ? (\r\n                                            <div className=\"pt-12 text-center px-4\">\r\n                                                <h3 className=\"text-xl font-light mb-2\">No courses available</h3>\r\n                                                <p className=\"text-gray-400\">There are no courses in this cohort yet</p>\r\n                                            </div>\r\n                                        ) : (\r\n                                            // Course Content using LearnerCohortView\r\n                                            <div className=\"w-full px-4 py-4 md:py-8\">\r\n                                                {courses.length > 0 && (\r\n                                                    <div className=\"w-full\">\r\n                                                        <LearnerCohortView\r\n                                                            courseTitle={courses.length > 1 ? \"\" : courses[activeCourseIndex].name}\r\n                                                            modules={courseModules}\r\n                                                            schoolId={school.id.toString()}\r\n                                                            cohortId={activeCohort?.id.toString()}\r\n                                                            streakDays={2}\r\n                                                            activeDays={[\"M\", \"T\"]}\r\n                                                            completedTaskIds={completedTaskIds}\r\n                                                            completedQuestionIds={completedQuestionIds}\r\n                                                            courses={courses}\r\n                                                            onCourseSelect={handleCourseSelect}\r\n                                                            activeCourseIndex={activeCourseIndex}\r\n                                                        />\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </main>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n} "],"names":[],"mappings":";;;AAgEsD;;AA9DtD;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;AAbA;;;;;;;;;;AA4Be,SAAS,wBAAwB,KAA0B;QAA1B,EAAE,IAAI,EAAoB,GAA1B;;IAC5C,MAAM,SAAS,CAAA,GAAA,oPAAA,CAAA,YAAS,AAAD;IACvB,MAAM,eAAe,CAAA,GAAA,oPAAA,CAAA,kBAAe,AAAD;IACnC,oDAAoD;IACpD,MAAM,kBAAkB,aAAa,GAAG,CAAC;IACzC,MAAM,kBAAkB,aAAa,GAAG,CAAC;IAEzC,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,WAAW,WAAW,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,UAAO,AAAD;IAChE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,oHAAA,CAAA,aAAU,AAAD;IAC7B,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAiB;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC/D,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAW;IACtE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAAW;IAE9D,gCAAgC;IAChC,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAA2B,CAAC;IACnF,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,4QAAA,CAAA,WAAQ,AAAD,EAA2C,CAAC;IAE3G,oBAAoB;IACpB,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;6CAAE;YACN,MAAM;iEAAc;oBAChB,oEAAoE;oBACpE,IAAI,eAAe,CAAC,mBAAmB,EAAC,iBAAA,2BAAA,KAAM,EAAE,GAAE;wBAC9C;oBACJ;oBAEA,WAAW;oBACX,IAAI;wBACA,qCAAqC;wBACrC,MAAM,iBAAiB,MAAM,MAAM,AAAC,GAA4D,kEAAtB,wBAA2B,OAAL;wBAChG,IAAI,CAAC,eAAe,EAAE,EAAE;4BACpB,MAAM,IAAI,MAAM,AAAC,cAAmC,OAAtB,eAAe,MAAM;wBACvD;wBACA,MAAM,aAAa,MAAM,eAAe,IAAI;wBAE5C,2DAA2D;wBAC3D,MAAM,oBAA4B;4BAC9B,IAAI,SAAS,WAAW,EAAE;4BAC1B,MAAM,WAAW,IAAI;4BACrB,MAAM,WAAW,IAAI;wBACzB;wBAEA,UAAU;wBAEV,iDAAiD;wBACjD,MAAM,iBAAiB,oBAAA,8BAAA,QAAS,IAAI;6EAAC,CAAA,IACjC,SAAS,EAAE,EAAE,MAAM,kBAAkB,EAAE,IACvC,CAAC,EAAE,IAAI,KAAK,WAAW,EAAE,IAAI,KAAK,OAAO;;wBAG7C,kBAAkB,QAAQ;wBAE1B,IAAI;wBAEJ,8DAA8D;wBAC9D,IAAI,gBAAgB;4BAChB,MAAM,qBAAqB,MAAM,MAAM,AAAC,GAAyD,kEAAnB,qBAAwC,OAArB,kBAAkB,EAAE;4BACrH,IAAI,CAAC,mBAAmB,EAAE,EAAE;gCACxB,MAAM,IAAI,MAAM,AAAC,cAAuC,OAA1B,mBAAmB,MAAM;4BAC3D;4BACA,cAAc,MAAM,mBAAmB,IAAI;wBAC/C,OAAO;4BACH,4DAA4D;4BAC5D,MAAM,sBAAsB,MAAM,MAAM,AAAC,GAA+C,kEAAT,WAAwB,OAAf,KAAK,EAAE,EAAC,SAA4B,OAArB,kBAAkB,EAAE,EAAC;4BAC5H,IAAI,CAAC,oBAAoB,EAAE,EAAE;gCACzB,MAAM,IAAI,MAAM,AAAC,cAAwC,OAA3B,oBAAoB,MAAM;4BAC5D;4BACA,cAAc,MAAM,oBAAoB,IAAI;wBAChD;wBAEA,yBAAyB;wBACzB,MAAM,qBAA+B,YAAY,GAAG;gGAAC,CAAC,SAAgB,CAAC;oCACnE,IAAI,OAAO,EAAE;oCACb,MAAM,OAAO,IAAI;oCACjB,WAAW,OAAO,SAAS;gCAC/B,CAAC;;wBAED,WAAW;wBAEX,+DAA+D;wBAC/D,IAAI,mBAAmB,MAAM,GAAG,GAAG;4BAC/B,IAAI,iBAAiB;gCACjB,sEAAsE;gCACtE,MAAM,kBAAkB,mBAAmB,IAAI;qGAC3C,CAAA,SAAU,OAAO,EAAE,CAAC,QAAQ,OAAO;;gCAGvC,IAAI,iBAAiB;oCACjB,gBAAgB;gCACpB,OAAO;oCACH,wDAAwD;oCACxD,gBAAgB,kBAAkB,CAAC,EAAE;gCACzC;4BACJ,OAAO;gCACH,0CAA0C;gCAC1C,gBAAgB,kBAAkB,CAAC,EAAE;4BACzC;wBACJ;wBAEA,WAAW;oBACf,EAAE,OAAO,OAAO;wBACZ,QAAQ,KAAK,CAAC,wBAAwB;wBACtC,WAAW;oBACf;gBACJ;;YAEA;QACJ;4CAAG;QAAC;QAAM;QAAQ,iBAAA,2BAAA,KAAM,EAAE;QAAE;QAAiB;QAAa;QAAS;KAAgB;IAEnF,mCAAmC;IACnC,MAAM,qBAAqB,OAAO;QAC9B,IAAI,CAAC,UAAU;QAEf,kBAAkB;QAClB,eAAe;QAEf,IAAI;YACA,MAAM,MAAM,AAAC,GAAiD,kEAAX,aAAoB,OAAT,UAAS;YAEvE,8EAA8E;YAC9E,MAAM,YAAY,CAAA,yBAAA,mCAAA,aAAc,SAAS,IAAG,AAAC,GAAmB,OAAjB,KAAI,eAAoC,OAAvB,aAAa,SAAS,IAAK;YAC3F,MAAM,WAAW,MAAM,MAAM;YAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,AAAC,4BAA2C,OAAhB,SAAS,MAAM;YAC/D;YAEA,MAAM,cAAwB,MAAM,SAAS,IAAI;YACjD,WAAW;YACX,gDAAgD;YAChD,qBAAqB;YAErB,kEAAkE;YAClE,IAAI,YAAY,MAAM,GAAG,GAAG;gBACxB,MAAM,UAAU,CAAA,GAAA,uHAAA,CAAA,2BAAwB,AAAD,EAAE,WAAW,CAAC,EAAE;gBACvD,iBAAiB;YACrB,OAAO;gBACH,iBAAiB,EAAE;YACvB;YAEA,kBAAkB;QACtB,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,kCAAkC;YAChD,eAAe;YACf,kBAAkB;QACtB;IACJ;IAEA,oCAAoC;IACpC,MAAM,sBAAsB,OAAO,UAAkB;QACjD,IAAI,CAAC,YAAY,CAAC,QAAQ;QAE1B,IAAI;YACA,MAAM,EAAE,eAAe,EAAE,mBAAmB,EAAE,GAAG,MAAM,CAAA,GAAA,oHAAA,CAAA,oBAAiB,AAAD,EAAE,UAAU;YAEnF,8CAA8C;YAC9C,oBAAoB;YACpB,wBAAwB;QAC5B,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,oEAAoE;QACpE,kCAAkC;QACtC;IACJ;IAEA,2CAA2C;IAC3C,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;6CAAE;YACN,IAAI,cAAc;gBACd,mBAAmB,aAAa,EAAE;gBAElC,iDAAiD;gBACjD,IAAI,iBAAA,2BAAA,KAAM,EAAE,EAAE;oBACV,oBAAoB,aAAa,EAAE,EAAE,KAAK,EAAE,CAAC,QAAQ;gBACzD;YACJ;QACJ;4CAAG;QAAC;QAAc,iBAAA,2BAAA,KAAM,EAAE;KAAC;IAE3B,+EAA+E;IAC/E,CAAA,GAAA,4QAAA,CAAA,YAAS,AAAD;6CAAE;YACN,IAAI,QAAQ,MAAM,GAAG,KAAK,iBAAiB;gBACvC,4EAA4E;gBAC5E,MAAM,cAAc,QAAQ,SAAS;qEACjC,CAAA,SAAU,OAAO,EAAE,CAAC,QAAQ,OAAO;;gBAGvC,IAAI,gBAAgB,CAAC,GAAG;oBACpB,qDAAqD;oBACrD,mBAAmB;gBACvB;YACJ;QACJ;4CAAG;QAAC;QAAS;KAAgB;IAE7B,8BAA8B;IAC9B,MAAM,qBAAqB,CAAC;QACxB,IAAI,SAAS,mBAAmB;YAC5B;QACJ;QACA,qBAAqB;QACrB,MAAM,UAAU,CAAA,GAAA,uHAAA,CAAA,2BAAwB,AAAD,EAAE,OAAO,CAAC,MAAM,EAAE,yBAAA,mCAAA,aAAc,SAAS;QAChF,iBAAiB;QAEjB,4BAA4B;QAC5B,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,MAAM,WAAW,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ;YAC3C,MAAM,SAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM;YAEzD,OAAO,GAAG,CAAC,aAAa;YAExB,+DAA+D;YAC/D,OAAO,OAAO,CAAC,AAAC,WAAkB,OAAR,MAAK,KAAqB,OAAlB,OAAO,QAAQ,KAAM;gBAAE,QAAQ;YAAM;QAC3E;IACJ;IAEA,6CAA6C;IAC7C,MAAM,wBAAwB,CAAC;QAC3B,mDAAmD;QACnD,MAAM,SAAS,IAAI;QAEnB,IAAI,SAAS,QAAQ,MAAM,OAAO,GAAG,CAAC,cAAc;YAChD;QACJ;QAEA,gCAAgC;QAChC,OAAO,GAAG,CAAC,aAAa,SAAS,QAAQ;QAEzC,wFAAwF;QACxF,OAAO,MAAM,CAAC;QAEd,+DAA+D;QAC/D,OAAO,OAAO,CAAC,AAAC,WAAkB,OAAR,MAAK,KAAqB,OAAlB,OAAO,QAAQ,KAAM;YAAE,QAAQ;QAAM;IAC3E;IAEA,yEAAyE;IACzE,MAAM,qBAAqB,CAAC;QACxB,gBAAgB;QAChB,sBAAsB;QACtB,4BAA4B;QAC5B,sBAAsB,OAAO,EAAE;IACnC;IAEA,wCAAwC;IACxC,MAAM,gBAA0C,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;YACnE,IAAI,OAAO,EAAE;YACb,qBAAO,4SAAC;gBAAK,WAAU;0BAAyB,OAAO,IAAI;;;;;;YAC3D,OAAO;QACX,CAAC;IAED,wCAAwC;IACxC,MAAM,2BAA2B,CAAC;QAC9B,gBAAgB,OAAO,KAAK;QAC5B,sBAAsB;QACtB,4BAA4B;QAC5B,sBAAsB,OAAO,KAAK,CAAC,EAAE;IACzC;IAEA,2BAA2B;IAC3B,MAAM,kBAAkB;QACpB,OAAO,IAAI,CAAC;IAChB;IAEA,2CAA2C;IAC3C,IAAI,aAAa;QACb,qBACI,4SAAC;YAAI,WAAU;;8BACX,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC,yIAAA,CAAA,SAAM;wBAAC,wBAAwB;;;;;;;;;;;8BAEpC,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;IAI/B;IAEA,yCAAyC;IACzC,IAAI,CAAC,mBAAmB,CAAC,aAAa;QAClC,2BAA2B;QAC3B,OAAO,IAAI,CAAC;QACZ,OAAO;IACX;IAEA,IAAI,SAAS;QACT,qBACI,4SAAC;YAAI,WAAU;;8BACX,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC,yIAAA,CAAA,SAAM;wBAAC,wBAAwB;;;;;;;;;;;8BAEpC,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;IAI/B;IAEA,IAAI,CAAC,QAAQ;QACT,qBACI,4SAAC;YAAI,WAAU;sBACX,cAAA,4SAAC;0BAAE;;;;;;;;;;;IAGf;IAEA,qBACI;;YAEK,gCACG,4SAAC;gBAAI,WAAU;0BACX,cAAA,4SAAC;oBAAE,WAAU;8BAAqB;;;;;;;;;;;0BAM1C,4SAAC;gBAAI,WAAU;0BACX,cAAA,4SAAC,yIAAA,CAAA,SAAM;oBACH,wBAAwB;oBACxB,SAAS;oBACT,cAAc;oBACd,gBAAgB;;;;;;;;;;;0BAGxB,4SAAC;gBAAI,WAAU;0BACX,cAAA,4SAAC;oBAAI,WAAU;8BACX,cAAA,4SAAC;;4BACI,QAAQ,MAAM,KAAK,mBAChB,4SAAC;gCAAI,WAAU;0CACX,cAAA,4SAAC;oCAAI,WAAU;;sDACX,4SAAC;4CAAG,WAAU;sDAA0B;;;;;;sDACxC,4SAAC;4CAAE,WAAU;sDAAgB;;;;;;;;;;;;;;;;;4BAKxC,QAAQ,MAAM,GAAG,KAAK,8BACnB;0CACK,+BACG,4SAAC;oCAAI,WAAU;8CACX,cAAA,4SAAC;wCAAI,WAAU;;;;;;;;;;2CAEnB,4BACA,4SAAC;oCAAI,WAAU;;sDACX,4SAAC;4CAAE,WAAU;sDAAqB;;;;;;sDAClC,4SAAC;4CACG,SAAS;gDACL,IAAI,cAAc;oDACd,mBAAmB,aAAa,EAAE;gDACtC;4CACJ;4CACA,WAAU;sDACb;;;;;;;;;;;yDAKL,4SAAC;oCAAI,WAAU;;wCAEV,8BACG,4SAAC;4CAAI,WAAU;sDACX,cAAA,4SAAC;gDAAI,WAAU;;kEACX,4SAAC;wDAAI,WAAU;;0EACX,4SAAC;gEACG,SAAS;gEACT,WAAU;0EAEV,cAAA,4SAAC,2SAAA,CAAA,cAAW;oEAAC,MAAM;;;;;;;;;;;0EAEvB,4SAAC;gEAAG,WAAU;0EACT,aAAa,IAAI;;;;;;;;;;;;oDAGzB,QAAQ,MAAM,GAAG,mBACd,4SAAC;wDACG,WAAU;wDACV,SAAS,IAAM,sBAAsB;kEACxC;;;;;;;;;;;;;;;;;sDASjB,4SAAC,uIAAA,CAAA,UAAc;4CACX,QAAQ;4CACR,SAAS,IAAM,sBAAsB;4CACrC,OAAM;4CACN,SAAS;4CACT,UAAU,EAAE,yBAAA,mCAAA,aAAc,EAAE;4CAC5B,UAAU;;;;;;wCAGb,QAAQ,MAAM,KAAK,kBAChB,4SAAC;4CAAI,WAAU;;8DACX,4SAAC;oDAAG,WAAU;8DAA0B;;;;;;8DACxC,4SAAC;oDAAE,WAAU;8DAAgB;;;;;;;;;;;mDAGjC,yCAAyC;sDACzC,4SAAC;4CAAI,WAAU;sDACV,QAAQ,MAAM,GAAG,mBACd,4SAAC;gDAAI,WAAU;0DACX,cAAA,4SAAC,0IAAA,CAAA,UAAiB;oDACd,aAAa,QAAQ,MAAM,GAAG,IAAI,KAAK,OAAO,CAAC,kBAAkB,CAAC,IAAI;oDACtE,SAAS;oDACT,UAAU,OAAO,EAAE,CAAC,QAAQ;oDAC5B,QAAQ,EAAE,yBAAA,mCAAA,aAAc,EAAE,CAAC,QAAQ;oDACnC,YAAY;oDACZ,YAAY;wDAAC;wDAAK;qDAAI;oDACtB,kBAAkB;oDAClB,sBAAsB;oDACtB,SAAS;oDACT,gBAAgB;oDAChB,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAe/E;GAnbwB;;QACL,oPAAA,CAAA,YAAS;QACH,oPAAA,CAAA,kBAAe;QAKsB,qHAAA,CAAA,UAAO;QAC7C,oHAAA,CAAA,aAAU;;;KARV","debugId":null}},
    {"offset": {"line": 8647, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/app/school/%5Bid%5D/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useParams } from \"next/navigation\";\r\nimport ClientSchoolLearnerView from \"./ClientSchoolLearnerView\";\r\n\r\nexport default function SchoolPage() {\r\n    const params = useParams();\r\n    const id = params?.id as string;\r\n\r\n    return <ClientSchoolLearnerView slug={id} />;\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKe,SAAS;;IACpB,MAAM,SAAS,CAAA,GAAA,oPAAA,CAAA,YAAS,AAAD;IACvB,MAAM,KAAK,mBAAA,6BAAA,OAAQ,EAAE;IAErB,qBAAO,4SAAC,6JAAA,CAAA,UAAuB;QAAC,MAAM;;;;;;AAC1C;GALwB;;QACL,oPAAA,CAAA,YAAS;;;KADJ","debugId":null}}]
}