{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/components/LearnerQuizView.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport \"@blocknote/core/fonts/inter.css\";\r\nimport { useState, useCallback, useRef, useEffect, useMemo } from \"react\";\r\nimport { ChevronLeft, ChevronRight, MoreVertical, Maximize2, Minimize2, MessageCircle, X, Columns, LayoutGrid, SplitSquareVertical, CheckCircle, Eye, EyeOff } from \"lucide-react\";\r\nimport BlockNoteEditor from \"./BlockNoteEditor\";\r\nimport { QuizQuestion, ChatMessage, ScorecardItem, AIResponse, QuizQuestionConfig } from \"../types/quiz\";\r\nimport ChatView, { CodeViewState, ChatViewHandle } from './ChatView';\r\nimport ScorecardView from './ScorecardView';\r\nimport ConfirmationDialog from './ConfirmationDialog';\r\nimport { getKnowledgeBaseContent } from './QuizEditor';\r\nimport { CodePreview } from './CodeEditorView';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { safeLocalStorage } from \"@/lib/utils/localStorage\";\r\n\r\n// Add interface for mobile view mode\r\nexport interface MobileViewMode {\r\n    mode: 'question-full' | 'chat-full' | 'split';\r\n}\r\n\r\nexport interface LearnerQuizViewProps {\r\n    questions: QuizQuestion[];\r\n    onSubmitAnswer?: (questionId: string, answer: string) => void;\r\n    isDarkMode?: boolean;\r\n    className?: string;\r\n    viewOnly?: boolean;\r\n    currentQuestionId?: string;\r\n    onQuestionChange?: (questionId: string) => void;\r\n    userId?: string;\r\n    isTestMode?: boolean;\r\n    taskId?: string;\r\n    completedQuestionIds?: Record<string, boolean>;\r\n    onAiRespondingChange?: (isResponding: boolean) => void;\r\n    onMobileViewChange?: (mode: MobileViewMode) => void;\r\n    isAdminView?: boolean;\r\n}\r\n\r\nexport default function LearnerQuizView({\r\n    questions = [],\r\n    onSubmitAnswer,\r\n    isDarkMode = true,\r\n    className = \"\",\r\n    viewOnly = false,\r\n    currentQuestionId,\r\n    onQuestionChange,\r\n    userId = '',\r\n    isTestMode = false,\r\n    taskId = '',\r\n    completedQuestionIds: initialCompletedQuestionIds = {},\r\n    onAiRespondingChange,\r\n    onMobileViewChange,\r\n    isAdminView = false,\r\n}: LearnerQuizViewProps) {\r\n    // Constant message for exam submission confirmation\r\n    const EXAM_CONFIRMATION_MESSAGE = \"Thank you for your submission. We will review it shortly\";\r\n\r\n    // Add state for tracking view mode\r\n    const [showLearnerView, setShowLearnerView] = useState(false);\r\n\r\n    // Current question index\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n    // Update current question index when currentQuestionId changes\r\n    useEffect(() => {\r\n        if (currentQuestionId && questions.length > 0) {\r\n            const index = questions.findIndex(q => q.id === currentQuestionId);\r\n            if (index !== -1) {\r\n                setCurrentQuestionIndex(index);\r\n                // Reset to chat view when changing questions\r\n                setIsViewingScorecard(false);\r\n            }\r\n        }\r\n    }, [currentQuestionId, questions]);\r\n\r\n    // Ensure we have valid questions\r\n    const validQuestions = useMemo(() => {\r\n        // Don't filter out any questions, just convert format if needed\r\n        return (questions || []).map(q => {\r\n            // If the question is null or undefined, return it with default empty values\r\n            if (!q) {\r\n                return {\r\n                    id: `question-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                    content: [],\r\n                    config: {\r\n                        inputType: 'text',\r\n                        responseType: 'chat',\r\n                        questionType: 'objective',\r\n                        correctAnswer: [],\r\n                        audioMaxDuration: 120, // Default to 2 minutes\r\n                        scorecardData: undefined,\r\n                        codingLanguages: [] // Default code language\r\n                    }\r\n                };\r\n            }\r\n\r\n            // If the question already has the right format, use it as is\r\n            if (q.content && Array.isArray(q.content)) {\r\n                // Ensure config has all required properties with defaults\r\n                const completeConfig = {\r\n                    ...q.config,\r\n                    inputType: q.config?.inputType || 'text',\r\n                    responseType: q.config?.responseType,\r\n                    questionType: q.config?.questionType,\r\n                    correctAnswer: q.config?.correctAnswer || [],\r\n                    audioMaxDuration: q.config?.audioMaxDuration || 120,\r\n                    scorecardData: q.config?.scorecardData,\r\n                    codingLanguages: q.config?.codingLanguages || [] // Ensure code language is set\r\n                };\r\n                return {\r\n                    ...q,\r\n                    config: completeConfig\r\n                };\r\n            }\r\n\r\n            // Handle API format where content might be in 'blocks' property\r\n            if ((q as any).blocks && Array.isArray((q as any).blocks)) {\r\n                const config = q.config || {};\r\n                return {\r\n                    id: q.id || `question-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                    content: (q as any).blocks,\r\n                    config: {\r\n                        ...config,\r\n                        inputType: config.inputType || 'text',\r\n                        responseType: config.responseType,\r\n                        questionType: config.questionType,\r\n                        correctAnswer: config.correctAnswer || [],\r\n                        audioMaxDuration: config.audioMaxDuration || 120,\r\n                        scorecardData: config.scorecardData,\r\n                        codingLanguages: config.codingLanguages || [] // Ensure code language is set\r\n                    }\r\n                };\r\n            }\r\n\r\n            // Return a default structure for any other case\r\n            const config = q.config || {};\r\n            return {\r\n                id: q.id || `question-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                content: [],\r\n                config: {\r\n                    ...config,\r\n                    inputType: config.inputType || 'text',\r\n                    responseType: config.responseType,\r\n                    questionType: config.questionType,\r\n                    correctAnswer: config.correctAnswer || [],\r\n                    audioMaxDuration: config.audioMaxDuration || 120,\r\n                    scorecardData: config.scorecardData,\r\n                    codingLanguages: config.codingLanguages || [] // Ensure code language is set\r\n                }\r\n            };\r\n        });\r\n    }, [questions]);\r\n\r\n    // Current answer input\r\n    const [currentAnswer, setCurrentAnswer] = useState(\"\");\r\n\r\n    // State to track if an answer is being submitted\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    // Modify the state to track chat history per question\r\n    const [chatHistories, setChatHistories] = useState<Record<string, ChatMessage[]>>({});\r\n\r\n    // State to track if AI is responding\r\n    const [isAiResponding, setIsAiResponding] = useState(false);\r\n\r\n    // State to track if chat history has been loaded\r\n    const [isChatHistoryLoaded, setIsChatHistoryLoaded] = useState(false);\r\n\r\n    // State to track if we should show the preparing report button\r\n    const [showPreparingReport, setShowPreparingReport] = useState(false);\r\n\r\n    // New state to track if we're viewing a scorecard\r\n    const [isViewingScorecard, setIsViewingScorecard] = useState(false);\r\n\r\n    // New state to track which scorecard we're viewing\r\n    const [activeScorecard, setActiveScorecard] = useState<ScorecardItem[]>([]);\r\n\r\n    // Add state to remember chat scroll position\r\n    const [chatScrollPosition, setChatScrollPosition] = useState(0);\r\n\r\n    // Add state for navigation confirmation dialog\r\n    const [showNavigationConfirmation, setShowNavigationConfirmation] = useState(false);\r\n    const [pendingNavigation, setPendingNavigation] = useState<'next' | 'prev' | null>(null);\r\n\r\n    // Reference to the input element to maintain focus\r\n    const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\r\n\r\n    // Reference to the chat container for scrolling\r\n    const chatContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Add a reference for the scorecard container\r\n    const scorecardContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Reference to the ChatView component\r\n    const chatViewRef = useRef<ChatViewHandle>(null);\r\n\r\n    // Store the current answer in a ref to avoid re-renders\r\n    const currentAnswerRef = useRef(currentAnswer);\r\n\r\n    // Store the handleSubmitAnswer function in a ref to avoid circular dependencies\r\n    const handleSubmitAnswerRef = useRef<() => void>(() => { });\r\n\r\n    // Use a single state to track completed/submitted questions - initialize with props\r\n    const [completedQuestionIds, setCompletedQuestionIds] = useState<Record<string, boolean>>(initialCompletedQuestionIds);\r\n\r\n    // Update completedQuestionIds when the prop changes\r\n    useEffect(() => {\r\n        // To avoid infinite update loops, only update if there are actual differences\r\n        const hasChanges = Object.keys(initialCompletedQuestionIds).some(id =>\r\n            initialCompletedQuestionIds[id] !== completedQuestionIds[id]\r\n        );\r\n\r\n        if (hasChanges) {\r\n            setCompletedQuestionIds(prev => ({\r\n                ...prev,\r\n                ...initialCompletedQuestionIds\r\n            }));\r\n        }\r\n    }, [initialCompletedQuestionIds, completedQuestionIds]);\r\n\r\n    // State to track which questions are currently being submitted (waiting for API response)\r\n    const [pendingSubmissionQuestionIds, setPendingSubmissionQuestionIds] = useState<Record<string, boolean>>({});\r\n\r\n    // Update the ref when the state changes\r\n    useEffect(() => {\r\n        currentAnswerRef.current = currentAnswer;\r\n    }, [currentAnswer]);\r\n\r\n    // Effect to focus the input when the component mounts\r\n    useEffect(() => {\r\n        // Focus the input field when the component mounts\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, []);\r\n\r\n    // Reset chat history loaded state when taskId changes\r\n    useEffect(() => {\r\n        if (taskId) {\r\n            setIsChatHistoryLoaded(false);\r\n        }\r\n    }, [taskId]);\r\n\r\n    // Get the current question's chat history\r\n    const currentChatHistory = useMemo(() => {\r\n        const currentQuestionId = validQuestions[currentQuestionIndex]?.id || '';\r\n        const history = chatHistories[currentQuestionId] || [];\r\n\r\n        // For exam questions with existing chat history, we need to filter what's shown\r\n        if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam') {\r\n            // Find any user messages in the history\r\n            const userMessages = history.filter(msg => msg.sender === 'user');\r\n\r\n            // Check if this question has a user message and is properly submitted (not currently in the submission process)\r\n            const isSubmitted = completedQuestionIds[currentQuestionId] && !pendingSubmissionQuestionIds[currentQuestionId];\r\n\r\n            // If we have user messages and the question is already submitted (not pending)\r\n            if (userMessages.length > 0 && isSubmitted) {\r\n                // Get the last user message\r\n                const lastUserMessage = userMessages[userMessages.length - 1];\r\n\r\n                // If showing learner view, return only the last user message and confirmation\r\n                if (showLearnerView) {\r\n                    return [\r\n                        lastUserMessage,\r\n                        {\r\n                            id: `ai-confirmation-${currentQuestionId}`,\r\n                            content: EXAM_CONFIRMATION_MESSAGE,\r\n                            sender: 'ai',\r\n                            timestamp: new Date(),\r\n                            messageType: 'text',\r\n                            audioData: undefined,\r\n                            scorecard: []\r\n                        }\r\n                    ];\r\n                }\r\n\r\n                // Otherwise return the full history to show AI feedback\r\n                return history;\r\n            }\r\n        }\r\n\r\n        return history;\r\n    }, [chatHistories, currentQuestionIndex, validQuestions, completedQuestionIds, pendingSubmissionQuestionIds, showLearnerView]);\r\n\r\n    // Get the last user message for the current question\r\n    const getLastUserMessage = useMemo(() => {\r\n        // Filter for user messages only\r\n        const userMessages = currentChatHistory.filter(msg => msg.sender === 'user');\r\n        // Return the last user message if exists\r\n        return userMessages.length > 0 ? userMessages[userMessages.length - 1] : null;\r\n    }, [currentChatHistory]);\r\n\r\n    // Fetch chat history from backend when component mounts or task changes\r\n    useEffect(() => {\r\n        // Skip if we're in test mode or if userId is not available or if we've already loaded chat history\r\n        // Also skip if taskId is not provided\r\n        if (isTestMode || !userId || isChatHistoryLoaded || !taskId) {\r\n            return;\r\n        }\r\n\r\n        const fetchChatHistory = async () => {\r\n            if (!validQuestions || validQuestions.length === 0) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Make API call to fetch chat history using the provided taskId\r\n                const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/chat/user/${userId}/task/${taskId}`);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch chat history: ${response.status}`);\r\n                }\r\n\r\n                const chatData = await response.json();\r\n\r\n                // Organize chat messages by question ID\r\n                const chatHistoryByQuestion: Record<string, ChatMessage[]> = {};\r\n                // Track which questions had user messages\r\n                const questionsWithResponses: Record<string, boolean> = {};\r\n\r\n                // Process messages sequentially with Promise.all for audio messages\r\n                await Promise.all(chatData.map(async (message: any) => {\r\n                    const questionId = message.question_id.toString();\r\n                    if (!chatHistoryByQuestion[questionId]) {\r\n                        chatHistoryByQuestion[questionId] = [];\r\n                    }\r\n\r\n                    // For audio messages, fetch the actual audio data\r\n                    let audioData = undefined;\r\n                    if (message.response_type === 'audio') {\r\n                        try {\r\n                            // Get presigned URL\r\n                            const file_uuid = message.content;\r\n                            const presignedResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/file/presigned-url/get?uuid=${file_uuid}&file_extension=wav`, {\r\n                                method: 'GET',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                            });\r\n\r\n                            let audioResponse = null;\r\n\r\n                            if (!presignedResponse.ok) {\r\n                                audioResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/file/download-local/?uuid=${message.content}&file_extension=wav`);\r\n                                if (!audioResponse.ok) {\r\n                                    throw new Error('Failed to fetch audio data from backend');\r\n                                }\r\n                            }\r\n                            else {\r\n                                const { url: presignedUrl } = await presignedResponse.json();\r\n                                // Fetch the audio data using the presigned URL\r\n                                audioResponse = await fetch(presignedUrl);\r\n                                if (!audioResponse.ok) {\r\n                                    throw new Error('Failed to fetch audio data from presigned URL');\r\n                                }\r\n                            }\r\n\r\n                            // Convert the audio data to base64\r\n                            const audioBlob = await audioResponse.blob();\r\n                            audioData = await blobToBase64(audioBlob);\r\n                        } catch (error) {\r\n                            console.error('Error fetching audio data:', error);\r\n                        }\r\n                    }\r\n\r\n                    // Convert API message to ChatMessage format\r\n                    const chatMessage: ChatMessage = {\r\n                        id: `${message.role}-${message.id}`,\r\n                        content: message.content,\r\n                        sender: message.role === 'user' ? 'user' : 'ai',\r\n                        timestamp: new Date(message.created_at),\r\n                        messageType: message.response_type,\r\n                        audioData: audioData,\r\n                        scorecard: []\r\n                    };\r\n\r\n                    // If this is an AI message, try to parse the content as JSON\r\n                    if (message.role === 'assistant') {\r\n                        try {\r\n                            // Try to parse the content as JSON\r\n                            const contentObj = JSON.parse(message.content);\r\n\r\n                            // Extract the feedback field to display as the message content\r\n                            if (contentObj && contentObj.feedback) {\r\n                                chatMessage.content = contentObj.feedback;\r\n                            }\r\n\r\n                            // Extract scorecard if available\r\n                            if (contentObj && contentObj.scorecard) {\r\n                                chatMessage.scorecard = contentObj.scorecard;\r\n                            }\r\n\r\n                            // Extract is_correct if available\r\n                            if (contentObj && contentObj.is_correct !== undefined) {\r\n                                chatMessage.is_correct = contentObj.is_correct;\r\n                            }\r\n                        } catch (error) {\r\n                            // If parsing fails, assume it's the old format (plain text)\r\n                            // Keep the original content as is - it's already set in chatMessage\r\n                        }\r\n                    }\r\n\r\n                    // Track questions with user responses for exam questions\r\n                    if (message.role === 'user') {\r\n                        questionsWithResponses[questionId] = true;\r\n                    }\r\n\r\n                    chatHistoryByQuestion[questionId].push(chatMessage);\r\n                }));\r\n\r\n                // Sort chat history by timestamp for each question to ensure correct order\r\n                Object.keys(chatHistoryByQuestion).forEach(questionId => {\r\n                    chatHistoryByQuestion[questionId].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\r\n                });\r\n\r\n                // Update chat histories state\r\n                setChatHistories(chatHistoryByQuestion);\r\n\r\n                // For exam questions with responses, mark them as completed\r\n                if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam') {\r\n                    setCompletedQuestionIds(prev => ({\r\n                        ...prev,\r\n                        ...questionsWithResponses\r\n                    }));\r\n\r\n                    // Clear any pending submissions for these questions since they're loaded from history\r\n                    setPendingSubmissionQuestionIds(prev => {\r\n                        const newState = { ...prev };\r\n                        Object.keys(questionsWithResponses).forEach(id => {\r\n                            delete newState[id];\r\n                        });\r\n                        return newState;\r\n                    });\r\n                }\r\n\r\n                setIsChatHistoryLoaded(true);\r\n\r\n            } catch (error) {\r\n                console.error(\"Error fetching chat history:\", error);\r\n            }\r\n        };\r\n\r\n        fetchChatHistory();\r\n    }, [isTestMode, userId, validQuestions, isChatHistoryLoaded, taskId]);\r\n\r\n    // Helper function to convert Blob to base64\r\n    const blobToBase64 = (blob: Blob): Promise<string> => {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                const base64String = reader.result as string;\r\n                // Extract the base64 data portion (remove \"data:audio/wav;base64,\" prefix)\r\n                const base64Data = base64String.split(',')[1];\r\n                resolve(base64Data);\r\n            };\r\n            reader.onerror = reject;\r\n            reader.readAsDataURL(blob);\r\n        });\r\n    };\r\n\r\n    // Effect to focus the input when the question changes\r\n    useEffect(() => {\r\n        // Ensure the input is focused after a short delay to allow the DOM to fully render\r\n        const timer = setTimeout(() => {\r\n            if (inputRef.current) {\r\n                inputRef.current.focus();\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [currentQuestionIndex]);\r\n\r\n    // Effect to log and validate questions when they change\r\n    useEffect(() => {\r\n        if (validQuestions.length > 0 && currentQuestionIndex >= validQuestions.length) {\r\n            setCurrentQuestionIndex(0);\r\n        }\r\n    }, [questions, validQuestions, currentQuestionIndex]);\r\n\r\n    // Effect to scroll to the bottom of the chat when new messages are added\r\n    useEffect(() => {\r\n        if (chatContainerRef.current) {\r\n            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n        }\r\n    }, [chatHistories]);\r\n\r\n    // Navigate to previous question\r\n    const goToPreviousQuestion = useCallback(() => {\r\n        // If AI is responding, show confirmation dialog\r\n        if (isAiResponding) {\r\n            setPendingNavigation('prev');\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        // Otherwise proceed with navigation\r\n        executeGoToPreviousQuestion();\r\n    }, [currentQuestionIndex, onQuestionChange, validQuestions, isAiResponding]);\r\n\r\n    // Execute navigation to previous question without checks\r\n    const executeGoToPreviousQuestion = useCallback(() => {\r\n        if (currentQuestionIndex > 0) {\r\n            const newIndex = currentQuestionIndex - 1;\r\n            setCurrentQuestionIndex(newIndex);\r\n            setCurrentAnswer(\"\"); // Reset answer when changing questions\r\n            // Reset to chat view when changing questions\r\n            setIsViewingScorecard(false);\r\n\r\n            // Always notify parent component about question change\r\n            if (onQuestionChange && validQuestions[newIndex]) {\r\n                onQuestionChange(validQuestions[newIndex].id);\r\n            }\r\n        }\r\n    }, [currentQuestionIndex, onQuestionChange, validQuestions]);\r\n\r\n    // Navigate to next question\r\n    const goToNextQuestion = useCallback(() => {\r\n        // If AI is responding, show confirmation dialog\r\n        if (isAiResponding) {\r\n            setPendingNavigation('next');\r\n            setShowNavigationConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        // Otherwise proceed with navigation\r\n        executeGoToNextQuestion();\r\n    }, [currentQuestionIndex, validQuestions.length, onQuestionChange, validQuestions, isAiResponding]);\r\n\r\n    // Execute navigation to next question without checks\r\n    const executeGoToNextQuestion = useCallback(() => {\r\n        if (currentQuestionIndex < validQuestions.length - 1) {\r\n            const newIndex = currentQuestionIndex + 1;\r\n            setCurrentQuestionIndex(newIndex);\r\n            setCurrentAnswer(\"\"); // Reset answer when changing questions\r\n            // Reset to chat view when changing questions\r\n            setIsViewingScorecard(false);\r\n\r\n            // Always notify parent component about question change\r\n            if (onQuestionChange && validQuestions[newIndex]) {\r\n                onQuestionChange(validQuestions[newIndex].id);\r\n            }\r\n        }\r\n    }, [currentQuestionIndex, validQuestions.length, onQuestionChange, validQuestions]);\r\n\r\n    // Handle navigation confirmation\r\n    const handleNavigationConfirm = useCallback(() => {\r\n        setShowNavigationConfirmation(false);\r\n\r\n        // Execute the navigation based on pending action\r\n        if (pendingNavigation === 'next') {\r\n            executeGoToNextQuestion();\r\n        } else if (pendingNavigation === 'prev') {\r\n            executeGoToPreviousQuestion();\r\n        }\r\n\r\n        setPendingNavigation(null);\r\n    }, [executeGoToNextQuestion, executeGoToPreviousQuestion, pendingNavigation]);\r\n\r\n    // Handle navigation cancellation\r\n    const handleNavigationCancel = useCallback(() => {\r\n        setShowNavigationConfirmation(false);\r\n        setPendingNavigation(null);\r\n    }, []);\r\n\r\n    // Handle input change with focus preservation\r\n    const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const newValue = e.target.value;\r\n        setCurrentAnswer(newValue);\r\n        currentAnswerRef.current = newValue;\r\n    }, []); // No dependencies to ensure stability\r\n\r\n    // Function to store chat history in backend\r\n    const storeChatHistory = useCallback(async (questionId: string, userMessage: ChatMessage, aiResponse: AIResponse) => {\r\n        if (!userId || isTestMode) return;\r\n\r\n        // For quiz questions, use the completedQuestionIds state\r\n        const userIsSolved = completedQuestionIds[questionId] || false;\r\n\r\n        // For AI messages, check if it contains feedback about correctness\r\n        // We'll extract the is_correct value from the message if it exists\r\n        let aiIsSolved = false;\r\n        try {\r\n            // Try to parse the AI message as JSON to see if it contains is_correct\r\n            if (aiResponse && typeof aiResponse.is_correct === 'boolean') {\r\n                aiIsSolved = aiResponse.is_correct;\r\n            }\r\n        } catch (e) {\r\n            console.error('Error parsing AI message:', e);\r\n        }\r\n\r\n        // Get the response type from the current question config\r\n        const currentQuestion = validQuestions.find(q => q.id === questionId);\r\n\r\n        // Create content based on the response type\r\n        let contentObj = {};\r\n        if (currentQuestion?.config?.questionType === 'subjective') {\r\n            // For report type, include both feedback and scorecard\r\n            contentObj = {\r\n                feedback: aiResponse.feedback,\r\n                scorecard: aiResponse.scorecard || []\r\n            };\r\n        } else {\r\n            // For chat type or any other type, just include feedback\r\n            contentObj = {\r\n                feedback: aiResponse.feedback,\r\n                is_correct: aiResponse.is_correct\r\n            };\r\n        }\r\n        let aiContent = JSON.stringify(contentObj);\r\n\r\n        const messages = [\r\n            {\r\n                role: \"user\",\r\n                content: userMessage.content,\r\n                response_type: userMessage.messageType,\r\n                audio_data: userMessage.messageType === 'audio' ? userMessage.audioData : undefined,\r\n                created_at: userMessage.timestamp\r\n            },\r\n            {\r\n                role: \"assistant\",\r\n                content: aiContent,\r\n                response_type: null,\r\n                created_at: new Date()\r\n            }\r\n        ];\r\n\r\n        const isComplete = currentQuestion?.config?.responseType === 'exam' ? true : !userIsSolved && aiIsSolved;\r\n\r\n        const requestBody = {\r\n            user_id: parseInt(userId),\r\n            question_id: parseInt(questionId),\r\n            messages: messages,\r\n            is_complete: isComplete\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/chat/`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to store chat history');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error storing chat history:', error);\r\n        }\r\n    }, [userId, isTestMode, completedQuestionIds, validQuestions]);\r\n\r\n    // Process a user response (shared logic between text and audio submission)\r\n    const processUserResponse = useCallback(\r\n        async (\r\n            responseContent: string,\r\n            responseType: 'text' | 'audio' | 'code' = 'text',\r\n            audioData?: string\r\n        ) => {\r\n            if (!validQuestions || validQuestions.length === 0 || currentQuestionIndex >= validQuestions.length) {\r\n                return;\r\n            }\r\n\r\n            const currentQuestionId = validQuestions[currentQuestionIndex].id;\r\n\r\n            // Set submitting state to true\r\n            setIsSubmitting(true);\r\n\r\n            // Create the user message object\r\n            const userMessage: ChatMessage = {\r\n                id: `user-${Date.now()}`,\r\n                content: responseContent,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                messageType: responseType,\r\n                audioData: audioData,\r\n                scorecard: []\r\n            };\r\n\r\n            // Handle code type message differently for UI display\r\n            // Only set messageType to 'code' when it actually comes from the code editor\r\n            // or when the responseType is explicitly set to 'code'\r\n            if (responseType === 'code') {\r\n                userMessage.messageType = 'code';\r\n            }\r\n            // Don't automatically convert text messages to code messages for coding questions\r\n\r\n            // Immediately add the user's message to chat history\r\n            setChatHistories(prev => ({\r\n                ...prev,\r\n                [currentQuestionId]: [...(prev[currentQuestionId] || []), userMessage]\r\n            }));\r\n\r\n            // Clear the input field after submission (only for text input)\r\n            if (responseType === 'text' || responseType === 'code') {\r\n                setCurrentAnswer(\"\");\r\n                currentAnswerRef.current = \"\";\r\n\r\n                // Focus the input field again\r\n                if (inputRef.current) {\r\n                    inputRef.current.focus();\r\n                }\r\n            }\r\n\r\n            // Special case: For exam questions in test mode, don't make the API call\r\n            // instead show confirmation immediately\r\n            if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam' && isTestMode) {\r\n                // Mark this question as completed\r\n                setCompletedQuestionIds(prev => ({\r\n                    ...prev,\r\n                    [currentQuestionId]: true\r\n                }));\r\n\r\n                // Call the onSubmitAnswer callback to mark completion\r\n                if (onSubmitAnswer) {\r\n                    onSubmitAnswer(currentQuestionId, responseType === 'audio' ? audioData || '' : responseContent);\r\n                }\r\n\r\n                // Add confirmation message immediately\r\n                const confirmationMessage: ChatMessage = {\r\n                    id: `ai-${Date.now()}`,\r\n                    content: EXAM_CONFIRMATION_MESSAGE,\r\n                    sender: 'ai',\r\n                    timestamp: new Date(),\r\n                    messageType: 'text',\r\n                    audioData: undefined\r\n                };\r\n\r\n                // Update chat history with confirmation message\r\n                setChatHistories(prev => ({\r\n                    ...prev,\r\n                    [currentQuestionId]: [...(prev[currentQuestionId] || []), confirmationMessage]\r\n                }));\r\n\r\n                // Reset states\r\n                setIsSubmitting(false);\r\n                return; // Skip the API call completely\r\n            }\r\n\r\n            // For exam questions, mark as pending submission\r\n            if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam') {\r\n                setPendingSubmissionQuestionIds(prev => ({\r\n                    ...prev,\r\n                    [currentQuestionId]: true\r\n                }));\r\n            }\r\n\r\n            // Show the AI typing animation\r\n            setIsAiResponding(true);\r\n\r\n            // Prepare the request body based on whether this is a teacher testing or a real learner\r\n            let requestBody;\r\n\r\n            if (isTestMode) {\r\n                // In teacher testing mode, send chat_history and question data\r\n                // Format the chat history for the current question\r\n                const formattedChatHistory = (chatHistories[currentQuestionId] || []).map(msg => ({\r\n                    role: msg.sender === 'user' ? 'user' : 'assistant',\r\n                    content: msg.sender === 'user' ? msg.content :\r\n                        validQuestions[currentQuestionIndex].config.questionType === 'objective' ? JSON.stringify({ feedback: msg.content }) : JSON.stringify({ feedback: msg.content, scorecard: msg.scorecard }),\r\n                    response_type: msg.messageType,\r\n                    audio_data: msg.audioData\r\n                }));\r\n\r\n                let scorecardId = undefined;\r\n                if (validQuestions[currentQuestionIndex].config.questionType === 'subjective') {\r\n                    scorecardId = validQuestions[currentQuestionIndex].config.scorecardData?.id\r\n                }\r\n\r\n                // Create the request body for teacher testing mode\r\n                requestBody = {\r\n                    user_response: responseType === 'audio' ? audioData : responseContent,\r\n                    ...(responseType === 'audio' && { response_type: \"audio\" }),\r\n                    ...(responseType === 'code' && { response_type: \"code\" }),\r\n                    chat_history: formattedChatHistory,\r\n                    question: {\r\n                        \"blocks\": validQuestions[currentQuestionIndex].content,\r\n                        \"response_type\": validQuestions[currentQuestionIndex].config.responseType,\r\n                        \"answer\": validQuestions[currentQuestionIndex].config.correctAnswer,\r\n                        \"type\": validQuestions[currentQuestionIndex].config.questionType,\r\n                        \"input_type\": validQuestions[currentQuestionIndex].config.inputType,\r\n                        \"scorecard_id\": scorecardId,\r\n                        \"coding_languages\": validQuestions[currentQuestionIndex].config.codingLanguages,\r\n                        \"context\": getKnowledgeBaseContent(validQuestions[currentQuestionIndex].config as QuizQuestionConfig)\r\n                    },\r\n                    user_id: userId,\r\n                    task_id: taskId,\r\n                    task_type: 'quiz'\r\n                };\r\n            } else {\r\n                // In normal mode, send question_id and user_id\r\n                requestBody = {\r\n                    user_response: responseType === 'audio' ? audioData : responseContent,\r\n                    response_type: responseType,\r\n                    question_id: currentQuestionId,\r\n                    user_id: userId,\r\n                    task_id: taskId,\r\n                    task_type: 'quiz'\r\n                };\r\n            }\r\n\r\n            // Create a message ID for the streaming response\r\n            const aiMessageId = `ai-${Date.now()}`;\r\n\r\n            // Create an initial empty message for streaming content\r\n            const initialAiMessage: ChatMessage = {\r\n                id: aiMessageId,\r\n                content: \"\",\r\n                sender: 'ai',\r\n                timestamp: new Date(),\r\n                messageType: 'text',\r\n                audioData: undefined,\r\n                scorecard: []\r\n            };\r\n\r\n            let isCorrect = false;\r\n\r\n            // Track if we've received any feedback\r\n            let receivedAnyFeedback = false;\r\n\r\n            // For audio responses, get a presigned URL to upload the audio file\r\n            if (responseType === 'audio' && audioData) {\r\n                let presigned_url = '';\r\n                let file_uuid = '';\r\n\r\n                try {\r\n                    // First, get a presigned URL for the audio file\r\n                    const presignedUrlResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/file/presigned-url/create`, {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            content_type: \"audio/wav\"\r\n                        })\r\n                    });\r\n\r\n                    if (!presignedUrlResponse.ok) {\r\n                        throw new Error('Failed to get presigned URL');\r\n                    }\r\n\r\n                    const presignedData = await presignedUrlResponse.json();\r\n                    presigned_url = presignedData.presigned_url;\r\n                    file_uuid = presignedData.file_uuid;\r\n                } catch (error) {\r\n                    console.error(\"Error getting presigned URL for audio:\", error);\r\n                }\r\n\r\n                // Convert base64 audio data to a Blob\r\n                const binaryData = atob(audioData);\r\n                const arrayBuffer = new ArrayBuffer(binaryData.length);\r\n                const uint8Array = new Uint8Array(arrayBuffer);\r\n\r\n                for (let i = 0; i < binaryData.length; i++) {\r\n                    uint8Array[i] = binaryData.charCodeAt(i);\r\n                }\r\n\r\n                // Create audio blob with WAV format\r\n                const audioBlob = new Blob([uint8Array], { type: 'audio/wav' });\r\n\r\n                if (!presigned_url) {\r\n                    // If we couldn't get a presigned URL, try direct upload to the backend\r\n                    try {\r\n                        console.log(\"Attempting direct upload to backend\");\r\n\r\n                        // Create FormData for the file upload\r\n                        const formData = new FormData();\r\n                        formData.append('file', audioBlob, 'audio.wav');\r\n                        formData.append('content_type', 'audio/wav');\r\n\r\n                        // Upload directly to the backend\r\n                        const uploadResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/file/upload-local`, {\r\n                            method: 'POST',\r\n                            body: formData\r\n                        });\r\n\r\n                        if (!uploadResponse.ok) {\r\n                            throw new Error(`Failed to upload audio to backend: ${uploadResponse.status}`);\r\n                        }\r\n\r\n                        const uploadData = await uploadResponse.json();\r\n                        file_uuid = uploadData.file_uuid;\r\n\r\n                        console.log('Audio file uploaded successfully to backend');\r\n                        // Update the request body with the file information\r\n                        requestBody.user_response = file_uuid || '';\r\n                        userMessage.content = file_uuid || '';\r\n                    } catch (error) {\r\n                        console.error('Error with direct upload to backend:', error);\r\n                        throw error;\r\n                    }\r\n                } else {\r\n                    // Upload the audio file to S3 using the presigned URL\r\n                    try {\r\n                        // Upload to S3 using the presigned URL with WAV content type\r\n                        const uploadResponse = await fetch(presigned_url, {\r\n                            method: 'PUT',\r\n                            body: audioBlob,\r\n                            headers: {\r\n                                'Content-Type': 'audio/wav'\r\n                            }\r\n                        });\r\n\r\n                        if (!uploadResponse.ok) {\r\n                            throw new Error(`Failed to upload audio to S3: ${uploadResponse.status}`);\r\n                        }\r\n\r\n                        console.log('Audio file uploaded successfully to S3');\r\n                        // Update the request body with the file information\r\n                        requestBody.user_response = file_uuid;\r\n                        userMessage.content = file_uuid || '';\r\n                    } catch (error) {\r\n                        console.error('Error uploading audio to S3:', error);\r\n                        throw error;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Call the API with the appropriate request body for streaming response\r\n            fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/ai/chat`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            })\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok');\r\n                    }\r\n\r\n                    // Get the response reader for streaming for both exam and quiz\r\n                    const reader = response.body?.getReader();\r\n\r\n                    if (!reader) {\r\n                        throw new Error('Failed to get response reader');\r\n                    }\r\n\r\n                    // Function to process the streaming chunks\r\n                    const processStream = async () => {\r\n                        try {\r\n                            let accumulatedFeedback = \"\";\r\n                            // Add a variable to collect the complete scorecard\r\n                            let completeScorecard = [];\r\n                            // Add a flag to track if streaming is done\r\n                            let streamingComplete = false;\r\n\r\n                            while (true) {\r\n                                const { done, value } = await reader.read();\r\n\r\n                                if (done) {\r\n                                    streamingComplete = true;\r\n                                    break;\r\n                                }\r\n\r\n                                // Convert the chunk to text\r\n                                const chunk = new TextDecoder().decode(value);\r\n\r\n                                // Split by newlines to handle multiple JSON objects in a single chunk\r\n                                const jsonLines = chunk.split('\\n').filter(line => line.trim());\r\n\r\n                                for (const line of jsonLines) {\r\n                                    try {\r\n                                        const data = JSON.parse(line);\r\n\r\n                                        // Handle feedback updates\r\n                                        if (data.feedback) {\r\n                                            // Append to accumulated feedback\r\n                                            accumulatedFeedback = data.feedback;\r\n\r\n                                            // For practice questions, update the UI as we receive chunks\r\n                                            if (validQuestions[currentQuestionIndex]?.config?.responseType === 'chat') {\r\n                                                // If this is the first feedback chunk we've received\r\n                                                if (!receivedAnyFeedback) {\r\n                                                    receivedAnyFeedback = true;\r\n\r\n                                                    // Stop showing the animation\r\n                                                    setIsAiResponding(false);\r\n\r\n                                                    // Add the AI message to chat history now that we have content\r\n                                                    setChatHistories(prev => ({\r\n                                                        ...prev,\r\n                                                        [currentQuestionId]: [...(prev[currentQuestionId] || []), {\r\n                                                            ...initialAiMessage,\r\n                                                            content: accumulatedFeedback\r\n                                                        }]\r\n                                                    }));\r\n                                                } else {\r\n                                                    // Update the existing AI message content for subsequent chunks\r\n                                                    setChatHistories(prev => {\r\n                                                        // Find the current question's chat history\r\n                                                        const currentHistory = [...(prev[currentQuestionId] || [])];\r\n\r\n                                                        // Find the index of the AI message to update\r\n                                                        const aiMessageIndex = currentHistory.findIndex(msg => msg.id === aiMessageId);\r\n\r\n                                                        if (aiMessageIndex !== -1) {\r\n                                                            // Update the existing message\r\n                                                            currentHistory[aiMessageIndex] = {\r\n                                                                ...currentHistory[aiMessageIndex],\r\n                                                                content: accumulatedFeedback\r\n                                                            };\r\n                                                        }\r\n\r\n                                                        return {\r\n                                                            ...prev,\r\n                                                            [currentQuestionId]: currentHistory\r\n                                                        };\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                            // For exam questions, we don't update the UI yet\r\n                                            // but we still track that we received feedback\r\n                                            else if (!receivedAnyFeedback) {\r\n                                                receivedAnyFeedback = true;\r\n                                            }\r\n                                        }\r\n\r\n                                        // Handle scorecard data when available\r\n                                        if (data.scorecard && data.scorecard.length > 0) {\r\n                                            // Show preparing report message if not already shown\r\n                                            if (!showPreparingReport && validQuestions[currentQuestionIndex]?.config?.responseType === 'chat') {\r\n                                                setShowPreparingReport(true);\r\n                                            }\r\n\r\n                                            // Instead of immediately updating the chat message,\r\n                                            // collect the scorecard data\r\n                                            completeScorecard = data.scorecard;\r\n                                        }\r\n\r\n                                        // Handle is_correct when available - for practice questions\r\n                                        if (validQuestions[currentQuestionIndex]?.config?.responseType === 'chat' && data.is_correct !== undefined) {\r\n                                            isCorrect = data.is_correct;\r\n                                        }\r\n                                    } catch (e) {\r\n                                        console.error('Error parsing JSON chunk:', e);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // After processing all chunks (stream is complete)\r\n\r\n                            // Only now update the chat message with the complete scorecard\r\n                            if (completeScorecard.length > 0) {\r\n                                // Check if all criteria received maximum scores\r\n                                if (completeScorecard.length > 0) {\r\n                                    // Set isCorrect to true only if all criteria have received their maximum score\r\n                                    isCorrect = completeScorecard.every((item: ScorecardItem) =>\r\n                                        item.score !== undefined &&\r\n                                        ((item.pass_score !== undefined && item.score >= item.pass_score) ||\r\n                                            (item.max_score !== undefined && item.score === item.max_score))\r\n                                    );\r\n                                }\r\n\r\n                                // Update the existing AI message with the complete scorecard data\r\n                                setChatHistories(prev => {\r\n                                    // Find the current question's chat history\r\n                                    const currentHistory = [...(prev[currentQuestionId] || [])];\r\n\r\n                                    // Find the index of the AI message to update\r\n                                    const aiMessageIndex = currentHistory.findIndex(msg => msg.id === aiMessageId);\r\n\r\n                                    if (aiMessageIndex !== -1) {\r\n                                        // Update the existing message with the complete scorecard\r\n                                        currentHistory[aiMessageIndex] = {\r\n                                            ...currentHistory[aiMessageIndex],\r\n                                            scorecard: completeScorecard\r\n                                        };\r\n                                    }\r\n\r\n                                    return {\r\n                                        ...prev,\r\n                                        [currentQuestionId]: currentHistory\r\n                                    };\r\n                                });\r\n\r\n                                // Only now hide the preparing report message\r\n                                setTimeout(() => setShowPreparingReport(false), 0);\r\n                            }\r\n\r\n                            if (isCorrect) {\r\n                                // Mark this specific question as completed\r\n                                setCompletedQuestionIds(prev => ({\r\n                                    ...prev,\r\n                                    [currentQuestionId]: true\r\n                                }));\r\n\r\n                                // Call the onSubmitAnswer callback to mark completion\r\n                                if (onSubmitAnswer) {\r\n                                    onSubmitAnswer(currentQuestionId, responseType === 'audio' ? audioData || '' : responseContent);\r\n                                }\r\n                            }\r\n\r\n                            // Handle exam questions completion\r\n                            if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam') {\r\n                                // Now that all chunks have been received, mark as complete\r\n                                // Mark this question as completed\r\n                                setCompletedQuestionIds(prev => ({\r\n                                    ...prev,\r\n                                    [currentQuestionId]: true\r\n                                }));\r\n\r\n                                // Call the onSubmitAnswer callback to mark completion\r\n                                if (onSubmitAnswer) {\r\n                                    onSubmitAnswer(currentQuestionId, responseType === 'audio' ? audioData || '' : responseContent);\r\n                                }\r\n\r\n                                // For exam questions, clear the pending submission status\r\n                                setPendingSubmissionQuestionIds(prev => {\r\n                                    const newState = { ...prev };\r\n                                    delete newState[currentQuestionId];\r\n                                    return newState;\r\n                                });\r\n\r\n                                initialAiMessage.content = EXAM_CONFIRMATION_MESSAGE;\r\n\r\n                                // Add exam confirmation message to chat history\r\n                                setChatHistories(prev => ({\r\n                                    ...prev,\r\n                                    [currentQuestionId]: [...(prev[currentQuestionId] || []), {\r\n                                        ...initialAiMessage,\r\n                                        content: EXAM_CONFIRMATION_MESSAGE,\r\n                                        scorecard: []\r\n                                    }]\r\n                                }));\r\n\r\n                                // Stop showing the AI responding animation for exam questions\r\n                                setIsAiResponding(false);\r\n                            }\r\n\r\n                            // Store chat history in backend for quiz\r\n                            if (!isTestMode) {\r\n                                const aiResponse: AIResponse = {\r\n                                    feedback: accumulatedFeedback,\r\n                                    is_correct: isCorrect,\r\n                                    scorecard: completeScorecard\r\n                                };\r\n                                storeChatHistory(currentQuestionId, userMessage, aiResponse);\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Error processing stream:', error);\r\n                            // Only reset the preparing report state when an error occurs\r\n                            // and we need to allow the user to try again\r\n                            if (showPreparingReport) {\r\n                                setTimeout(() => setShowPreparingReport(false), 0);\r\n                            }\r\n                            throw error;\r\n                        }\r\n                    };\r\n\r\n                    // Start processing the stream for both exam and quiz\r\n                    return processStream();\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching AI response:', error);\r\n\r\n                    // Show error message to the user\r\n                    const errorMessage = responseType === 'audio'\r\n                        ? \"There was an error while processing your audio. Please try again.\"\r\n                        : \"There was an error while processing your answer. Please try again.\";\r\n\r\n                    const errorResponse: ChatMessage = {\r\n                        id: `ai-error-${Date.now()}`,\r\n                        content: errorMessage,\r\n                        sender: 'ai',\r\n                        timestamp: new Date(),\r\n                        messageType: 'text',\r\n                        audioData: undefined,\r\n                        scorecard: [],\r\n                        isError: true\r\n                    };\r\n\r\n                    // For exam questions, clear the pending status so the user can try again\r\n                    if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam') {\r\n                        setPendingSubmissionQuestionIds(prev => {\r\n                            const newState = { ...prev };\r\n                            delete newState[currentQuestionId];\r\n                            return newState;\r\n                        });\r\n                    }\r\n\r\n                    // Add the error message to the chat history\r\n                    // This is only for UI display and won't be saved to the database\r\n                    setChatHistories(prev => ({\r\n                        ...prev,\r\n                        [currentQuestionId]: [...(prev[currentQuestionId] || []), errorResponse]\r\n                    }));\r\n\r\n                    // Reset report preparation state on error since the user needs to try again\r\n                    setShowPreparingReport(false);\r\n                })\r\n                .finally(() => {\r\n                    // Only reset submitting state when API call is done\r\n                    setIsSubmitting(false);\r\n\r\n                    // If we never received any feedback, also reset the AI responding state\r\n                    if (!receivedAnyFeedback) {\r\n                        setIsAiResponding(false);\r\n                    }\r\n                });\r\n        },\r\n        [\r\n            validQuestions,\r\n            currentQuestionIndex,\r\n            onSubmitAnswer,\r\n            userId,\r\n            isTestMode,\r\n            chatHistories,\r\n            storeChatHistory,\r\n            completedQuestionIds,\r\n            EXAM_CONFIRMATION_MESSAGE\r\n        ]\r\n    );\r\n\r\n    // Add state for exam submission confirmation\r\n    const [showExamSubmissionConfirmation, setShowExamSubmissionConfirmation] = useState(false);\r\n    const [pendingExamSubmission, setPendingExamSubmission] = useState<{\r\n        responseContent: string;\r\n        responseType: 'text' | 'audio' | 'code';\r\n        audioData?: string;\r\n    } | null>(null);\r\n\r\n    // Modified handleSubmitAnswer function to use shared logic\r\n    const handleSubmitAnswer = useCallback((responseType: 'text' | 'code' = 'text') => {\r\n        // Get the current answer from the ref\r\n        const answer = currentAnswerRef.current;\r\n\r\n        if (!answer.trim()) return;\r\n\r\n        // For exam questions, show confirmation dialog\r\n        if (validQuestions[currentQuestionIndex]?.config?.responseType === 'exam') {\r\n            setPendingExamSubmission({\r\n                responseContent: answer,\r\n                responseType\r\n            });\r\n            setShowExamSubmissionConfirmation(true);\r\n            return;\r\n        }\r\n\r\n        // Use the shared processing function for non-exam questions\r\n        processUserResponse(answer, responseType);\r\n    }, [processUserResponse, validQuestions, currentQuestionIndex]);\r\n\r\n    // Handle exam submission confirmation\r\n    const handleExamSubmissionConfirm = useCallback(() => {\r\n        if (pendingExamSubmission) {\r\n            processUserResponse(\r\n                pendingExamSubmission.responseContent,\r\n                pendingExamSubmission.responseType,\r\n                pendingExamSubmission.audioData\r\n            );\r\n        }\r\n        setShowExamSubmissionConfirmation(false);\r\n        setPendingExamSubmission(null);\r\n        chatViewRef.current?.toggleCodeView();\r\n    }, [pendingExamSubmission, processUserResponse]);\r\n\r\n    // Handle exam submission cancellation\r\n    const handleExamSubmissionCancel = useCallback(() => {\r\n        setShowExamSubmissionConfirmation(false);\r\n        setPendingExamSubmission(null);\r\n    }, []);\r\n\r\n    // New function to handle audio submission using shared logic\r\n    const handleAudioSubmit = useCallback(async (audioBlob: Blob) => {\r\n        try {\r\n            // Convert the WebM audio blob to WAV format\r\n            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n            const arrayBuffer = await audioBlob.arrayBuffer();\r\n            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n            // Convert AudioBuffer to WAV format\r\n            const wavBuffer = convertAudioBufferToWav(audioBuffer);\r\n            const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n\r\n            // Convert the WAV blob to base64\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(wavBlob);\r\n\r\n            reader.onloadend = async () => {\r\n                const base64Audio = reader.result as string;\r\n                // Remove the data URL prefix (e.g., \"data:audio/wav;base64,\")\r\n                const base64Data = base64Audio.split(',')[1];\r\n\r\n                // Use the shared processing function with audio-specific parameters\r\n                processUserResponse('', 'audio', base64Data);\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error processing audio submission:\", error);\r\n            setIsSubmitting(false);\r\n        }\r\n    }, [processUserResponse]);\r\n\r\n    // Helper function to convert AudioBuffer to WAV format\r\n    const convertAudioBufferToWav = (audioBuffer: AudioBuffer) => {\r\n        const numOfChan = audioBuffer.numberOfChannels;\r\n        const length = audioBuffer.length * numOfChan * 2;\r\n        const buffer = new ArrayBuffer(44 + length);\r\n        const view = new DataView(buffer);\r\n        const sampleRate = audioBuffer.sampleRate;\r\n        const channels = [];\r\n\r\n        // Extract channels\r\n        for (let i = 0; i < numOfChan; i++) {\r\n            channels.push(audioBuffer.getChannelData(i));\r\n        }\r\n\r\n        // RIFF identifier\r\n        writeString(view, 0, 'RIFF');\r\n        // File length\r\n        view.setUint32(4, 36 + length, true);\r\n        // RIFF type\r\n        writeString(view, 8, 'WAVE');\r\n        // Format chunk identifier\r\n        writeString(view, 12, 'fmt ');\r\n        // Format chunk length\r\n        view.setUint32(16, 16, true);\r\n        // Sample format (raw)\r\n        view.setUint16(20, 1, true);\r\n        // Channel count\r\n        view.setUint16(22, numOfChan, true);\r\n        // Sample rate\r\n        view.setUint32(24, sampleRate, true);\r\n        // Byte rate (sample rate * block align)\r\n        view.setUint32(28, sampleRate * numOfChan * 2, true);\r\n        // Block align (channel count * bytes per sample)\r\n        view.setUint16(32, numOfChan * 2, true);\r\n        // Bits per sample\r\n        view.setUint16(34, 16, true);\r\n        // Data chunk identifier\r\n        writeString(view, 36, 'data');\r\n        // Data chunk length\r\n        view.setUint32(40, length, true);\r\n\r\n        // Write PCM samples\r\n        const offset = 44;\r\n        let pos = 0;\r\n        for (let i = 0; i < audioBuffer.length; i++) {\r\n            for (let channel = 0; channel < numOfChan; channel++) {\r\n                // Clamp the value to -1.0 - 1.0 range and convert to 16-bit\r\n                const sample = Math.max(-1, Math.min(1, channels[channel][i]));\r\n                const value = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;\r\n                view.setInt16(offset + pos, value, true);\r\n                pos += 2;\r\n            }\r\n        }\r\n\r\n        return buffer;\r\n    };\r\n\r\n    // Helper function to write strings to DataView\r\n    const writeString = (view: DataView, offset: number, string: string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    // Update the handleSubmitAnswerRef when handleSubmitAnswer changes\r\n    useEffect(() => {\r\n        handleSubmitAnswerRef.current = handleSubmitAnswer;\r\n    }, [handleSubmitAnswer]);\r\n\r\n    // Get current question content\r\n    const currentQuestionContent = validQuestions[currentQuestionIndex]?.content || [];\r\n\r\n    // Get current question config\r\n    const currentQuestionConfig = validQuestions[currentQuestionIndex]?.config\r\n\r\n    // Focus the input field directly\r\n    useEffect(() => {\r\n        // Use requestAnimationFrame to ensure the DOM is fully rendered\r\n        requestAnimationFrame(() => {\r\n            if (inputRef.current) {\r\n                inputRef.current.focus();\r\n            }\r\n        });\r\n    }, [currentQuestionIndex]); // Only re-focus when changing questions\r\n\r\n    // Custom styles for hiding scrollbars\r\n    const customStyles = `\r\n    /* Hide scrollbar for Chrome, Safari and Opera */\r\n    .hide-scrollbar::-webkit-scrollbar {\r\n      display: none;\r\n      width: 0;\r\n      height: 0;\r\n    }\r\n    \r\n    /* Hide scrollbar for IE, Edge and Firefox */\r\n    .hide-scrollbar {\r\n      -ms-overflow-style: none;  /* IE and Edge */\r\n      scrollbar-width: none;  /* Firefox */\r\n    }\r\n    `;\r\n\r\n    // ScoreCard view toggle functions\r\n    const handleViewScorecard = (scorecard: ScorecardItem[]) => {\r\n        // Save current chat scroll position before switching views\r\n        if (chatContainerRef.current) {\r\n            setChatScrollPosition(chatContainerRef.current.scrollTop);\r\n        }\r\n\r\n        setActiveScorecard(scorecard);\r\n        setIsViewingScorecard(true);\r\n\r\n        // Reset scroll position of scorecard view when opened\r\n        setTimeout(() => {\r\n            if (scorecardContainerRef.current) {\r\n                scorecardContainerRef.current.scrollTop = 0;\r\n            }\r\n        }, 0);\r\n    };\r\n\r\n    const handleBackToChat = () => {\r\n        setIsViewingScorecard(false);\r\n\r\n        // Focus the input field when returning to chat if appropriate\r\n        setTimeout(() => {\r\n            if (inputRef.current) {\r\n                inputRef.current.focus();\r\n            }\r\n\r\n            // Restore saved chat scroll position\r\n            if (chatContainerRef.current) {\r\n                chatContainerRef.current.scrollTop = chatScrollPosition;\r\n            }\r\n        }, 0);\r\n    };\r\n\r\n    // Function to handle retrying the last user message\r\n    const handleRetry = useCallback(() => {\r\n        if (!validQuestions || validQuestions.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const currentQuestionId = validQuestions[currentQuestionIndex].id;\r\n        const currentHistory = chatHistories[currentQuestionId] || [];\r\n\r\n        // Find the most recent user message\r\n        const userMessages = currentHistory.filter(msg => msg.sender === 'user');\r\n        if (userMessages.length === 0) {\r\n            return; // No user message to retry\r\n        }\r\n\r\n        const lastUserMessage = userMessages[userMessages.length - 1];\r\n\r\n        // If in test mode, first remove the last user message and AI response\r\n        // Find all AI messages\r\n        const aiMessages = currentHistory.filter(msg => msg.sender === 'ai');\r\n\r\n        // If there are AI messages, remove the last user message and last AI message\r\n        if (aiMessages.length > 0) {\r\n            setChatHistories(prev => {\r\n                const updatedHistory = [...(prev[currentQuestionId] || [])];\r\n                // Remove the last two messages (last user message and last AI response)\r\n                updatedHistory.splice(updatedHistory.length - 2, 2);\r\n                return {\r\n                    ...prev,\r\n                    [currentQuestionId]: updatedHistory\r\n                };\r\n            });\r\n        } else {\r\n            // If no AI messages (unusual case), just remove the last user message\r\n            setChatHistories(prev => {\r\n                const updatedHistory = [...(prev[currentQuestionId] || [])];\r\n                // Remove just the last user message\r\n                updatedHistory.pop();\r\n                return {\r\n                    ...prev,\r\n                    [currentQuestionId]: updatedHistory\r\n                };\r\n            });\r\n        }\r\n\r\n        // Now process the user response again\r\n        // If it's an audio message, get the audio data\r\n        if (lastUserMessage.messageType === 'audio') {\r\n            if (lastUserMessage.audioData) {\r\n                processUserResponse('', 'audio', lastUserMessage.audioData);\r\n            }\r\n        } else {\r\n            // For text messages, resubmit the text content\r\n            processUserResponse(lastUserMessage.content);\r\n        }\r\n    }, [validQuestions, currentQuestionIndex, chatHistories, processUserResponse, isTestMode]);\r\n\r\n    // Update the parent component when AI responding state changes\r\n    useEffect(() => {\r\n        if (onAiRespondingChange) {\r\n            onAiRespondingChange(isAiResponding);\r\n        }\r\n    }, [isAiResponding, onAiRespondingChange]);\r\n\r\n    // Add state for code view\r\n    const [codeViewState, setCodeViewState] = useState<CodeViewState>({\r\n        isViewingCode: false,\r\n        isRunning: false,\r\n        previewContent: '',\r\n        output: '',\r\n        hasWebLanguages: false\r\n    });\r\n\r\n    // Update the state with any code preview changes\r\n    const handleCodeStateChange = (newState: CodeViewState) => {\r\n        setCodeViewState(prevState => {\r\n            const updatedState = { ...prevState, ...newState };\r\n\r\n            // Remove the automatic view mode change when toggling between code and chat\r\n            // to preserve the user's selected view mode\r\n\r\n            // On mobile, when preview content is first loaded for a code run,\r\n            // we still want to show it (but not when just toggling modes)\r\n            const isMobileView = window.innerWidth < 1024;\r\n            if (isMobileView &&\r\n                updatedState.previewContent &&\r\n                !prevState.previewContent &&\r\n                // Only switch if this is a fresh code run, not just a mode toggle\r\n                updatedState.output) {\r\n\r\n                // When preview content is first set on mobile, automatically go to full chat view\r\n                // This ensures the preview is visible\r\n                setMobileViewMode('chat-full');\r\n\r\n                // Notify parent if needed\r\n                if (onMobileViewChange) {\r\n                    onMobileViewChange({ mode: 'chat-full' });\r\n                }\r\n            }\r\n\r\n            return updatedState;\r\n        });\r\n    };\r\n\r\n    // Determine if we should show the 3-column layout\r\n    const isCodeQuestion = useMemo(() => {\r\n        if (!validQuestions || validQuestions.length === 0) return false;\r\n        return validQuestions[currentQuestionIndex]?.config?.inputType === 'code';\r\n    }, [validQuestions, currentQuestionIndex]);\r\n\r\n    // Mobile view controls\r\n    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n    const [mobileViewMode, setMobileViewMode] = useState<'question-full' | 'chat-full' | 'split'>('split');\r\n    const mobileMenuRef = useRef<HTMLDivElement>(null);\r\n    // Track if we should show the pulse animation\r\n    const [showButtonPulse, setShowButtonPulse] = useState(false);\r\n    // Track if button has completed entrance animation\r\n    const [showButtonEntrance, setShowButtonEntrance] = useState(true);\r\n\r\n    // Effect to start pulsing animation after entrance animation completes\r\n    useEffect(() => {\r\n        // Check if user has clicked the FAB before\r\n        const hasClickedFAB = safeLocalStorage.getItem('hasClickedQuizViewToggleButton') === 'true';\r\n\r\n        if (hasClickedFAB) {\r\n            // If user has clicked before, don't show animations\r\n            setShowButtonPulse(false);\r\n        } else {\r\n            // For new users, start with entrance animation\r\n            setShowButtonEntrance(true);\r\n\r\n            // Wait for entrance animation to complete before starting the pulse\r\n            const entranceTimer = setTimeout(() => {\r\n                setShowButtonEntrance(false);\r\n                setShowButtonPulse(true);\r\n            }, 800); // Match the duration of the entrance animation\r\n\r\n            return () => clearTimeout(entranceTimer);\r\n        }\r\n    }, []);\r\n\r\n    // Handle clicks outside the mobile menu to close it\r\n    useEffect(() => {\r\n        function handleClickOutside(event: MouseEvent) {\r\n            if (mobileMenuRef.current && !mobileMenuRef.current.contains(event.target as Node)) {\r\n                setIsMobileMenuOpen(false);\r\n            }\r\n        }\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    // Toggle mobile menu\r\n    const toggleMobileMenu = () => {\r\n        setIsMobileMenuOpen(prev => !prev);\r\n        // If the menu is being opened, stop the animation\r\n        if (!isMobileMenuOpen) {\r\n            setShowButtonPulse(false);\r\n\r\n            // Save to localStorage that user has clicked the button\r\n            safeLocalStorage.setItem('hasClickedViewModeButton', 'true');\r\n        }\r\n    };\r\n\r\n    // Direct handler for changing view mode\r\n    const setViewMode = (mode: 'question-full' | 'chat-full' | 'split') => {\r\n        setMobileViewMode(mode);\r\n        setIsMobileMenuOpen(false);\r\n    };\r\n\r\n    // Apply CSS classes based on mode\r\n    useEffect(() => {\r\n        const quizContainer = document.querySelector('.quiz-view-container');\r\n        if (quizContainer) {\r\n            // Remove existing mode classes\r\n            quizContainer.classList.remove('mode-split', 'mode-question-full', 'mode-chat-full');\r\n            // Add current mode class\r\n            quizContainer.classList.add(`mode-${mobileViewMode}`);\r\n        }\r\n    }, [mobileViewMode, codeViewState.isViewingCode]); // Also reapply when code view toggle changes\r\n\r\n    // Set initial showLearnerView based on isAdminView\r\n    useEffect(() => {\r\n        const currentQuestion = questions.find(q => q.id === currentQuestionId);\r\n        if (!isAdminView && currentQuestion?.config?.responseType === 'exam') {\r\n            setShowLearnerView(true);\r\n        }\r\n    }, [isAdminView, questions, currentQuestionId]);\r\n\r\n    return (\r\n        <div className={`w-full h-full ${className}`}>\r\n            {/* Add the custom styles */}\r\n            <style jsx>{customStyles}</style>\r\n            <style jsx>{`\r\n                .three-column-grid {\r\n                    display: grid;\r\n                    grid-template-columns: 1fr 1fr 0.75fr;\r\n                    height: 100%;\r\n                    \r\n                    @media (max-width: 1024px) {\r\n                        grid-template-columns: 1fr;\r\n                        grid-template-rows: 0.5fr 0.5fr 0.5fr;\r\n                        height: 100vh;\r\n                        overflow: hidden;\r\n                    }\r\n                }\r\n                \r\n                .two-column-grid {\r\n                    display: grid;\r\n                    grid-template-columns: 1fr 1fr;\r\n                    height: 100%;\r\n                    \r\n                    @media (max-width: 1024px) {\r\n                        grid-template-columns: 1fr;\r\n                        grid-template-rows: 50% 50%;\r\n                        height: 100%;\r\n                        overflow: hidden;\r\n                    }\r\n                }\r\n                \r\n                /* When sidebar is visible on mobile, ensure row-based layout */\r\n                .sidebar-visible .two-column-grid {\r\n                    @media (max-width: 1024px) {\r\n                        grid-template-columns: 1fr;\r\n                        grid-template-rows: 50% 50%;\r\n                        height: 100%;\r\n                        overflow: hidden;\r\n                    }\r\n                }\r\n                \r\n                .preview-placeholder {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    height: 100%;\r\n                    background-color: #1A1A1A;\r\n                    color: #666666;\r\n                    font-size: 0.9rem;\r\n                    text-align: center;\r\n                    padding: 1rem;\r\n                }\r\n                \r\n                .preview-placeholder svg {\r\n                    margin-bottom: 1rem;\r\n                    opacity: 0.5;\r\n                }\r\n\r\n                /* Make sure the question and chat containers properly fit their content */\r\n                @media (max-width: 1024px) {\r\n                    .quiz-view-container {\r\n                        height: 100% !important;\r\n                        max-height: 100% !important;\r\n                        overflow: hidden !important;\r\n                        display: grid !important;\r\n                        grid-template-rows: 50% 50% !important;\r\n                        grid-template-columns: 1fr !important;\r\n                    }\r\n                    \r\n                    .question-container {\r\n                        height: 100% !important;\r\n                        max-height: 100% !important;\r\n                        overflow-y: auto !important;\r\n                        grid-row: 1 !important;\r\n                    }\r\n                    \r\n                    .chat-container {\r\n                        height: 100% !important;\r\n                        max-height: 100% !important;\r\n                        overflow: hidden !important;\r\n                        display: flex !important;\r\n                        flex-direction: column !important;\r\n                        grid-row: 2 !important;\r\n                    }\r\n                    \r\n                    /* Ensure the messages area scrolls but input stays fixed */\r\n                    .chat-container .messages-container {\r\n                        flex: 1 !important;\r\n                        overflow-y: auto !important;\r\n                        min-height: 0 !important;\r\n                    }\r\n                    \r\n                    /* Ensure the input area stays at the bottom and doesn't scroll */\r\n                    .chat-container .input-container {\r\n                        flex-shrink: 0 !important;\r\n                        position: sticky !important;\r\n                        bottom: 0 !important;\r\n                        background-color: #111111 !important;\r\n                        z-index: 10 !important;\r\n                        padding-top: 0.5rem !important;\r\n                        border-top: 1px solid #222222 !important;\r\n                    }\r\n                }\r\n\r\n                /* Ensure the editor stays within the question container on mobile */\r\n                @media (max-width: 1024px) {\r\n                    .question-container .quiz-viewer,\r\n                    .question-container .quiz-viewer-preview {\r\n                        max-height: calc(100% - 80px) !important;\r\n                        overflow: auto !important;\r\n                    }\r\n                }\r\n\r\n                /* Mobile view floating button styles */\r\n                .mobile-view-button {\r\n                    display: none;\r\n                    position: fixed;\r\n                    z-index: 1000;\r\n                    width: 50px;\r\n                    height: 50px;\r\n                    border-radius: 50%;\r\n                    background-color: #9333EA;\r\n                    color: white;\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n                    border: none;\r\n                    outline: none;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n\r\n                .mobile-view-button:hover {\r\n                    background-color: #A855F7;\r\n                    transform: scale(1.05);\r\n                }\r\n\r\n                .mobile-view-menu {\r\n                    position: fixed;\r\n                    width: 180px;\r\n                    background-color: #333333;\r\n                    border-radius: 8px;\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n                    overflow: hidden;\r\n                    z-index: 1001;\r\n                }\r\n\r\n                .mobile-view-menu-item {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    padding: 12px;\r\n                    color: white;\r\n                    cursor: pointer;\r\n                    transition: background-color 0.2s ease;\r\n                }\r\n\r\n                .mobile-view-menu-item:hover {\r\n                    background-color: #444444;\r\n                }\r\n\r\n                .mobile-view-menu-item svg {\r\n                    margin-right: 8px;\r\n                }\r\n\r\n                /* Pulse animation for the floating action button */\r\n                @keyframes pulse-ring {\r\n                    0% {\r\n                        box-shadow: 0 0 0 0 rgba(147, 51, 234, 0.7);\r\n                    }\r\n                    70% {\r\n                        box-shadow: 0 0 0 10px rgba(147, 51, 234, 0);\r\n                    }\r\n                    100% {\r\n                        box-shadow: 0 0 0 0 rgba(147, 51, 234, 0);\r\n                    }\r\n                }\r\n\r\n                /* Animation for the inner pulse */\r\n                @keyframes pulse-dot {\r\n                    0% {\r\n                        transform: scale(0.95);\r\n                    }\r\n                    70% {\r\n                        transform: scale(1.05);\r\n                    }\r\n                    100% {\r\n                        transform: scale(0.95);\r\n                    }\r\n                }\r\n                \r\n                /* Entrance animation for the button */\r\n                @keyframes button-entrance {\r\n                    0% {\r\n                        opacity: 0;\r\n                        transform: scale(0.5) translateY(20px);\r\n                    }\r\n                    60% {\r\n                        transform: scale(1.1) translateY(-5px);\r\n                    }\r\n                    80% {\r\n                        transform: scale(0.95) translateY(2px);\r\n                    }\r\n                    100% {\r\n                        opacity: 1;\r\n                        transform: scale(1) translateY(0);\r\n                    }\r\n                }\r\n                \r\n                .button-entrance {\r\n                    animation: button-entrance 0.8s cubic-bezier(0.215, 0.61, 0.355, 1) forwards;\r\n                }\r\n\r\n                .button-pulse {\r\n                    animation: pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;\r\n                }\r\n\r\n                .button-pulse:after {\r\n                    content: '';\r\n                    position: absolute;\r\n                    left: 0;\r\n                    right: 0;\r\n                    top: 0;\r\n                    bottom: 0;\r\n                    border-radius: 50%;\r\n                    box-shadow: 0 0 8px 4px rgba(147, 51, 234, 0.5);\r\n                    animation: pulse-dot 1.5s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;\r\n                }\r\n\r\n                @media (max-width: 1024px) {\r\n                    .mobile-view-button {\r\n                        display: flex;\r\n                    }\r\n                    \r\n                    /* Mobile layout view modes */\r\n                    .quiz-view-container.mode-question-full {\r\n                        grid-template-rows: 100% 0% !important;\r\n                    }\r\n                    \r\n                    .quiz-view-container.mode-question-full .question-container {\r\n                        display: block !important;\r\n                        height: 100% !important;\r\n                    }\r\n                    \r\n                    .quiz-view-container.mode-question-full .chat-container {\r\n                        display: none !important;\r\n                    }\r\n                    \r\n                    .quiz-view-container.mode-chat-full {\r\n                        grid-template-rows: 0% 100% !important;\r\n                    }\r\n                    \r\n                    .quiz-view-container.mode-chat-full .question-container {\r\n                        display: none !important;\r\n                    }\r\n                    \r\n                    .quiz-view-container.mode-chat-full .chat-container {\r\n                        display: flex !important;\r\n                        height: 100% !important;\r\n                    }\r\n                    \r\n                    .quiz-view-container.mode-split {\r\n                        grid-template-rows: 50% 50% !important;\r\n                    }\r\n                }\r\n            `}</style>\r\n\r\n            <div className={`rounded-md overflow-hidden ${isCodeQuestion && codeViewState.isViewingCode ? 'three-column-grid' : 'two-column-grid'} bg-[#111111] quiz-view-container`}>\r\n                {/* Left side - Question (33% or 50% depending on layout) */}\r\n                <div className=\"p-6 border-r border-[#222222] flex flex-col bg-[#1A1A1A] lg:border-r lg:border-b-0 sm:border-b sm:border-r-0 question-container\"\r\n                    style={{ overflow: 'auto' }}>\r\n                    {/* Navigation controls at the top of left side - only show if more than one question */}\r\n                    {validQuestions.length > 1 ? (\r\n                        <div className=\"flex items-center justify-between w-full mb-6\">\r\n                            <div className=\"w-10 h-10\">\r\n                                <button\r\n                                    className={`w-10 h-10 rounded-full flex items-center justify-center bg-[#222222] text-white ${currentQuestionIndex > 0 ? 'hover:bg-[#333333] cursor-pointer' : 'opacity-50 cursor-not-allowed'}`}\r\n                                    onClick={goToPreviousQuestion}\r\n                                    disabled={currentQuestionIndex <= 0}\r\n                                >\r\n                                    <ChevronLeft size={18} />\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=\"bg-[#222222] px-3 py-1 rounded-full text-white text-sm flex items-center\">\r\n                                <span>Question {currentQuestionIndex + 1} / {validQuestions.length}</span>\r\n                                {validQuestions[currentQuestionIndex] &&\r\n                                    completedQuestionIds &&\r\n                                    completedQuestionIds[validQuestions[currentQuestionIndex].id] && (\r\n                                        <CheckCircle size={14} className=\"ml-2 text-green-500 flex-shrink-0\" />\r\n                                    )}\r\n                            </div>\r\n\r\n                            <div className=\"w-10 h-10\">\r\n                                <button\r\n                                    className={`w-10 h-10 rounded-full flex items-center justify-center bg-[#222222] text-white ${currentQuestionIndex < validQuestions.length - 1 ? 'hover:bg-[#333333] cursor-pointer' : 'opacity-50 cursor-not-allowed'}`}\r\n                                    onClick={goToNextQuestion}\r\n                                    disabled={currentQuestionIndex >= validQuestions.length - 1}\r\n                                >\r\n                                    <ChevronRight size={18} />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"flex items-center justify-center w-full mb-6\">\r\n                            <div className=\"bg-[#222222] px-3 py-1 rounded-full text-white text-sm\">\r\n                                Question\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={`flex-1 ${questions.length > 1 ? 'mt-4' : ''}`}>\r\n                        {/* Use editor with negative margin to offset unwanted space */}\r\n                        <div className=\"ml-[-60px]\"> {/* Increased negative margin to align with navigation arrow */}\r\n                            <BlockNoteEditor\r\n                                key={`question-view-${currentQuestionIndex}`}\r\n                                initialContent={currentQuestionContent}\r\n                                onChange={() => { }} // Read-only in view mode\r\n                                isDarkMode={isDarkMode}\r\n                                readOnly={true}\r\n                                className={`!bg-transparent ${isTestMode ? 'quiz-viewer-preview' : 'quiz-viewer'}`}\r\n                                placeholder=\"Question content will appear here\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Middle column - Chat/Code View */}\r\n                <div className=\"flex flex-col bg-[#111111] h-full overflow-auto lg:border-l lg:border-t-0 sm:border-t sm:border-l-0 border-[#222222] chat-container\">\r\n                    {isViewingScorecard ? (\r\n                        /* Use the ScorecardView component */\r\n                        <ScorecardView\r\n                            activeScorecard={activeScorecard}\r\n                            handleBackToChat={handleBackToChat}\r\n                            lastUserMessage={getLastUserMessage as ChatMessage | null}\r\n                        />\r\n                    ) : (\r\n                        /* Use the ChatView component */\r\n                        <ChatView\r\n                            currentChatHistory={currentChatHistory as ChatMessage[]}\r\n                            isAiResponding={isAiResponding}\r\n                            showPreparingReport={showPreparingReport}\r\n                            isChatHistoryLoaded={isChatHistoryLoaded}\r\n                            isTestMode={isTestMode}\r\n                            taskType='quiz'\r\n                            currentQuestionConfig={validQuestions[currentQuestionIndex]?.config}\r\n                            isSubmitting={isSubmitting}\r\n                            currentAnswer={currentAnswer}\r\n                            handleInputChange={handleInputChange}\r\n                            handleSubmitAnswer={handleSubmitAnswer}\r\n                            handleAudioSubmit={handleAudioSubmit}\r\n                            handleViewScorecard={handleViewScorecard}\r\n                            viewOnly={viewOnly}\r\n                            completedQuestionIds={completedQuestionIds}\r\n                            currentQuestionId={validQuestions[currentQuestionIndex]?.id}\r\n                            handleRetry={handleRetry}\r\n                            onCodeStateChange={handleCodeStateChange}\r\n                            initialIsViewingCode={isCodeQuestion}\r\n                            showLearnerView={showLearnerView}\r\n                            onShowLearnerViewChange={setShowLearnerView}\r\n                            isAdminView={isAdminView}\r\n                            userId={userId}\r\n                            ref={chatViewRef}\r\n                        />\r\n                    )}\r\n                </div>\r\n\r\n                {/* Third column - Code Preview (only shown for coding questions) */}\r\n                {isCodeQuestion && codeViewState.isViewingCode && (\r\n                    <div className=\"border-l border-[#222222] bg-[#111111] h-full overflow-auto\">\r\n                        <CodePreview\r\n                            isRunning={codeViewState.isRunning}\r\n                            previewContent={codeViewState.previewContent}\r\n                            output={codeViewState.output}\r\n                            isWebPreview={codeViewState.hasWebLanguages}\r\n                            executionTime={codeViewState.executionTime}\r\n                            onClear={() => {\r\n                                // Clear the code output in the codeViewState\r\n                                setCodeViewState(prev => ({\r\n                                    ...prev,\r\n                                    previewContent: '',\r\n                                    output: '',\r\n                                    executionTime: ''\r\n                                }));\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Navigation Confirmation Dialog */}\r\n            <ConfirmationDialog\r\n                open={showNavigationConfirmation}\r\n                title=\"What's the rush?\"\r\n                message=\"Our AI is still reviewing your answer and will be ready with a response soon. If you navigate away now, you will not see the complete response. Are you sure you want to leave?\"\r\n                confirmButtonText=\"Leave anyway\"\r\n                cancelButtonText=\"Stay\"\r\n                onConfirm={handleNavigationConfirm}\r\n                onCancel={handleNavigationCancel}\r\n                type=\"custom\"\r\n            />\r\n\r\n            {/* Exam Submission Confirmation Dialog */}\r\n            <ConfirmationDialog\r\n                open={showExamSubmissionConfirmation}\r\n                title=\"Confirm Submission\"\r\n                message=\"This is an exam question. You can only submit your answer once and won't be able to modify it. Are you sure you want to submit now?\"\r\n                confirmButtonText=\"Submit\"\r\n                cancelButtonText=\"Review again\"\r\n                onConfirm={handleExamSubmissionConfirm}\r\n                onCancel={handleExamSubmissionCancel}\r\n                type=\"custom\"\r\n            />\r\n\r\n            {/* Mobile view floating button */}\r\n            <button\r\n                onClick={toggleMobileMenu}\r\n                className={`fixed right-4 w-14 h-14 rounded-full bg-purple-700 text-white flex items-center justify-center shadow-lg z-20 cursor-pointer transition-transform duration-300 focus:outline-none mobile-view-button ${showButtonEntrance ? 'button-entrance' : ''} ${showButtonPulse ? 'button-pulse' : ''}`}\r\n                style={{ bottom: '150px' }}\r\n                aria-label=\"View options\"\r\n            >\r\n                {isMobileMenuOpen ? (\r\n                    <X className=\"h-6 w-6\" />\r\n                ) : (\r\n                    mobileViewMode === 'split' ? (\r\n                        <SplitSquareVertical className=\"h-6 w-6\" />\r\n                    ) : mobileViewMode === 'question-full' ? (\r\n                        <Maximize2 className=\"h-6 w-6\" />\r\n                    ) : (\r\n                        <MessageCircle className=\"h-6 w-6\" />\r\n                    )\r\n                )}\r\n            </button>\r\n\r\n            {/* Semi-transparent overlay when menu is open */}\r\n            {isMobileMenuOpen && (\r\n                <div\r\n                    className=\"fixed inset-0 z-10\"\r\n                    style={{ backgroundColor: 'rgba(0, 0, 0, 0.8)' }}\r\n                    aria-hidden=\"true\"\r\n                    onClick={() => setIsMobileMenuOpen(false)}\r\n                />\r\n            )}\r\n\r\n            {/* Mobile view menu */}\r\n            {isMobileMenuOpen && (\r\n                <div className=\"fixed right-4 flex flex-col gap-4 items-end z-20\" style={{ bottom: '220px' }} ref={mobileMenuRef}>\r\n                    {/* Question Only Button */}\r\n                    <div className=\"flex items-center gap-3\">\r\n                        <span className=\"bg-black text-white py-2 px-4 rounded-full text-sm shadow-md\">\r\n                            Expand Question\r\n                        </span>\r\n                        <button\r\n                            onClick={() => setViewMode('question-full')}\r\n                            className=\"w-12 h-12 rounded-full bg-purple-700 text-white flex items-center justify-center shadow-md cursor-pointer hover:bg-purple-600 transition-colors\"\r\n                            aria-label=\"Show question only\"\r\n                        >\r\n                            <Maximize2 className=\"h-5 w-5\" />\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Chat Only Button */}\r\n                    <div className=\"flex items-center gap-3\">\r\n                        <span className=\"bg-black text-white py-2 px-4 rounded-full text-sm shadow-md\">\r\n                            Expand Chat\r\n                        </span>\r\n                        <button\r\n                            onClick={() => setViewMode('chat-full')}\r\n                            className=\"w-12 h-12 rounded-full bg-purple-700 text-white flex items-center justify-center shadow-md cursor-pointer hover:bg-purple-600 transition-colors\"\r\n                            aria-label=\"Show chat only\"\r\n                        >\r\n                            <MessageCircle className=\"h-5 w-5\" />\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Split View Button */}\r\n                    <div className=\"flex items-center gap-3\">\r\n                        <span className=\"bg-black text-white py-2 px-4 rounded-full text-sm shadow-md\">\r\n                            Split View\r\n                        </span>\r\n                        <button\r\n                            onClick={() => setViewMode('split')}\r\n                            className=\"w-12 h-12 rounded-full bg-purple-700 text-white flex items-center justify-center shadow-md cursor-pointer hover:bg-purple-600 transition-colors\"\r\n                            aria-label=\"Show split view\"\r\n                        >\r\n                            <SplitSquareVertical className=\"h-5 w-5\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}