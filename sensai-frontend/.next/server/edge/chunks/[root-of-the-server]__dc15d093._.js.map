{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { getToken } from 'next-auth/jwt'\r\nimport { NextRequest } from 'next/server'\r\n\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const { pathname } = request.nextUrl\r\n  \r\n  // Get session token\r\n  const token = await getToken({\r\n    req: request,\r\n    secret: process.env.NEXTAUTH_SECRET,\r\n  })\r\n  \r\n  // Define authentication paths\r\n  const authRoutes = ['/login']\r\n  const isAuthRoute = authRoutes.some(route => pathname.startsWith(route))\r\n  \r\n  // Public paths that don't require authentication\r\n  const publicPaths = ['/api/auth']\r\n  const isPublicPath = publicPaths.some(path => pathname.startsWith(path))\r\n  \r\n  // If the path is public, allow access\r\n  if (isPublicPath) {\r\n    return NextResponse.next()\r\n  }\r\n  \r\n  // Redirect logic\r\n  if (isAuthRoute) {\r\n    if (token) {\r\n      // Logged in users trying to access login page - redirect to home\r\n      return NextResponse.redirect(new URL('/', request.url))\r\n    }\r\n    // Allow non-logged in users to access auth pages\r\n    return NextResponse.next()\r\n  }\r\n  \r\n  // Protect other routes - redirect to login if not authenticated\r\n  if (!token) {\r\n    // Create login URL with the correct base URL\r\n    const loginUrl = new URL('/login', process.env.NEXT_PUBLIC_APP_URL);\r\n    \r\n    // Create callback URL with both pathname and search params from the original request\r\n    const callbackUrl = new URL(request.nextUrl.pathname, process.env.NEXT_PUBLIC_APP_URL);\r\n    \r\n    // Copy all search params from the original request to the callback URL\r\n    request.nextUrl.searchParams.forEach((value, key) => {\r\n      callbackUrl.searchParams.set(key, value);\r\n    });\r\n    \r\n    // Set the complete callback URL (with search params) as a parameter in the login URL\r\n    loginUrl.searchParams.set('callbackUrl', encodeURI(callbackUrl.toString()));\r\n    \r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n  \r\n  return NextResponse.next()\r\n}\r\n\r\n// Configure which routes use this middleware\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - api/auth (for NextAuth.js)\r\n     * - _next/static (for static files)\r\n     * - _next/image (for Next.js Image optimization)\r\n     * - favicon.ico (for favicon)\r\n     * - public folder\r\n     */\r\n    '/((?!api/auth|_next/static|_next/image|favicon.ico|images).*)',\r\n  ],\r\n} "],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAIO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,oBAAoB;IACpB,MAAM,QAAQ,MAAM,CAAA,GAAA,gQAAA,CAAA,WAAQ,AAAD,EAAE;QAC3B,KAAK;QACL,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACrC;IAEA,8BAA8B;IAC9B,MAAM,aAAa;QAAC;KAAS;IAC7B,MAAM,cAAc,WAAW,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAEjE,iDAAiD;IACjD,MAAM,cAAc;QAAC;KAAY;IACjC,MAAM,eAAe,YAAY,IAAI,CAAC,CAAA,OAAQ,SAAS,UAAU,CAAC;IAElE,sCAAsC;IACtC,IAAI,cAAc;QAChB,OAAO,4SAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,iBAAiB;IACjB,IAAI,aAAa;QACf,IAAI,OAAO;YACT,iEAAiE;YACjE,OAAO,4SAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;QACA,iDAAiD;QACjD,OAAO,4SAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,gEAAgE;IAChE,IAAI,CAAC,OAAO;QACV,6CAA6C;QAC7C,MAAM,WAAW,IAAI,IAAI;QAEzB,qFAAqF;QACrF,MAAM,cAAc,IAAI,IAAI,QAAQ,OAAO,CAAC,QAAQ;QAEpD,uEAAuE;QACvE,QAAQ,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO;YAC3C,YAAY,YAAY,CAAC,GAAG,CAAC,KAAK;QACpC;QAEA,qFAAqF;QACrF,SAAS,YAAY,CAAC,GAAG,CAAC,eAAe,UAAU,YAAY,QAAQ;QAEvE,OAAO,4SAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,4SAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}