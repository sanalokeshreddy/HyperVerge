{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/app/api/auth/%5B...nextauth%5D/utils.ts"],"sourcesContent":["/**\r\n * Server-side utility functions for authentication\r\n */\r\n\r\ninterface UserData {\r\n  email: string;\r\n  given_name?: string;\r\n  family_name?: string;\r\n  name?: string;\r\n  image?: string;\r\n  id?: string;\r\n}\r\n\r\ninterface AccountData {\r\n  access_token?: string;\r\n  id_token?: string;\r\n  provider?: string;\r\n}\r\n\r\n/**\r\n * Send user authentication data to the backend after successful Google login\r\n * This is a server-side implementation for NextAuth callbacks\r\n */\r\nexport async function registerUserWithBackend(\r\n  user: UserData,\r\n  account: AccountData\r\n): Promise<any> {\r\n  try {    \r\n    const response = await fetch(`${process.env.BACKEND_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        email: user.email,\r\n        given_name: user.given_name || user.name?.split(' ')[0] || '',\r\n        family_name: user.family_name || user.name?.split(' ').slice(1).join(' ') || '',\r\n        id_token: account.id_token\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Backend auth failed: ${response.status}`);\r\n    }\r\n\r\n    // Return the raw response data - assuming it contains an 'id' field directly\r\n    const data = await response.json();\r\n    \r\n    // Make sure the ID exists and is returned properly\r\n    if (!data.id) {\r\n      console.error(\"Backend response missing ID field:\", data);\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Backend authentication error:', error);\r\n    // Don't throw error to prevent blocking the auth flow\r\n    // Just log it and continue\r\n    return { id: null };\r\n  }\r\n} "],"names":[],"mappings":"AAAA;;CAEC;;;AAqBM,eAAe,wBACpB,IAAc,EACd,OAAoB;IAEpB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO,KAAK,KAAK;gBACjB,YAAY,KAAK,UAAU,IAAI,KAAK,IAAI,EAAE,MAAM,IAAI,CAAC,EAAE,IAAI;gBAC3D,aAAa,KAAK,WAAW,IAAI,KAAK,IAAI,EAAE,MAAM,KAAK,MAAM,GAAG,KAAK,QAAQ;gBAC7E,UAAU,QAAQ,QAAQ;YAC5B;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE,SAAS,MAAM,EAAE;QAC3D;QAEA,6EAA6E;QAC7E,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,mDAAmD;QACnD,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,QAAQ,KAAK,CAAC,sCAAsC;QACtD;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,sDAAsD;QACtD,2BAA2B;QAC3B,OAAO;YAAE,IAAI;QAAK;IACpB;AACF","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///C:/Hyperverge/sensai-frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport { JWT } from \"next-auth/jwt\";\r\nimport { Session } from \"next-auth\";\r\nimport type { User, Account, Profile } from \"next-auth\";\r\nimport { registerUserWithBackend } from \"./utils\";\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n    }),\r\n  ],\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      // If signing in for the first time, save user info in token\r\n      if (account && user) {\r\n        token.accessToken = account.access_token;\r\n        token.idToken = account.id_token;\r\n        \r\n        // If this is a Google signin, get userId from backend\r\n        if (account.provider === 'google') {\r\n          try {\r\n            const result = await registerUserWithBackend(user, account);\r\n            \r\n            // Extract the ID from the result\r\n            if (result && result.id) {\r\n              // Store the backend userId directly in the token\r\n              token.userId = result.id;\r\n            } else {\r\n              console.error(\"Backend response missing ID field\");\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error storing backend user ID:\", error);\r\n          }\r\n        }\r\n      }\r\n      \r\n      return token;\r\n    },\r\n    \r\n    async session({ session, token }) {      \r\n      // Send properties to the client\r\n      if (session.user) {\r\n        // Use the backend user ID directly as the main ID\r\n        if (token.userId) {\r\n          session.user.id = String(token.userId); // Ensure ID is stored as string\r\n        } else {\r\n          console.log(\"No userId in token!\");\r\n        }\r\n        \r\n        // Add access token to session if it exists\r\n        if (token.accessToken) {\r\n          (session as any).accessToken = token.accessToken;\r\n        }\r\n      }\r\n      \r\n      return session;\r\n    },\r\n    \r\n    async signIn({ user, account, profile }) {\r\n      if (!account || !profile) return true;\r\n      \r\n      try {\r\n        // We no longer need to call registerUserWithBackend here\r\n        // since we're now doing it in the jwt callback to store the ID\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Error during sign in:\", error);\r\n        // Still return true to not block the auth flow\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;;AAAA;AACA;AAIA;;;;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,iQAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IACD,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,4DAA4D;YAC5D,IAAI,WAAW,MAAM;gBACnB,MAAM,WAAW,GAAG,QAAQ,YAAY;gBACxC,MAAM,OAAO,GAAG,QAAQ,QAAQ;gBAEhC,sDAAsD;gBACtD,IAAI,QAAQ,QAAQ,KAAK,UAAU;oBACjC,IAAI;wBACF,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,0BAAuB,AAAD,EAAE,MAAM;wBAEnD,iCAAiC;wBACjC,IAAI,UAAU,OAAO,EAAE,EAAE;4BACvB,iDAAiD;4BACjD,MAAM,MAAM,GAAG,OAAO,EAAE;wBAC1B,OAAO;4BACL,QAAQ,KAAK,CAAC;wBAChB;oBACF,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,kCAAkC;oBAClD;gBACF;YACF;YAEA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,gCAAgC;YAChC,IAAI,QAAQ,IAAI,EAAE;gBAChB,kDAAkD;gBAClD,IAAI,MAAM,MAAM,EAAE;oBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,MAAM,MAAM,GAAG,gCAAgC;gBAC1E,OAAO;oBACL,QAAQ,GAAG,CAAC;gBACd;gBAEA,2CAA2C;gBAC3C,IAAI,MAAM,WAAW,EAAE;oBACpB,QAAgB,WAAW,GAAG,MAAM,WAAW;gBAClD;YACF;YAEA,OAAO;QACT;QAEA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACrC,IAAI,CAAC,WAAW,CAAC,SAAS,OAAO;YAEjC,IAAI;gBACF,yDAAyD;gBACzD,+DAA+D;gBAC/D,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,yBAAyB;gBACvC,+CAA+C;gBAC/C,OAAO;YACT;QACF;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,mPAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}